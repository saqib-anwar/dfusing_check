         [-0.0878, -0.0047,  0.7139],
         [-0.0768, -0.0126,  0.7181]],

        [[-0.1251,  0.0623,  0.8148],
         [-0.1116,  0.0727,  0.8041],
         [ 0.0739, -0.0345,  0.8813],
         ...,
         [-0.0723, -0.0159,  0.7194],
         [-0.0888, -0.0086,  0.7125],
         [-0.0779, -0.0166,  0.7167]]],
       device='cuda:0', grad_fn=<ThAddBackward>)
2019-06-04 03:23:48,479 : Test time 10h 11m 48s Test Frame No.89 dis:0.010614316910505295




out_img.size:  torch.Size([1, 32, 160, 120])
emb:::: torch.Size([1, 32, 19200])
choose.shape before:  torch.Size([1, 1, 500])
choose:  torch.Size([1, 32, 500])
emb after gather::  torch.Size([1, 32, 500])
pointcloud shape before transpose:  torch.Size([1, 500, 3])
pointcloud after transpose:  torch.Size([1, 3, 500])
PoseNetFeat: x shape after conv layer:  torch.Size([1, 64, 500])
PoseNetFeat: emb shape after conv layer:  torch.Size([1, 64, 500])
after concatenation shape of pointnet1:  torch.Size([1, 128, 500])
after concatenation shape of pointnet2:  torch.Size([1, 256, 500])
apx shape:  torch.Size([1, 1024, 1])
apx shape after change:  torch.Size([1, 1024, 500])
final shape after concat of pointnetfeat_1 & pointnetfeat_2:  torch.Size([1, 1408, 500])
rx shape after 1st iteration:  torch.Size([1, 640, 500])
rx shape after 2nd iteration:  torch.Size([1, 256, 500])
rx shape after 3rd iteration:  torch.Size([1, 128, 500])
rx after shape change:  torch.Size([1, 1, 4, 500])
out__rx shape before contiguous:  torch.Size([1, 4, 500])
out__rx shape after contiguous:  torch.Size([1, 500, 4])
out__cx shape after contiguous:  torch.Size([1, 500, 1])
out__tx shape after contiguous:  torch.Size([1, 500, 3])


emb at the end:  torch.Size([1, 32, 500]) 

*****************ENTERING LOSS*************************


 bs & np vlaues: 1 500
***********************PRED VALUE*************** tensor([[[ 0.0503,  0.0879,  0.9332],
         [-0.0499, -0.1125,  0.9190],
         [-0.0477, -0.1186,  0.9189],
         ...,
         [ 0.0616,  0.0421,  0.8144],
         [ 0.0563,  0.0419,  0.8116],
         [ 0.0631,  0.0512,  0.8098]],

        [[ 0.0505,  0.0853,  0.9334],
         [-0.0510, -0.1145,  0.9199],
         [-0.0488, -0.1207,  0.9198],
         ...,
         [ 0.0611,  0.0392,  0.8146],
         [ 0.0557,  0.0391,  0.8118],
         [ 0.0626,  0.0483,  0.8100]],

        [[ 0.0509,  0.0873,  0.9334],
         [-0.0501, -0.1127,  0.9198],
         [-0.0479, -0.1188,  0.9198],
         ...,
         [ 0.0616,  0.0413,  0.8147],
         [ 0.0563,  0.0412,  0.8119],
         [ 0.0631,  0.0505,  0.8100]],

        ...,

        [[ 0.0566,  0.0408,  0.9326],
         [-0.0454, -0.1584,  0.9155],
         [-0.0432, -0.1645,  0.9148],
         ...,
         [ 0.0550,  0.0033,  0.8104],
         [ 0.0493,  0.0033,  0.8082],
         [ 0.0560,  0.0127,  0.8063]],

        [[ 0.0578,  0.0426,  0.9341],
         [-0.0448, -0.1563,  0.9167],
         [-0.0426, -0.1624,  0.9160],
         ...,
         [ 0.0562,  0.0052,  0.8120],
         [ 0.0506,  0.0052,  0.8097],
         [ 0.0573,  0.0146,  0.8078]],

        [[ 0.0579,  0.0420,  0.9351],
         [-0.0460, -0.1562,  0.9175],
         [-0.0438, -0.1624,  0.9167],
         ...,
         [ 0.0561,  0.0047,  0.8129],
         [ 0.0505,  0.0048,  0.8106],
         [ 0.0572,  0.0142,  0.8088]]],
       device='cuda:0', grad_fn=<ThAddBackward>)
2019-06-04 03:23:48,507 : Test time 10h 11m 48s Test Frame No.90 dis:0.027417635545134544
values of bounding box:  216 336 311 511
posemat:
 [[ 0.74141985 -0.67080283  0.01789349  0.03434526]
 [ 0.00746922 -0.01841394 -0.99980255  0.14132712]
 [ 0.67099987  0.7414071  -0.00864208  0.68792157]
 [ 0.          0.          0.          1.        ]]
traget_r:
 [[ 0.74141985 -0.67080283  0.01789349]
 [ 0.00746922 -0.01841394 -0.99980255]
 [ 0.67099987  0.7414071  -0.00864208]]
target_t:
 [0.03434526 0.14132712 0.68792157]
length of choose here:  5783
first:  NP1
second:  1
627.93334
self.cam_fx value:  1080.2331
self.cam_fy value:  1080.2312



***********************************ITERATION MID*******************************************



values of bounding box:  186 346 294 414
posemat:
 [[ 0.99107575  0.1332947  -0.00117183 -0.05707614]
 [ 0.13328658 -0.99106283 -0.00540045  0.0450228 ]
 [-0.00188121  0.00519607 -0.99998473  0.9729075 ]
 [ 0.          0.          0.          1.        ]]
traget_r:
 [[ 0.99107575  0.1332947  -0.00117183]
 [ 0.13328658 -0.99106283 -0.00540045]
 [-0.00188121  0.00519607 -0.99998473]]
target_t:
 [-0.05707614  0.0450228   0.9729075 ]
length of choose here:  5587
first:  NP5
second:  5
626.34743
self.cam_fx value:  1075.5821
self.cam_fy value:  1075.5776



***********************************ITERATION MID*******************************************





here are the MODEL POINTS: 
 [[-0.0365361   0.07903901  0.01844651]
 [ 0.07666792 -0.1239278   0.02373757]
 [-0.06367072  0.05555524  0.02522044]
 ...
 [-0.01804091  0.03403261  0.147069  ]
 [-0.03361688  0.04117122  0.1470435 ]
 [-0.02357953  0.03143882  0.1513141 ]]


printing here the cloud: 
 tensor([[-2.5370, -2.7610, 11.2350],
        [-2.5682, -2.7506, 11.2350],
        [-2.5370, -2.7506, 11.2350],
        ...,
        [-1.3379, -0.9495,  6.3130],
        [-1.3287, -0.9513,  6.3250],
        [-1.3135, -0.9529,  6.3360]])


printing here the length of cloud: 
 torch.Size([500, 3])



printing here the choose: 
 tensor([[ 1022,  1139,  1142,  1143,  1259,  1260,  1262,  1381,  1500,  1501,
          1502,  1503,  1504,  1621,  1623,  1740,  1741,  1742,  1744,  1860,
          1861,  1862,  1863,  1982,  1983,  2101,  2103,  2222,  2224,  2341,
          2344,  2462,  2582,  2583,  2702,  2703,  2823,  2941,  2942,  2943,
          3061,  3062,  3063,  3183,  3304,  4025,  4505,  4624,  4744,  4864,
          4865,  4985,  5105,  5568,  5569,  5687,  5688,  5689,  5953,  5954,
          6072,  6073,  6075,  6193,  6195,  6271,  6273,  6274,  6311,  6313,
          6314,  6390,  6430,  6433,  6434,  6435,  6505,  6507,  6511,  6549,
          6550,  6553,  6555,  6557,  6622,  6623,  6625,  6630,  6668,  6671,
          6674,  6675,  6676,  6677,  6740,  6745,  6746,  6747,  6748,  6790,
          6792,  6793,  6795,  6796,  6860,  6863,  6865,  6867,  6909,  6911,
          6912,  6914,  6915,  6916,  6918,  6919,  6978,  6981,  6983,  7029,
          7031,  7034,  7035,  7036,  7040,  7099,  7102,  7104,  7148,  7150,
          7151,  7152,  7155,  7156,  7157,  7158,  7161,  7217,  7218,  7220,
          7221,  7222,  7253,  7255,  7271,  7272,  7273,  7275,  7276,  7278,
          7280,  7282,  7283,  7284,  7287,  7289,  7290,  7334,  7338,  7339,
          7340,  7344,  7374,  7375,  7390,  7395,  7397,  7398,  7400,  7402,
          7406,  7407,  7409,  7415,  7419,  7420,  7421,  7453,  7455,  7456,
          7458,  7459,  7461,  7493,  7494,  7495,  7497,  7500,  7501,  7503,
          7508,  7510,  7511,  7512,  7513,  7514,  7516,  7517,  7518,  7519,
          7522,  7523,  7527,  7528,  7529,  7530,  7531,  7532,  7534,  7538,
          7539,  7540,  7542,  7544,  7572,  7574,  7577,  7578,  7615,  7616,
          7617,  7618,  7620,  7622,  7623,  7627,  7628,  7629,  7631,  7636,
          7638,  7639,  7642,  7644,  7649,  7651,  7652,  7653,  7654,  7657,
          7659,  7662,  7691,  7692,  7693,  7694,  7696,  7698,  7699,  7734,
          7737,  7738,  7739,  7740,  7741,  7742,  7743,  7745,  7746,  7748,
          7753,  7755,  7756,  7758,  7764,  7765,  7766,  7769,  7775,  7777,
          7781,  7789,  7815,  7817,  7818,  7846,  7849,  7850,  7857,  7859,
          7863,  7864,  7865,  7867,  7869,  7871,  7876,  7878,  7885,  7887,
          7889,  7894,  7905,  7909,  7935,  7965,  7966,  7967,  7970,  7971,
          7974,  7978,  7982,  7986,  7990,  7991,  7992,  7996,  8001,  8003,
          8005,  8006,  8009,  8012,  8015,  8016,  8018,  8022,  8023,  8024,
          8025,  8027,  8029,  8085,  8086,  8087,  8088,  8091,  8092,  8093,
          8096,  8097,  8098,  8099,  8106,  8108,  8109,  8113,  8115,  8116,
          8117,  8118,  8119,  8120,  8124,  8125,  8127,  8134,  8135,  8136,
          8138,  8139,  8140,  8146,  8148,  8207,  8208,  8210,  8211,  8213,
          8215,  8216,  8218,  8222,  8223,  8231,  8232,  8233,  8235,  8236,
          8238,  8240,  8247,  8248,  8255,  8259,  8260,  8262,  8264,  8266,
          8339,  8340,  8348,  8349,  8350,  8351,  8352,  8353,  8382,  8383,
          8471,  8473,  8475,  8477,  8596,  8716,  8954,  9015,  9019,  9073,
          9138,  9140,  9193,  9255,  9257,  9259,  9376,  9378,  9380,  9496,
          9498,  9499,  9616,  9618, 11241, 11359, 11360, 11361, 11478, 11479,
         11598, 11600, 11601, 11716, 11720, 11839, 11840, 11841, 11842, 11961,
         12079, 12081, 12082, 12083, 12199, 12200, 12202, 12203, 12308, 12310,
         12311, 12313, 12320, 12430, 12431, 12549, 12550, 12551, 12554, 12555,
         12556, 12557, 12559, 12560, 12562, 12669, 12671, 12672, 12673, 12674,
         12675, 12676, 12677, 12678, 12679, 12680, 12789, 12791, 12792, 12794,
         12795, 12797, 12798, 12799, 12907, 12908, 12911, 12913, 12914, 12915,
         12918, 12919, 12921, 13035, 13036, 13037, 13038, 13040, 13158, 13273,
         13274, 13277, 13278, 13279, 13280, 13393, 13396, 13397, 13399, 13402]])


printing here the length of choose: 
 torch.Size([1, 500])



printing here the img_masked: 
 tensor([[[ 722.7729,  722.7729,  722.7729,  ...,  709.6725,  718.4061,
           718.4061],
         [ 727.1397,  727.1397,  727.1397,  ...,  714.0393,  718.4061,
           718.4061],
         [ 731.5065,  731.5065,  731.5065,  ...,  718.4061,  718.4061,
           718.4061],
         ...,
         [ 823.2096,  823.2096,  823.2096,  ...,  792.6419,  792.6419,
           792.6419],
         [ 831.9432,  836.3101,  836.3101,  ...,  792.6419,  797.0087,
           797.0087],
         [ 836.3101,  836.3101,  836.3101,  ...,  797.0087,  797.0087,
           797.0087]],

        [[ 855.1071,  855.1071,  855.1071,  ...,  837.2500,  846.1786,
           846.1786],
         [ 859.5714,  859.5714,  859.5714,  ...,  841.7143,  846.1786,
           846.1786],
         [ 864.0357,  864.0357,  864.0357,  ...,  846.1786,  846.1786,
           846.1786],
         ...,
         [ 944.3929,  944.3929,  944.3929,  ...,  908.6786,  908.6786,
           908.6786],
         [ 953.3214,  957.7857,  957.7857,  ...,  908.6786,  913.1429,
           913.1429],
         [ 957.7857,  957.7857,  957.7857,  ...,  913.1429,  913.1429,
           913.1429]],

        [[1104.8622, 1104.8622, 1104.8622,  ..., 1087.0845, 1095.9734,
          1095.9734],
         [1109.3066, 1109.3066, 1109.3066,  ..., 1091.5289, 1095.9734,
          1095.9734],
         [1113.7511, 1113.7511, 1113.7511,  ..., 1095.9734, 1095.9734,
          1095.9734],
         ...,
         [1127.0845, 1127.0845, 1127.0845,  ..., 1113.7511, 1113.7511,
          1113.7511],
         [1131.5289, 1131.5289, 1131.5289,  ..., 1113.7511, 1118.1956,
          1118.1956],
         [1131.5289, 1131.5289, 1131.5289,  ..., 1118.1956, 1118.1956,
          1118.1956]]])


printing here the length of img_masked: 
 torch.Size([3, 120, 120])



printing here the target: 
 tensor([[ 0.0876,  0.1246,  0.6843],
        [ 0.1287,  0.1164,  0.9130],
        [ 0.1236,  0.1186,  0.6852],
        ...,
        [ 0.1045, -0.0044,  0.7288],
        [ 0.1120, -0.0040,  0.7134],
        [ 0.1105, -0.0085,  0.7272]])


printing here the length of target: 
 torch.Size([500, 3])



printing here the model_points: 
 tensor([[-0.0365,  0.0790,  0.0184],
        [ 0.0767, -0.1239,  0.0237],
        [-0.0637,  0.0556,  0.0252],
        ...,
        [-0.0180,  0.0340,  0.1471],
        [-0.0336,  0.0412,  0.1470],
        [-0.0236,  0.0314,  0.1513]])


printing here the length of model_points: 
 torch.Size([500, 3])



LONGTENSOR:  171 






LONGTENSOR: tensor([171]) 





here are the MODEL POINTS: 
 [[-0.03664755  0.07808837  0.01916232]
 [ 0.07281335 -0.1209907   0.02111955]
 [ 0.05806557 -0.1120787   0.02821152]
 ...
 [-0.02578317  0.03447351  0.1465249 ]
 [-0.02728285  0.02623298  0.14692   ]
 [-0.01427655  0.03149844  0.1495374 ]]


printing here the cloud: 
 tensor([[-3.2124, -2.7202,  9.9380],
        [-3.1112, -2.7125,  9.9100],
        [-3.2955, -2.7033,  9.9100],
        ...,
        [-1.8061, -1.5798,  8.0370],
        [-1.7752, -1.5724,  7.9990],
        [-1.8101, -1.5759,  8.0550]])


printing here the length of cloud: 
 torch.Size([500, 3])



printing here the choose: 
 tensor([[ 3648,  3658,  3838,  4036,  4062,  4262,  4466,  4632,  4664,  4854,
          5062,  5231,  5232,  5262,  5456,  5457,  6251,  6453,  6460,  6461,
          6633,  6664,  6853,  6854,  6857,  6859,  6861,  6868,  7035,  7050,
          7058,  7247,  7261,  7277,  7432,  7453,  7454,  7478,  7481,  7648,
          7652,  7867,  7881,  7887,  8065,  8068,  8071,  8088,  8094,  8247,
          8249,  8259,  8262,  8267,  8273,  8287,  8295,  8425,  8465,  8480,
          8483,  8485,  8494,  8649,  8652,  8668,  8692,  8693,  8852,  8857,
          8863,  8870,  8873,  8876,  8877,  8897,  8903,  8909,  9028,  9052,
          9054,  9063,  9079,  9268,  9287,  9464,  9480,  9485,  9488,  9496,
          9500,  9626,  9642,  9644,  9656,  9664,  9668,  9671,  9703,  9716,
          9721,  9855,  9875,  9889,  9890,  9895,  9907,  9916,  9922, 10043,
         10054, 10064, 10117, 10121, 10128, 10241, 10246, 10259, 10270, 10283,
         10285, 10288, 10313, 10314, 10328, 10336, 10338, 10344, 10346, 10347,
         10425, 10438, 10450, 10451, 10486, 10495, 10499, 10516, 10523, 10532,
         10534, 10641, 10647, 10658, 10663, 10685, 10730, 10737, 10745, 10748,
         10854, 10872, 10898, 10907, 10908, 10909, 10921, 10929, 10936, 10939,
         10958, 11021, 11051, 11077, 11078, 11091, 11107, 11117, 11118, 11135,
         11146, 11153, 11163, 11244, 11267, 11275, 11278, 11282, 11287, 11302,
         11308, 11311, 11326, 11335, 11360, 11365, 11449, 11457, 11462, 11471,
         11474, 11476, 11483, 11498, 11502, 11504, 11518, 11520, 11521, 11528,
         11538, 11639, 11647, 11671, 11680, 11683, 11684, 11687, 11692, 11729,
         11743, 11753, 11762, 11768, 11850, 11868, 11887, 11891, 11956, 11962,
         11964, 11967, 12020, 12026, 12058, 12059, 12066, 12097, 12100, 12144,
         12162, 12175, 12227, 12251, 12255, 12257, 12260, 12304, 12310, 12313,
         12323, 12325, 12333, 12338, 12421, 12449, 12464, 12475, 12484, 12487,
         12502, 12518, 12526, 12527, 12542, 12545, 12555, 12574, 12576, 12624,
         12636, 12645, 12705, 12706, 12725, 12734, 12749, 12769, 12777, 12856,
         12860, 12868, 12880, 12894, 12903, 12967, 12969, 12977, 13020, 13037,
         13068, 13083, 13084, 13124, 13173, 13289, 13292, 13301, 13336, 13337,
         13356, 13357, 13358, 13363, 13441, 13468, 13475, 13507, 13508, 13518,
         13526, 13528, 13534, 13554, 13564, 13623, 13636, 13644, 13650, 13700,
         13702, 13708, 13712, 13728, 13780, 13781, 13831, 13842, 13856, 13882,
         13885, 13889, 13896, 13908, 13913, 13914, 13945, 13964, 13970, 13977,
         14033, 14055, 14056, 14069, 14079, 14084, 14124, 14148, 14150, 14178,
         14231, 14242, 14275, 14276, 14298, 14315, 14341, 14342, 14380, 14479,
         14500, 14509, 14537, 14543, 14546, 14567, 14569, 14646, 14681, 14684,
         14755, 14771, 14891, 14906, 14942, 14947, 14965, 15039, 15047, 15054,
         15097, 15108, 15118, 15146, 15170, 15240, 15312, 15315, 15330, 15333,
         15362, 15382, 15451, 15495, 15515, 15543, 15558, 15563, 15639, 15689,
         15704, 15706, 15713, 15717, 15731, 15764, 15772, 15780, 15899, 15917,
         15948, 15955, 15968, 15977, 16114, 16124, 16133, 16135, 16156, 16180,
         16312, 16314, 16327, 16328, 16334, 16340, 16341, 16348, 16355, 16356,
         16359, 16362, 16376, 16513, 16514, 16539, 16576, 16712, 16718, 16719,
         16740, 16770, 16920, 16930, 16953, 16976, 16978, 17114, 17135, 17141,
         17148, 17162, 17168, 17326, 17341, 17374, 17379, 17517, 17543, 17565,
         17576, 17728, 17729, 17744, 17756, 17761, 17763, 17939, 17945, 17946,
         18130, 18135, 18144, 18152, 18166, 18346, 18352, 18355, 18369, 18371,
         18539, 18541, 18547, 18732, 18737, 18746, 18753, 18763, 18772, 18936,
         19136, 19140, 19149, 19166, 19338, 19344, 19351, 19352, 19354, 19555,
         19559, 19747, 19750, 19757, 19768, 19961, 19967, 20354, 20357, 20554]])


printing here the length of choose: 
 torch.Size([1, 500])



printing here the img_masked: 



***********************************ITERATION*******************************************



value of index here:

 104 


 tensor([[[ 801.3755,  818.8428,  814.4760,  ...,  735.8734,  722.7729,
           727.1397],
         [ 805.7424,  823.2096,  814.4760,  ...,  740.2402,  727.1397,
           731.5065],
         [ 805.7424,  823.2096,  818.8428,  ...,  748.9738,  744.6070,
           744.6070],
         ...,
         [  -2.1179,   45.9170,  364.6943,  ...,  770.8079,  770.8079,
           775.1747],
         [  -2.1179,   -2.1179,   45.9170,  ...,  775.1747,  770.8079,
           766.4410],
         [  -2.1179,   -2.1179,   -2.1179,  ...,  775.1747,  766.4410,
           757.7074]],

        [[ 922.0714,  917.6071,  913.1429,  ...,  841.7143,  828.3214,
           828.3214],
         [ 926.5357,  922.0714,  913.1429,  ...,  846.1786,  832.7857,
           832.7857],
         [ 926.5357,  922.0714,  917.6071,  ...,  855.1071,  850.6429,
           846.1786],
         ...,
         [   6.8929,   60.4643,  386.3571,  ...,  859.5714,  859.5714,
           864.0357],
         [   6.8929,    2.4286,   60.4643,  ...,  864.0357,  859.5714,
           855.1071],
         [   6.8929,    2.4286,    2.4286,  ...,  864.0357,  855.1071,
           846.1786]],

        [[1113.7511, 1127.0845, 1122.6400,  ..., 1118.1956, 1104.8622,
          1118.1956],
         [1118.1956, 1131.5289, 1122.6400,  ..., 1122.6400, 1109.3066,
          1122.6400],
         [1118.1956, 1131.5289, 1127.0845,  ..., 1131.5289, 1127.0845,
          1131.5289],
         ...,
         [  -1.8044,   82.6400,  415.9734,  ..., 1122.6400, 1122.6400,
          1127.0845],
         [  -1.8044,   15.9733,   91.5289,  ..., 1127.0845, 1122.6400,
          1118.1956],
         [  -1.8044,   15.9733,   20.4178,  ..., 1127.0845, 1118.1956,
          1109.3066]]])


printing here the length of img_masked: 
 torch.Size([3, 120, 200])



printing here the target: 
 tensor([[-0.1511,  0.0212,  0.8573],
        [ 0.0576,  0.0968,  0.8090],
        [ 0.0409,  0.0934,  0.8015],
        ...,
        [-0.1089, -0.0351,  0.7420],
        [-0.1049, -0.0295,  0.7373],
        [-0.0978, -0.0404,  0.7431]])


printing here the length of target: 
 torch.Size([500, 3])



printing here the model_points: 
 tensor([[-0.0366,  0.0781,  0.0192],
        [ 0.0728, -0.1210,  0.0211],
        [ 0.0581, -0.1121,  0.0282],
        ...,
        [-0.0258,  0.0345,  0.1465],
        [-0.0273,  0.0262,  0.1469],
        [-0.0143,  0.0315,  0.1495]])


printing here the length of model_points: 
 torch.Size([500, 3])



LONGTENSOR:  276 






LONGTENSOR: tensor([276]) 



values of bounding box:  181 341 289 449
posemat:
 [[ 0.98042122  0.19283561  0.03985796 -0.06037599]
 [ 0.12406115 -0.44772334 -0.88552394  0.08231509]
 [-0.1529152   0.87313128 -0.46288087  0.8150719 ]
 [ 0.          0.          0.          1.        ]]
traget_r:
 [[ 0.98042122  0.19283561  0.03985796]
 [ 0.12406115 -0.44772334 -0.88552394]
 [-0.1529152   0.87313128 -0.46288087]]
target_t:
 [-0.06037599  0.08231509  0.8150719 ]
length of choose here:  5411
first:  NP2
second:  2
628.32147
self.cam_fx value:  1074.3439
self.cam_fy value:  1074.3447



***********************************ITERATION MID*******************************************






***********************************ITERATION*******************************************



value of index here:

 105 




here are the MODEL POINTS: 
 [[ 0.126539   -0.08005007  0.02655573]
 [ 0.07064454 -0.1229125   0.02962863]
 [ 0.1258862  -0.07843722  0.03028723]
 ...
 [-0.02709851  0.02984872  0.1464847 ]
 [-0.01425708  0.03023733  0.1463784 ]
 [-0.02374031  0.03342561  0.1482961 ]]


printing here the cloud: 
 tensor([[-2.2508, -2.6511,  9.8530],
        [-2.2454, -2.6665,  9.9100],
        [-2.2454, -2.6573,  9.9100],
        ...,
        [-3.0613, -1.8403,  8.9800],
        [-3.0613, -1.8320,  8.9800],
        [-3.0365, -1.8271,  8.9560]])


printing here the length of cloud: 
 torch.Size([500, 3])



printing here the choose: 
 tensor([[  937,   939,  1099,  1241,  1245,  1259,  1419,  1422,  1547,  1551,
          1563,  1575,  1581,  1645,  1705,  1741,  1745,  1873,  1901,  1960,
          2020,  2022,  2025,  2027,  2030,  2046,  2047,  2061,  2063,  2067,
          2118,  2192,  2195,  2201,  2209,  2214,  2220,  2275,  2328,  2359,
          2372,  2376,  2377,  2378,  2382,  2388,  2392,  2433,  2435,  2514,
          2583,  2589,  2691,  2698,  2711,  2741,  2795,  2813,  2848,  2854,
          2860,  2902,  3007,  3015,  3025,  3030,  3035,  3053,  3069,  3129,
          3131,  3160,  3161,  3170,  3221,  3222,  3230,  3277,  3292,  3301,
          3304,  3306,  3312,  3320,  3321,  3323,  3334,  3347,  3351,  3420,
          3438,  3476,  3477,  3483,  3503,  3528,  3542,  3546,  3547,  3590,
          3596,  3597,  3621,  3626,  3644,  3645,  3657,  3666,  3672,  3685,
          3690,  3711,  3755,  3758,  3766,  3797,  3849,  3863,  3866,  3884,
          3889,  3892,  3894,  3902,  3905,  3928,  3929,  3943,  3949,  3965,
          3967,  3975,  3988,  4004,  4008,  4011,  4013,  4032,  4057,  4063,
          4072,  4092,  4115,  4142,  4156,  4164,  4175,  4182,  4184,  4192,
          4204,  4209,  4245,  4256,  4267,  4269,  4287,  4299,  4303,  4306,
          4331,  4336,  4370,  4379,  4399,  4417,  4422,  4451,  4494,  4501,
          4529,  4544,  4574,  4615,  4618,  4656,  4673,  4679,  4695,  4697,
          4705,  4708,  4715,  4724,  4742,  4764,  4790,  4792,  4813,  4820,
          4844,  4846,  4849,  4861,  4862,  4867,  4883,  4890,  4909,  4957,
          4966,  4994,  5002,  5032,  5051,  5056,  5061,  5063,  5074,  5081,
          5084,  5110,  5125,  5126,  5134,  5170,  5172,  5191,  5199,  5210,
          5224,  5247,  5258,  5269,  5286,  5296,  5344,  5369,  5376,  5379,
          5384,  5389,  5399,  5402,  5405,  5417,  5418,  5422,  5433,  5516,
          5519,  5532,  5540,  5541,  5548,  5585,  5588,  5592,  5607,  5608,
          5629,  5632,  5636,  5661,  5678,  5679,  5711,  5733,  5741,  5747,
          5749,  5789,  5791,  5809,  5823,  5829,  5838,  5839,  5876,  5882,
          5885,  5893,  5895,  5906,  5947,  5954,  5965,  5976,  5993,  6046,
          6054,  6061,  6071,  6124,  6125,  6129,  6132,  6138,  6149,  6166,
          6171,  6190,  6196,  6205,  6217,  6224,  6231,  6234,  6262,  6276,
          6284,  6289,  6305,  6319,  6329,  6336,  6347,  6351,  6353,  6354,
          6372,  6382,  6386,  6460,  6471,  6486,  6487,  6494,  6509,  6521,
          6526,  6580,  6585,  6598,  6607,  6610,  6617,  6625,  6628,  6632,
          6653,  6660,  6664,  6682,  6690,  6693,  6705,  6773,  6783,  6790,
          6793,  6804,  6806,  6807,  6824,  6836,  6842,  6846,  6871,  6908,
          6931,  6952,  6963,  6976,  6984,  6993,  7009,  7071,  7077,  7113,
          7117,  7127,  7129,  7151,  7162,  7183,  7212,  7240,  7245,  7292,
          7295,  7310,  7329,  7381,  7390,  7394,  7396,  7403,  7412,  7413,
          7430,  7440,  7458,  7472,  7503,  7531,  7542,  7568,  7610,  7618,
          7625,  7628,  7640,  7643,  7653,  7659,  7705,  7708,  7722,  7734,
          7747,  7752,  7795,  7800,  7802,  7805,  7853,  7855,  7866,  7873,
          7883,  7893,  7908,  7937,  7938,  7943,  7946,  7950,  7971,  7972,
          8012,  8047,  8060,  8066,  8076,  8079,  8094,  8120,  8133,  8173,
          8221,  8226,  8230,  8232,  8253,  8255,  8257,  8270,  8276,  8285,
          8332,  8344,  8365,  8367,  8371,  8495,  8535,  8554,  8649,  8675,
          8681,  8684,  8686,  8689,  8702,  8838,  8971,  8999,  9002,  9020,
          9153,  9292,  9451,  9452,  9613,  9636,  9640,  9656,  9773,  9791,
          9812,  9815,  9952,  9964,  9967,  9976, 10128, 10270, 10275, 10277,
         10437, 10594, 10596, 10602, 10604, 10614, 10748, 10771, 10929, 10930,
         11090, 11093, 11390, 11399, 11410, 11712, 11718, 11856, 12016, 12018]])


printing here the length of choose: 
 torch.Size([1, 500])



printing here the img_masked: 
 tensor([[[ 836.3101,  836.3101,  836.3101,  ...,  810.1091,  810.1091,
           810.1091],
         [ 836.3101,  836.3101,  836.3101,  ...,  814.4760,  814.4760,
           810.1091],
         [ 836.3101,  840.6768,  840.6768,  ...,  827.5764,  823.2096,
           814.4760],
         ...,
         [ 827.5764,  827.5764,  827.5764,  ...,  775.1747,  775.1747,
           779.5415],
         [ 827.5764,  827.5764,  827.5764,  ...,  775.1747,  775.1747,
           779.5415],
         [ 827.5764,  827.5764,  827.5764,  ...,  775.1747,  775.1747,
           775.1747]],

        [[ 935.4643,  935.4643,  935.4643,  ...,  908.6786,  908.6786,
           908.6786],
         [ 935.4643,  935.4643,  935.4643,  ...,  913.1429,  913.1429,
           908.6786],
         [ 939.9286,  944.3929,  944.3929,  ...,  890.8214,  904.2143,
           913.1429],
         ...,
         [ 926.5357,  926.5357,  926.5357,  ...,  864.0357,  864.0357,
           868.5000],
         [ 926.5357,  926.5357,  926.5357,  ...,  864.0357,  864.0357,
           868.5000],
         [ 926.5357,  926.5357,  926.5357,  ...,  864.0357,  864.0357,
           864.0357]],

        [[1131.5289, 1131.5289, 1131.5289,  ..., 1118.1956, 1127.0845,
          1127.0845],
         [1131.5289, 1131.5289, 1131.5289,  ..., 1122.6400, 1131.5289,
          1127.0845],
         [1127.0845, 1131.5289, 1131.5289,  ..., 1104.8622, 1109.3066,
          1122.6400],
         ...,
         [1127.0845, 1127.0845, 1127.0845,  ..., 1127.0845, 1127.0845,
          1131.5289],
         [1127.0845, 1127.0845, 1127.0845,  ..., 1127.0845, 1127.0845,
          1131.5289],
         [1127.0845, 1127.0845, 1127.0845,  ..., 1127.0845, 1131.5289,
          1131.5289]]])


printing here the length of img_masked: 
 torch.Size([3, 80, 160])



printing here the target: 
 tensor([[ 0.0833, -0.0245,  0.9000],
        [ 0.1059,  0.0267,  0.8572],
        [ 0.0817, -0.0268,  0.8970],
        ...,
        [-0.0639, -0.0177,  0.7316],
        [-0.0601, -0.0271,  0.7395],
        [-0.0661, -0.0223,  0.7328]])


printing here the length of target: 
 torch.Size([500, 3])



printing here the model_points: 
 tensor([[ 0.1265, -0.0801,  0.0266],
        [ 0.0706, -0.1229,  0.0296],
        [ 0.1259, -0.0784,  0.0303],
        ...,
        [-0.0271,  0.0298,  0.1465],
        [-0.0143,  0.0302,  0.1464],
        [-0.0237,  0.0334,  0.1483]])


printing here the length of model_points: 
 torch.Size([500, 3])



LONGTENSOR:  243 






LONGTENSOR: tensor([243]) 



values of bounding box:  214 294 285 445
posemat:
 [[ 0.61289889 -0.79014384 -0.00525858  0.01027812]
 [-0.7901591  -0.61289943 -0.00169811  0.07200317]
 [-0.00188124  0.00519588 -0.99998473  0.97290748]
 [ 0.          0.          0.          1.        ]]
traget_r:
 [[ 0.61289889 -0.79014384 -0.00525858]
 [-0.7901591  -0.61289943 -0.00169811]
 [-0.00188124  0.00519588 -0.99998473]]
target_t:
 [0.01027812 0.07200317 0.97290748]
length of choose here:  5901
first:  NP5
second:  5
626.34743
self.cam_fx value:  1075.5821
self.cam_fy value:  1075.5776



***********************************ITERATION MID*******************************************





here are the MODEL POINTS: 
 [[-0.05952998  0.05911726  0.02381304]
 [ 0.06751405 -0.1198323   0.02650672]
 [ 0.05875986 -0.1164895   0.02677825]
 ...
 [-0.02590901  0.04158615  0.1470888 ]
 [-0.01294346  0.02370749  0.1490503 ]
 [-0.01495185  0.03591252  0.1496421 ]]


printing here the cloud: 
 tensor([[-2.0136, -1.9507,  7.3500],
        [-2.0317, -1.9481,  7.3660],
        [-2.0248, -1.9481,  7.3660],
        ...,
        [-1.4743, -1.6128,  7.9070],
        [-2.2261, -1.5656,  7.7820],
        [-2.0792, -1.4255,  7.1520]])


printing here the length of cloud: 
 torch.Size([500, 3])



printing here the choose: 
 tensor([[ 4665,  4863,  4864,  4866,  5662,  7042,  9020,  9253,  9255,  9443,
          9460,  9463,  9478,  9505,  9520,  9632,  9634,  9654,  9660,  9662,
          9677,  9680,  9688,  9724,  9741,  9751,  9753,  9754,  9842,  9845,
          9859,  9878,  9899,  9925,  9927,  9948, 10038, 10069, 10085, 10092,
         10104, 10127, 10145, 10233, 10240, 10252, 10259, 10264, 10279, 10297,
         10318, 10320, 10341, 10344, 10357, 10358, 10370, 10456, 10473, 10481,
         10483, 10493, 10532, 10533, 10548, 10549, 10562, 10664, 10683, 10687,
         10734, 10744, 10760, 10772, 10835, 10837, 10841, 10845, 10849, 10855,
         10877, 10883, 10884, 10926, 10929, 10932, 10939, 10940, 11049, 11057,
         11065, 11077, 11079, 11098, 11111, 11125, 11137, 11152, 11164, 11169,
         11172, 11176, 11256, 11258, 11259, 11277, 11327, 11329, 11345, 11349,
         11356, 11358, 11443, 11452, 11470, 11479, 11484, 11485, 11486, 11487,
         11490, 11499, 11513, 11523, 11541, 11548, 11550, 11551, 11566, 11577,
         11642, 11649, 11650, 11653, 11662, 11685, 11688, 11722, 11726, 11730,
         11732, 11736, 11740, 11741, 11750, 11760, 11761, 11763, 11768, 11849,
         11873, 11875, 11881, 11905, 11912, 11924, 11939, 11958, 11977, 11978,
         12048, 12073, 12074, 12084, 12092, 12121, 12129, 12154, 12161, 12165,
         12242, 12251, 12253, 12277, 12285, 12286, 12322, 12335, 12337, 12342,
         12343, 12352, 12353, 12359, 12362, 12458, 12460, 12463, 12477, 12488,
         12491, 12497, 12514, 12534, 12538, 12552, 12558, 12559, 12564, 12578,
         12644, 12660, 12665, 12675, 12682, 12687, 12719, 12722, 12731, 12734,
         12844, 12887, 12894, 12896, 12897, 12898, 12906, 12911, 12912, 12923,
         12938, 13062, 13064, 13075, 13087, 13092, 13109, 13119, 13138, 13141,
         13142, 13155, 13160, 13161, 13252, 13275, 13279, 13286, 13308, 13310,
         13312, 13320, 13328, 13330, 13345, 13347, 13373, 13377, 13452, 13459,
         13466, 13476, 13488, 13492, 13518, 13521, 13532, 13535, 13539, 13541,
         13577, 13579, 13646, 13668, 13691, 13702, 13731, 13770, 13858, 13883,
         13893, 13901, 13907, 13916, 13948, 13950, 13957, 13958, 13963, 13976,
         14092, 14106, 14130, 14137, 14139, 14154, 14155, 14156, 14160, 14230,
         14248, 14266, 14280, 14289, 14304, 14305, 14355, 14360, 14363, 14364,
         14446, 14450, 14461, 14470, 14472, 14482, 14492, 14508, 14511, 14519,
         14520, 14540, 14545, 14546, 14554, 14556, 14561, 14568, 14636, 14665,
         14667, 14670, 14671, 14686, 14693, 14715, 14725, 14748, 14757, 14775,
         14777, 14839, 14864, 14887, 14888, 14890, 14907, 14915, 14920, 14942,
         14955, 14961, 14965, 14967, 15057, 15071, 15074, 15099, 15106, 15108,
         15119, 15129, 15130, 15139, 15152, 15153, 15163, 15253, 15255, 15266,
         15267, 15270, 15294, 15296, 15302, 15308, 15314, 15326, 15328, 15340,
         15342, 15348, 15354, 15356, 15476, 15482, 15488, 15495, 15509, 15512,
         15517, 15530, 15563, 15564, 15650, 15653, 15677, 15685, 15690, 15697,
         15718, 15731, 15744, 15750, 15751, 15759, 15833, 15850, 15859, 15875,
         15878, 15881, 15894, 15901, 15902, 15904, 15921, 15927, 15939, 15943,
         15965, 15973, 15978, 16026, 16054, 16062, 16075, 16080, 16085, 16093,
         16104, 16119, 16131, 16147, 16148, 16159, 16162, 16171, 16176, 16230,
         16255, 16260, 16268, 16283, 16294, 16301, 16305, 16316, 16322, 16332,
         16333, 16339, 16341, 16347, 16371, 16372, 16432, 16433, 16434, 16455,
         16461, 16513, 16523, 16538, 16542, 16562, 16567, 16572, 16627, 16630,
         16652, 16655, 16698, 16703, 16729, 16743, 16752, 16754, 16769, 16822,
         16823, 16826, 16851, 16860, 16865, 16930, 16949, 16954, 17058, 17065,
         17125, 17137, 17174, 17347, 17351, 17354, 17368, 17369, 17374, 17431,
         17549, 17551, 17630, 17750, 17765, 17766, 17958, 17959, 18452, 18847]])


printing here the length of choose: 
 torch.Size([1, 500])



printing here the img_masked: 



***********************************ITERATION*******************************************



value of index here:

 102 




here are the MODEL POINTS: 
 [[ 0.07655147 -0.1222206   0.02005143]
 [ 0.06445599 -0.1177619   0.02304163]
 [ 0.124928   -0.07453392  0.02380052]
 ...
 [-0.01172562  0.04079805  0.1450929 ]
 [-0.02117423  0.02700341  0.1474647 ]
 [-0.02857614  0.0405204   0.1501896 ]]


printing here the cloud: 
 tensor([[-3.6073, -2.6954,  9.8810],
        [-3.5604, -2.6878,  9.8530],
        [-3.5421, -2.6878,  9.8530],
        ...,
        [-2.1083, -1.5054,  7.6950],
        [-2.0019, -1.4955,  7.6440],
        [-1.9735, -1.4955,  7.6440]])


printing here the length of cloud: 
 torch.Size([500, 3])



printing here the choose: 
 tensor([[ 2421,  2425,  2427,  2748,  2752,  2908,  3052,  3078,  3211,  3377,
          3378,  3379,  3380,  3388,  3395,  3543,  3547,  3556,  3561,  3566,
          3567,  3688,  3701,  3712,  3713,  3716,  3723,  3877,  4030,  4033,
          4181,  4340,  4358,  4360,  4382,  4484,  4485,  4683,  4691,  4841,
          4848,  4853,  4868,  4869,  4963,  4983,  4989,  5000,  5021,  5033,
          5034,  5156,  5170,  5174,  5185,  5196,  5307,  5312,  5318,  5453,
          5463,  5493,  5497,  5507,  5556,  5557,  5639,  5642,  5662,  5663,
          5720,  5721,  5777,  5779,  5797,  5799,  5840,  5876,  5939,  5946,
          5966,  5969,  5974,  5999,  6005,  6006,  6093,  6114,  6143,  6171,
          6243,  6245,  6260,  6277,  6283,  6291,  6310,  6321,  6352,  6448,
          6464,  6467,  6563,  6576,  6609,  6615,  6617,  6625,  6632,  6637,
          6647,  6744,  6755,  6756,  6788,  6814,  6816,  6821,  6824,  6896,
          6897,  6965,  6967,  6972,  6983,  6985,  7044,  7065,  7067,  7093,
          7111,  7132,  7145,  7205,  7212,  7231,  7236,  7238,  7241,  7248,
          7276,  7278,  7279,  7282,  7301,  7304,  7333,  7386,  7406,  7407,
          7422,  7426,  7453,  7487,  7492,  7493,  7495,  7501,  7529,  7539,
          7552,  7558,  7567,  7573,  7577,  7585,  7601,  7652,  7655,  7659,
          7690,  7692,  7711,  7723,  7724,  7746,  7748,  7754,  7787,  7795,
          7810,  7818,  7823,  7852,  7859,  7864,  7877,  7900,  7927,  7939,
          7940,  7991,  8019,  8021,  8027,  8037,  8039,  8046,  8050,  8092,
          8095,  8097,  8100,  8119,  8138,  8141,  8149,  8178,  8202,  8207,
          8223,  8232,  8233,  8238,  8259,  8260,  8279,  8288,  8299,  8307,
          8313,  8329,  8359,  8362,  8380,  8464,  8502,  8509,  8511,  8512,
          8513,  8521,  8526,  8528,  8541,  8556,  8632,  8635,  8658,  8673,
          8681,  8701,  8709,  8713,  8737,  8741,  8742,  8758,  8766,  8768,
          8810,  8846,  8853,  8862,  8889,  8892,  8894,  8902,  8911,  8913,
          8932,  8934,  8979,  8984,  8998,  9006,  9013,  9028,  9045,  9051,
          9086,  9088,  9102,  9105,  9111,  9114,  9174,  9178,  9184,  9207,
          9235,  9250,  9301,  9347,  9378,  9415,  9451,  9461,  9472,  9510,
          9513,  9521,  9522,  9527,  9543,  9626,  9647,  9682,  9684,  9692,
          9693,  9722,  9727,  9735,  9790,  9812,  9821,  9829,  9834,  9848,
          9853,  9864,  9867,  9871,  9873,  9885,  9891,  9901,  9903,  9907,
          9911,  9942,  9959,  9985,  9987, 10007, 10022, 10035, 10072, 10073,
         10155, 10158, 10173, 10176, 10190, 10191, 10202, 10280, 10283, 10296,
         10298, 10302, 10326, 10328, 10334, 10340, 10346, 10359, 10361, 10374,
         10376, 10383, 10389, 10391, 10507, 10514, 10520, 10527, 10596, 10609,
         10646, 10648, 10690, 10768, 10777, 10782, 10789, 10811, 10827, 10840,
         10849, 10850, 10859, 10954, 10964, 10975, 10992, 10995, 10998, 11013,
         11022, 11025, 11113, 11120, 11133, 11137, 11162, 11171, 11176, 11180,
         11268, 11277, 11291, 11296, 11301, 11309, 11320, 11337, 11424, 11443,
         11444, 11455, 11459, 11468, 11474, 11484, 11497, 11502, 11588, 11607,
         11625, 11629, 11640, 11649, 11660, 11661, 11667, 11754, 11761, 11787,
         11788, 11805, 11807, 11808, 11815, 11823, 11951, 11965, 11982, 11986,
         12104, 12109, 12115, 12127, 12131, 12142, 12246, 12281, 12416, 12431,
         12440, 12442, 12460, 12578, 12579, 12582, 12596, 12612, 12754, 12775,
         12782, 13061, 13069, 13080, 13092, 13248, 13397, 13401, 13404, 13421,
         13422, 13539, 13544, 13567, 13703, 13720, 13737, 13738, 13871, 13873,
         13902, 14026, 14050, 14051, 14201, 14364, 14367, 14369, 14378, 14385,
         14498, 14508, 14534, 14541, 14668, 14680, 14683, 14847, 15007, 15172,
         15320, 15321, 15326, 15476, 15479, 15627, 15648, 15799, 15812, 15816]])


printing here the length of choose: 
 torch.Size([1, 500])



printing here the img_masked: 
 tensor([[[ 687.8384,  687.8384,  687.8384,  ...,  583.0349,  578.6681,
           578.6681],
         [ 683.4716,  687.8384,  687.8384,  ...,  587.4017,  583.0349,
           578.6681],
         [ 683.4716,  687.8384,  687.8384,  ...,  587.4017,  583.0349,
           583.0349],
         ...,
         [ 866.8777,  866.8777,  866.8777,  ...,  823.2096,  823.2096,
           823.2096],
         [ 866.8777,  866.8777,  866.8777,  ...,  823.2096,  823.2096,
           823.2096],
         [ 866.8777,  866.8777,  866.8777,  ...,  823.2096,  823.2096,
           823.2096]],

        [[ 792.6071,  792.6071,  792.6071,  ...,  685.4643,  681.0000,
           681.0000],
         [ 788.1429,  792.6071,  792.6071,  ...,  689.9286,  685.4643,
           681.0000],
         [ 788.1429,  792.6071,  792.6071,  ...,  689.9286,  681.0000,
           681.0000],
         ...,
         [ 966.7143,  966.7143,  966.7143,  ...,  913.1429,  913.1429,
           913.1429],
         [ 966.7143,  966.7143,  966.7143,  ...,  913.1429,  913.1429,
           913.1429],
         [ 966.7143,  966.7143,  966.7143,  ...,  913.1429,  913.1429,
           913.1429]],

        [[1113.7511, 1113.7511, 1113.7511,  ...,  962.6400,  958.1956,
           958.1956],
         [1109.3066, 1113.7511, 1113.7511,  ...,  967.0845,  962.6400,
           958.1956],
         [1109.3066, 1113.7511, 1113.7511,  ...,  967.0845,  971.5289,
           971.5289],
         ...,
         [1122.6400, 1122.6400, 1122.6400,  ..., 1127.0845, 1127.0845,
          1127.0845],
         [1122.6400, 1122.6400, 1122.6400,  ..., 1127.0845, 1127.0845,
          1127.0845],
         [1122.6400, 1122.6400, 1122.6400,  ..., 1127.0845, 1127.0845,
          1127.0845]]])


printing here the length of img_masked: 
 torch.Size([3, 120, 200])



printing here the target: 
 tensor([[-0.0548,  0.0872,  0.7563],
        [ 0.1618,  0.0754,  0.7892],
        [ 0.1550,  0.0779,  0.7833],
        ...,
        [-0.0199, -0.0312,  0.7190],
        [ 0.0019, -0.0340,  0.7217],
        [-0.0099, -0.0366,  0.7244]])


printing here the length of target: 
 torch.Size([500, 3])



printing here the model_points: 
 tensor([[-0.0595,  0.0591,  0.0238],
        [ 0.0675, -0.1198,  0.0265],
        [ 0.0588, -0.1165,  0.0268],
        ...,
        [-0.0259,  0.0416,  0.1471],
        [-0.0129,  0.0237,  0.1491],
        [-0.0150,  0.0359,  0.1496]])


printing here the length of model_points: 
 torch.Size([500, 3])



LONGTENSOR:  249 






LONGTENSOR: tensor([249]) 






***********************************ITERATION*******************************************


 tensor([[[ 797.0087,  797.0087,  797.0087,  ...,  845.0436,  840.6768,
           836.3101],
         [ 797.0087,  797.0087,  797.0087,  ...,  845.0436,  845.0436,
           840.6768],
         [ 797.0087,  797.0087,  797.0087,  ...,  840.6768,  840.6768,
           836.3101],
         ...,
         [ 801.3755,  801.3755,  801.3755,  ...,  797.0087,  797.0087,
           788.2751],
         [ 801.3755,  801.3755,  801.3755,  ...,  797.0087,  797.0087,
           788.2751],
         [ 801.3755,  801.3755,  801.3755,  ...,  797.0087,  797.0087,
           788.2751]],

        [[ 913.1429,  913.1429,  913.1429,  ...,  944.3929,  935.4643,
           931.0000],
         [ 913.1429,  913.1429,  913.1429,  ...,  944.3929,  939.9286,
           935.4643],
         [ 913.1429,  913.1429,  913.1429,  ...,  944.3929,  944.3929,
           939.9286],
         ...,
         [ 895.2857,  895.2857,  895.2857,  ...,  890.8214,  890.8214,
           881.8929],
         [ 895.2857,  895.2857,  895.2857,  ...,  890.8214,  890.8214,
           881.8929],
         [ 895.2857,  895.2857,  895.2857,  ...,  890.8214,  890.8214,
           881.8929]],

        [[1127.0845, 1127.0845, 1127.0845,  ..., 1118.1956, 1122.6400,
          1122.6400],
         [1127.0845, 1127.0845, 1127.0845,  ..., 1118.1956, 1127.0845,
          1127.0845],
         [1127.0845, 1127.0845, 1127.0845,  ..., 1118.1956, 1127.0845,
          1127.0845],
         ...,
         [1122.6400, 1122.6400, 1122.6400,  ..., 1118.1956, 1118.1956,
          1109.3066],
         [1122.6400, 1122.6400, 1122.6400,  ..., 1118.1956, 1118.1956,
          1109.3066],
         [1122.6400, 1122.6400, 1122.6400,  ..., 1118.1956, 1118.1956,
          1109.3066]]])

value of index here:

 106 




printing here the length of img_masked: 
 torch.Size([3, 120, 160])



printing here the target: 
 tensor([[-0.1503, -0.1278,  0.9724],
        [-0.1373, -0.1291,  0.9706],
        [-0.1792, -0.0829,  0.9302],
        ...,
        [-0.0041, -0.1027,  0.8051],
        [ 0.0002, -0.1167,  0.8134],
        [ 0.0119, -0.1100,  0.8055]])


printing here the length of target: 
 torch.Size([500, 3])



printing here the model_points: 
 tensor([[ 0.0766, -0.1222,  0.0201],
        [ 0.0645, -0.1178,  0.0230],
        [ 0.1249, -0.0745,  0.0238],
        ...,
        [-0.0117,  0.0408,  0.1451],
        [-0.0212,  0.0270,  0.1475],
        [-0.0286,  0.0405,  0.1502]])


printing here the length of model_points: 
 torch.Size([500, 3])



LONGTENSOR:  114 






LONGTENSOR: tensor([114]) 



values of bounding box:  228 308 239 399
posemat:
 [[-0.66838485  0.74315017  0.03145672 -0.02270707]
 [ 0.69168503  0.63653837 -0.34116085 -0.03885374]
 [-0.27355715 -0.2062686  -0.93947844  0.97700509]
 [ 0.          0.          0.          1.        ]]
traget_r:
 [[-0.66838485  0.74315017  0.03145672]
 [ 0.69168503  0.63653837 -0.34116085]
 [-0.27355715 -0.2062686  -0.93947844]]
target_t:
 [-0.02270707 -0.03885374  0.97700509]
length of choose here:  6434
first:  NP4
second:  4
637.6103
self.cam_fx value:  1077.2459
self.cam_fy value:  1077.2495



***********************************ITERATION MID*******************************************






***********************************ITERATION*******************************************



value of index here:

 108 


values of bounding box:  187 307 276 476
posemat:
 [[ 0.77158527 -0.63510933  0.03594874 -0.0065786 ]
 [-0.27133073 -0.37969653 -0.88442647  0.09877575]
 [ 0.57535712  0.67265644 -0.46529292  0.78867794]
 [ 0.          0.          0.          1.        ]]
traget_r:
 [[ 0.77158527 -0.63510933  0.03594874]
 [-0.27133073 -0.37969653 -0.88442647]
 [ 0.57535712  0.67265644 -0.46529292]]
target_t:
 [-0.0065786   0.09877575  0.78867794]
length of choose here:  6211
first:  NP2
second:  2
628.32147
self.cam_fx value:  1074.3439
self.cam_fy value:  1074.3447



***********************************ITERATION MID*******************************************



values of bounding box:  199 319 246 406
posemat:
 [[-0.88290943  0.46952542  0.00410158  0.02014955]
 [ 0.46953956  0.88290367  0.00370403 -0.06983589]
 [-0.00188217  0.00519617 -0.99998473  0.97290762]
 [ 0.          0.          0.          1.        ]]
traget_r:
 [[-0.88290943  0.46952542  0.00410158]
 [ 0.46953956  0.88290367  0.00370403]
 [-0.00188217  0.00519617 -0.99998473]]
target_t:
 [ 0.02014955 -0.06983589  0.97290762]
length of choose here:  5843
first:  NP5
second:  5
626.34743
self.cam_fx value:  1075.5821
self.cam_fy value:  1075.5776



***********************************ITERATION MID*******************************************





here are the MODEL POINTS: 
 [[-0.06212459  0.05808968  0.0167035 ]
 [ 0.06429764 -0.1168219   0.02257036]
 [ 0.1102313  -0.05384815  0.02746747]
 ...
 [-0.02552934  0.03909438  0.1472844 ]
 [-0.02192099  0.0339274   0.147735  ]
 [-0.01433534  0.02774042  0.1504029 ]]


printing here the cloud: 
 tensor([[-3.0062, -2.4579,  9.8250],
        [-3.1518, -2.4536,  9.8810],
        [-3.1059, -2.4536,  9.8810],
        ...,
        [-2.5590, -1.6003,  8.3890],
        [-2.5357, -1.6003,  8.3890],
        [-2.5201, -1.6003,  8.3890]])


printing here the length of cloud: 
 torch.Size([500, 3])



printing here the choose: 
 tensor([[ 1146,  1452,  1457,  1460,  1613,  1617,  1626,  1636,  1778,  1941,
          2095,  2096,  2116,  2117,  2259,  2265,  2275,  2427,  2431,  2590,
          2743,  2748,  3009,  3066,  3074,  3076,  3205,  3219,  3239,  3291,
          3297,  3317,  3329,  3331,  3332,  3376,  3391,  3433,  3457,  3461,
          3466,  3467,  3471,  3483,  3498,  3501,  3504,  3557,  3575,  3590,
          3608,  3611,  3613,  3615,  3628,  3631,  3654,  3662,  3664,  3711,
          3730,  3735,  3744,  3754,  3756,  3758,  3772,  3773,  3813,  3851,
          3882,  3889,  3924,  3935,  3956,  3957,  3967,  3986,  4008,  4027,
          4032,  4044,  4056,  4061,  4070,  4080,  4088,  4098,  4099,  4111,
          4133,  4186,  4188,  4197,  4202,  4244,  4248,  4254,  4257,  4265,
          4290,  4295,  4326,  4350,  4354,  4355,  4364,  4367,  4371,  4374,
          4382,  4398,  4400,  4402,  4414,  4435,  4447,  4454,  4507,  4547,
          4597,  4656,  4662,  4663,  4667,  4670,  4674,  4675,  4679,  4691,
          4698,  4704,  4725,  4819,  4825,  4828,  4844,  4848,  4861,  4872,
          4881,  4885,  4935,  4941,  4950,  4972,  4984,  4994,  5003,  5027,
          5046,  5063,  5070,  5078,  5088,  5101,  5108,  5129,  5131,  5132,
          5139,  5145,  5157,  5171,  5181,  5192,  5211,  5229,  5239,  5289,
          5297,  5329,  5336,  5356,  5382,  5420,  5456,  5488,  5494,  5495,
          5499,  5509,  5553,  5583,  5587,  5589,  5617,  5621,  5663,  5669,
          5679,  5680,  5718,  5722,  5728,  5745,  5749,  5771,  5777,  5779,
          5788,  5810,  5812,  5818,  5830,  5834,  5835,  5841,  5843,  5845,
          5881,  5888,  5899,  5932,  5978,  5985,  6017,  6019,  6035,  6041,
          6043,  6062,  6087,  6090,  6138,  6155,  6159,  6161,  6169,  6176,
          6177,  6183,  6198,  6199,  6215,  6217,  6230,  6283,  6286,  6294,
          6303,  6304,  6312,  6313,  6364,  6388,  6389,  6425,  6439,  6449,
          6454,  6478,  6484,  6497,  6552,  6566,  6573,  6587,  6588,  6592,
          6596,  6603,  6617,  6636,  6639,  6666,  6676,  6680,  6688,  6691,
          6696,  6743,  6765,  6766,  6778,  6805,  6816,  6817,  6822,  6826,
          6838,  6869,  6908,  6927,  6932,  6942,  6957,  6978,  7014,  7021,
          7030,  7032,  7058,  7090,  7091,  7094,  7107,  7123,  7125,  7127,
          7135,  7142,  7165,  7166,  7171,  7173,  7184,  7216,  7234,  7239,
          7262,  7284,  7288,  7295,  7324,  7339,  7346,  7371,  7376,  7393,
          7406,  7430,  7431,  7441,  7444,  7450,  7453,  7461,  7476,  7482,
          7495,  7511,  7528,  7539,  7552,  7556,  7557,  7562,  7584,  7596,
          7597,  7598,  7605,  7611,  7642,  7666,  7670,  7698,  7703,  7706,
          7716,  7718,  7770,  7782,  7790,  7792,  7804,  7811,  7812,  7814,
          7824,  7851,  7875,  7893,  7898,  7933,  7948,  7957,  7989,  8035,
          8039,  8042,  8054,  8055,  8059,  8064,  8081,  8114,  8126,  8144,
          8145,  8186,  8208,  8237,  8269,  8271,  8273,  8280,  8286,  8296,
          8336,  8348,  8350,  8375,  8432,  8443,  8463,  8465,  8503,  8514,
          8523,  8529,  8533,  8550,  8551,  8554,  8565,  8571,  8573,  8589,
          8608,  8684,  8687,  8702,  8705,  8708,  8715,  8729,  8774,  8775,
          8777,  8781,  8828,  8830,  8847,  8849,  8871,  8893,  8894,  8911,
          8933,  8944,  8982,  8994,  9002,  9025,  9031,  9034,  9039,  9044,
          9061,  9066,  9101,  9127,  9144,  9146,  9157,  9200,  9202,  9206,
          9214,  9215,  9227,  9244,  9259,  9260,  9264,  9286,  9305,  9314,
          9370,  9392,  9406,  9465,  9471,  9568,  9620,  9621,  9712,  9736,
          9767,  9793,  9798,  9875,  9876,  9877, 10044, 10054, 10087, 10101,
         10110, 10260, 10261, 10263, 10431, 10441, 10587, 10597, 10729, 10753,
         10901, 11059, 11063, 11222, 11223, 11225, 11239, 11387, 11390, 11392]])


printing here the length of choose: 
 torch.Size([1, 500])



printing here the img_masked: 
 tensor([[[ 845.0436,  845.0436,  845.0436,  ...,  814.4760,  814.4760,
           814.4760],
         [ 845.0436,  845.0436,  845.0436,  ...,  801.3755,  814.4760,
           814.4760],
         [ 845.0436,  845.0436,  845.0436,  ...,  797.0087,  810.1091,
           810.1091],
         ...,
         [ 858.1441,  858.1441,  858.1441,  ...,  779.5415,  766.4410,
           770.8079],
         [ 858.1441,  858.1441,  858.1441,  ...,  766.4410,  766.4410,
           770.8079],
         [ 858.1441,  858.1441,  858.1441,  ...,  766.4410,  766.4410,
           770.8079]],

        [[ 939.9286,  939.9286,  939.9286,  ...,  913.1429,  913.1429,
           913.1429],
         [ 939.9286,  939.9286,  939.9286,  ...,  899.7500,  913.1429,
           913.1429],
         [ 939.9286,  939.9286,  939.9286,  ...,  895.2857,  908.6786,
           908.6786],
         ...,
         [ 944.3929,  944.3929,  944.3929,  ...,  868.5000,  855.1071,
           859.5714],
         [ 944.3929,  944.3929,  944.3929,  ...,  855.1071,  855.1071,
           859.5714],
         [ 944.3929,  944.3929,  944.3929,  ...,  855.1071,  855.1071,
           859.5714]],

        [[1127.0845, 1127.0845, 1127.0845,  ..., 1131.5289, 1131.5289,
          1131.5289],
         [1127.0845, 1127.0845, 1127.0845,  ..., 1118.1956, 1131.5289,
          1131.5289],
         [1127.0845, 1127.0845, 1127.0845,  ..., 1113.7511, 1127.0845,
          1127.0845],
         ...,
         [1113.7511, 1113.7511, 1113.7511,  ..., 1127.0845, 1118.1956,
          1122.6400],
         [1113.7511, 1113.7511, 1113.7511,  ..., 1113.7511, 1118.1956,
          1122.6400],
         [1113.7511, 1113.7511, 1113.7511,  ..., 1113.7511, 1118.1956,
          1122.6400]]])


printing here the length of img_masked: 
 torch.Size([3, 80, 160])



printing here the target: 
 tensor([[-0.0928,  0.1018,  0.9063],
        [ 0.1228,  0.1124,  0.9010],
        [ 0.1028,  0.0399,  0.9220],
        ...,
        [-0.0523,  0.0416,  0.7902],
        [-0.0460,  0.0419,  0.7897],
        [-0.0363,  0.0392,  0.7881]])


printing here the length of target: 
 torch.Size([500, 3])



printing here the model_points: 
 tensor([[-0.0621,  0.0581,  0.0167],
        [ 0.0643, -0.1168,  0.0226],
        [ 0.1102, -0.0538,  0.0275],
        ...,
        [-0.0255,  0.0391,  0.1473],
        [-0.0219,  0.0339,  0.1477],
        [-0.0143,  0.0277,  0.1504]])


printing here the length of model_points: 
 torch.Size([500, 3])



LONGTENSOR:  261 






LONGTENSOR: tensor([261]) 





here are the MODEL POINTS: 
 [[ 0.06765345 -0.1194282   0.02531922]
 [ 0.1235453  -0.07024261  0.02674568]
 [ 0.1125491  -0.0557713   0.02761867]
 ...
 [-0.02193574  0.04710872  0.1451941 ]
 [-0.0149009   0.0308103   0.1456879 ]
 [-0.01318745  0.02818256  0.1490247 ]]


printing here the cloud: 
 tensor([[-3.0746, -2.6770,  9.8810],
        [-3.1020, -2.6757,  9.9100],
        [-3.2852, -2.6361,  9.7970],
        ...,
        [-1.7502, -1.6732,  8.0550],
        [-1.7427, -1.6732,  8.0550],
        [-1.7777, -1.6624,  8.1120]])


printing here the length of cloud: 
 torch.Size([500, 3])



printing here the choose: 
 tensor([[ 1060,  1258,  1434,  1633,  1645,  1646,  2042,  2225,  2260,  2446,
          2461,  2633,  2840,  3031,  3040,  3046,  3056,  3251,  3424,  3444,
          3452,  3627,  3639,  3642,  3650,  4025,  4059,  4061,  4062,  4254,
          4260,  4262,  4269,  4440,  4455,  4456,  4474,  4657,  4685,  4856,
          4874,  4909,  5046,  5049,  5058,  5064,  5068,  5107,  5244,  5246,
          5270,  5273,  5285,  5289,  5292,  5293,  5327,  5334,  5424,  5426,
          5453,  5458,  5479,  5498,  5509,  5511,  5516,  5524,  5525,  5528,
          5541,  5642,  5650,  5661,  5692,  5706,  5709,  5712,  5714,  5720,
          5728,  5743,  5745,  5836,  5877,  5890,  5895,  5901,  5903,  5914,
          5941,  5949,  5958,  6051,  6060,  6062,  6083,  6085,  6091,  6110,
          6123,  6131,  6146,  6160,  6162,  6222,  6225,  6242,  6258,  6275,
          6282,  6285,  6310,  6316,  6327,  6328,  6345,  6357,  6358,  6427,
          6462,  6490,  6508,  6518,  6537,  6542,  6626,  6627,  6658,  6659,
          6662,  6663,  6669,  6671,  6680,  6692,  6696,  6698,  6699,  6713,
          6720,  6722,  6733,  6740,  6746,  6753,  6759,  6764,  6872,  6884,
          6896,  6915,  6921,  6934,  7027,  7073,  7094,  7099,  7116,  7117,
          7125,  7140,  7155,  7157,  7166,  7167,  7172,  7258,  7261,  7266,
          7275,  7281,  7299,  7317,  7331,  7374,  7436,  7439,  7445,  7458,
          7476,  7477,  7482,  7512,  7519,  7522,  7526,  7560,  7562,  7565,
          7662,  7673,  7678,  7693,  7700,  7706,  7711,  7756,  7769,  7822,
          7826,  7841,  7842,  7859,  7861,  7864,  7877,  7885,  7927,  7950,
          7962,  7968,  7970,  7973,  8039,  8068,  8069,  8070,  8085,  8092,
          8103,  8114,  8123,  8126,  8140,  8151,  8158,  8159,  8173,  8174,
          8285,  8296,  8314,  8334,  8346,  8357,  8367,  8370,  8426,  8442,
          8474,  8509,  8563,  8567,  8578,  8644,  8670,  8681,  8692,  8703,
          8705,  8716,  8727,  8732,  8740,  8753,  8872,  8879,  8887,  8898,
          8911,  8934,  8959,  8960,  8971,  9026,  9038,  9039,  9063,  9067,
          9125,  9132,  9134,  9153,  9158,  9239,  9279,  9295,  9300,  9307,
          9311,  9354,  9377,  9438,  9444,  9467,  9469,  9503,  9508,  9515,
          9516,  9530,  9549,  9564,  9642,  9669,  9687,  9715,  9760,  9765,
          9775,  9776,  9780,  9846,  9871,  9889,  9893,  9914,  9921,  9931,
          9933,  9953, 10024, 10062, 10079, 10081, 10096, 10152, 10170, 10226,
         10239, 10251, 10253, 10265, 10272, 10276, 10324, 10328, 10338, 10347,
         10370, 10377, 10423, 10451, 10455, 10456, 10467, 10469, 10496, 10499,
         10500, 10520, 10526, 10527, 10533, 10561, 10563, 10567, 10570, 10571,
         10575, 10638, 10659, 10662, 10668, 10675, 10678, 10681, 10737, 10739,
         10746, 10756, 10763, 10774, 10776, 10835, 10838, 10849, 10850, 10869,
         10899, 10900, 10907, 10918, 10937, 10946, 10950, 10961, 10969, 10971,
         10976, 11039, 11071, 11084, 11103, 11125, 11131, 11132, 11156, 11164,
         11167, 11176, 11226, 11258, 11298, 11310, 11316, 11328, 11339, 11341,
         11344, 11346, 11352, 11361, 11439, 11476, 11481, 11502, 11514, 11521,
         11529, 11531, 11567, 11574, 11578, 11652, 11658, 11684, 11686, 11689,
         11717, 11754, 11760, 11835, 11836, 11845, 11850, 11909, 11927, 11949,
         11965, 11978, 12057, 12103, 12107, 12110, 12112, 12128, 12145, 12149,
         12177, 12243, 12244, 12250, 12321, 12325, 12328, 12332, 12353, 12444,
         12455, 12500, 12503, 12510, 12532, 12533, 12534, 12554, 12636, 12744,
         12748, 12752, 12841, 12850, 12910, 12918, 12920, 12924, 12954, 13135,
         13136, 13235, 13313, 13320, 13324, 13334, 13348, 13353, 13520, 13574,
         13726, 13741, 13750, 13925, 13935, 13943, 13951, 13955, 13961, 14128,
         14147, 14161, 14169, 14352, 14369, 14567, 14760, 14761, 14762, 15359]])


printing here the length of choose: 
 torch.Size([1, 500])



printing here the img_masked: 




out_img.size:  torch.Size([1, 32, 80, 160])
emb:::: torch.Size([1, 32, 12800])
choose.shape before:  torch.Size([1, 1, 500])
choose:  torch.Size([1, 32, 500])
emb after gather::  torch.Size([1, 32, 500])
pointcloud shape before transpose:  torch.Size([1, 500, 3])
pointcloud after transpose:  torch.Size([1, 3, 500])
PoseNetFeat: x shape after conv layer:  torch.Size([1, 64, 500])
PoseNetFeat: emb shape after conv layer:  torch.Size([1, 64, 500])
after concatenation shape of pointnet1:  torch.Size([1, 128, 500])
after concatenation shape of pointnet2:  torch.Size([1, 256, 500])
apx shape:  torch.Size([1, 1024, 1])
apx shape after change:  torch.Size([1, 1024, 500])
final shape after concat of pointnetfeat_1 & pointnetfeat_2:  torch.Size([1, 1408, 500])
rx shape after 1st iteration:  torch.Size([1, 640, 500])
rx shape after 2nd iteration:  torch.Size([1, 256, 500])
rx shape after 3rd iteration:  torch.Size([1, 128, 500])
rx after shape change:  torch.Size([1, 1, 4, 500])
out__rx shape before contiguous:  torch.Size([1, 4, 500])
out__rx shape after contiguous:  torch.Size([1, 500, 4])
out__cx shape after contiguous:  torch.Size([1, 500, 1])



***********************************ITERATION*******************************************



value of index here:

 101 


out__tx shape after contiguous:  torch.Size([1, 500, 3])


emb at the end:  torch.Size([1, 32, 500]) 

*****************ENTERING LOSS*************************


 bs & np vlaues: 1 500
***********************PRED VALUE*************** tensor([[[-0.1059,  0.1167,  0.9059],
         [ 0.1095,  0.1299,  0.9126],
         [ 0.0891,  0.0581,  0.9355],
         ...,
         [-0.0581,  0.0521,  0.7950],
         [-0.0518,  0.0525,  0.7949],
         [-0.0420,  0.0498,  0.7940]],

        [[-0.1089,  0.1010,  0.8997],
         [ 0.1064,  0.1153,  0.9072],
         [ 0.0863,  0.0435,  0.9305],
         ...,
         [-0.0603,  0.0359,  0.7894],
         [-0.0540,  0.0363,  0.7893],
         [-0.0442,  0.0337,  0.7885]],

        [[-0.1069,  0.1065,  0.9018],
         [ 0.1084,  0.1208,  0.9089],
         [ 0.0883,  0.0489,  0.9322],
         ...,
         [-0.0584,  0.0415,  0.7914],
         [-0.0521,  0.0419,  0.7913],
         [-0.0424,  0.0393,  0.7904]],

        ...,

        [[-0.0936,  0.1221,  0.8828],
         [ 0.1216,  0.1121,  0.8969],
         [ 0.0927,  0.0444,  0.9230],
         ...,
         [-0.0497,  0.0463,  0.7776],
         [-0.0434,  0.0460,  0.7777],
         [-0.0340,  0.0422,  0.7773]],

        [[-0.0935,  0.1186,  0.8829],
         [ 0.1216,  0.1087,  0.8973],
         [ 0.0927,  0.0407,  0.9227],
         ...,
         [-0.0494,  0.0438,  0.7770],
         [-0.0431,  0.0435,  0.7771],
         [-0.0337,  0.0397,  0.7767]],

        [[-0.0936,  0.1167,  0.8830],
         [ 0.1216,  0.1071,  0.8975],
         [ 0.0928,  0.0390,  0.9226],
         ...,
         [-0.0492,  0.0424,  0.7768],
         [-0.0429,  0.0421,  0.7769],
         [-0.0334,  0.0384,  0.7765]]],
       device='cuda:0', grad_fn=<ThAddBackward>)
2019-06-04 03:23:50,098 : Test time 10h 11m 50s Test Frame No.91 dis:0.02069011889398098




out_img.size:  torch.Size([1, 32, 80, 160])
emb:::: torch.Size([1, 32, 12800])
choose.shape before:  torch.Size([1, 1, 500])
choose:  torch.Size([1, 32, 500])
emb after gather::  torch.Size([1, 32, 500])
pointcloud shape before transpose:  torch.Size([1, 500, 3])
pointcloud after transpose:  torch.Size([1, 3, 500])
PoseNetFeat: x shape after conv layer:  torch.Size([1, 64, 500])
PoseNetFeat: emb shape after conv layer:  torch.Size([1, 64, 500])
after concatenation shape of pointnet1:  torch.Size([1, 128, 500])
after concatenation shape of pointnet2:  torch.Size([1, 256, 500])
apx shape:  torch.Size([1, 1024, 1])
apx shape after change:  torch.Size([1, 1024, 500])
final shape after concat of pointnetfeat_1 & pointnetfeat_2:  torch.Size([1, 1408, 500])
rx shape after 1st iteration:  torch.Size([1, 640, 500])
rx shape after 2nd iteration:  torch.Size([1, 256, 500])
rx shape after 3rd iteration:  torch.Size([1, 128, 500])
rx after shape change:  torch.Size([1, 1, 4, 500])
out__rx shape before contiguous:  torch.Size([1, 4, 500])
out__rx shape after contiguous:  torch.Size([1, 500, 4])
out__cx shape after contiguous:  torch.Size([1, 500, 1])
out__tx shape after contiguous:  torch.Size([1, 500, 3])


emb at the end:  torch.Size([1, 32, 500]) 

*****************ENTERING LOSS*************************


 bs & np vlaues: 1 500
***********************PRED VALUE*************** tensor([[[ 0.0867, -0.0226,  0.8867],
         [ 0.1025,  0.0383,  0.8549],
         [ 0.0852, -0.0243,  0.8833],
         ...,
         [-0.0675,  0.0037,  0.7267],
         [-0.0625, -0.0068,  0.7323],
         [-0.0692, -0.0013,  0.7269]],

        [[ 0.0878, -0.0233,  0.8868],
         [ 0.1034,  0.0380,  0.8557],
         [ 0.0864, -0.0251,  0.8833],
         ...,
         [-0.0661,  0.0039,  0.7266],
         [-0.0610, -0.0066,  0.7321],
         [-0.0677, -0.0010,  0.7267]],

        [[ 0.0874, -0.0212,  0.8876],
         [ 0.1033,  0.0401,  0.8566],
         [ 0.0860, -0.0229,  0.8841],
         ...,
         [-0.0655,  0.0064,  0.7265],
         [-0.0606, -0.0040,  0.7321],
         [-0.0672,  0.0015,  0.7267]],

        ...,

        [[ 0.0741, -0.0065,  0.8751],
         [ 0.0944,  0.0444,  0.8307],
         [ 0.0723, -0.0087,  0.8721],
         ...,
         [-0.0840,  0.0020,  0.7169],
         [-0.0798, -0.0075,  0.7245],
         [-0.0861, -0.0026,  0.7183]],

        [[ 0.0709, -0.0087,  0.8741],
         [ 0.0914,  0.0427,  0.8305],
         [ 0.0691, -0.0109,  0.8712],
         ...,
         [-0.0866,  0.0021,  0.7155],
         [-0.0825, -0.0075,  0.7230],
         [-0.0888, -0.0025,  0.7168]],

        [[ 0.0737, -0.0086,  0.8751],
         [ 0.0942,  0.0428,  0.8315],
         [ 0.0719, -0.0109,  0.8721],
         ...,
         [-0.0838,  0.0024,  0.7165],
         [-0.0797, -0.0072,  0.7239],
         [-0.0860, -0.0022,  0.7177]]],
       device='cuda:0', grad_fn=<ThAddBackward>)
 tensor([[[ 823.2096,  836.3101,  836.3101,  ...,  762.0742,  757.7074,
           753.3406],
         [ 823.2096,  836.3101,  836.3101,  ...,  766.4410,  762.0742,
           762.0742],
         [ 823.2096,  836.3101,  836.3101,  ...,  775.1747,  770.8079,
           770.8079],
         ...,
         [ 827.5764,  827.5764,  827.5764,  ...,  775.1747,  766.4410,
           762.0742],
         [ 827.5764,  827.5764,  827.5764,  ...,  770.8079,  762.0742,
           762.0742],
         [ 827.5764,  827.5764,  827.5764,  ...,  766.4410,  762.0742,
           757.7074]],

        [[ 922.0714,  935.4643,  935.4643,  ...,  850.6429,  846.1786,
           841.7143],
         [ 922.0714,  935.4643,  935.4643,  ...,  855.1071,  850.6429,
           850.6429],
         [ 922.0714,  935.4643,  935.4643,  ...,  864.0357,  859.5714,
           859.5714],
         ...,
         [ 931.0000,  931.0000,  931.0000,  ...,  864.0357,  855.1071,
           850.6429],
         [ 931.0000,  931.0000,  931.0000,  ...,  859.5714,  850.6429,
           850.6429],
         [ 931.0000,  931.0000,  931.0000,  ...,  855.1071,  850.6429,
           846.1786]],

        [[1122.6400, 1131.5289, 1131.5289,  ..., 1109.3066, 1109.3066,
          1104.8622],
         [1122.6400, 1131.5289, 1131.5289,  ..., 1113.7511, 1113.7511,
          1113.7511],
         [1122.6400, 1131.5289, 1131.5289,  ..., 1122.6400, 1118.1956,
          1122.6400],
         ...,
         [1118.1956, 1118.1956, 1118.1956,  ..., 1122.6400, 1113.7511,
          1109.3066],
         [1118.1956, 1118.1956, 1118.1956,  ..., 1118.1956, 1109.3066,
          1109.3066],
         [1118.1956, 1118.1956, 1118.1956,  ..., 1113.7511, 1109.3066,
          1104.8622]]])
2019-06-04 03:23:50,125 : Test time 10h 11m 50s Test Frame No.92 dis:0.013572867028415203


printing here the length of img_masked: 
 torch.Size([3, 80, 200])



printing here the target: 
 tensor([[ 0.0713,  0.0799,  0.8180],
        [ 0.0731,  0.0208,  0.8633],
        [ 0.0551,  0.0183,  0.8629],
        ...,
        [-0.1052, -0.0374,  0.7459],
        [-0.0885, -0.0326,  0.7425],
        [-0.0852, -0.0341,  0.7397]])


printing here the length of target: 
 torch.Size([500, 3])



printing here the model_points: 
 tensor([[ 0.0677, -0.1194,  0.0253],
        [ 0.1235, -0.0702,  0.0267],
        [ 0.1125, -0.0558,  0.0276],
        ...,
        [-0.0219,  0.0471,  0.1452],
        [-0.0149,  0.0308,  0.1457],
        [-0.0132,  0.0282,  0.1490]])


printing here the length of model_points: 
 torch.Size([500, 3])



LONGTENSOR:  267 






LONGTENSOR: tensor([267]) 






***********************************ITERATION*******************************************



value of index here:

 110 




here are the MODEL POINTS: 
 [[-0.0618537   0.05708092  0.0162698 ]
 [-0.03910663  0.07582188  0.02511959]
 [-0.04640085  0.06485059  0.03122449]
 ...
 [-0.02366214  0.03343061  0.1475984 ]
 [-0.01699028  0.0306982   0.1495722 ]
 [-0.0253459   0.03510811  0.1522301 ]]


printing here the cloud: 
 tensor([[-2.9878, -2.8539, 10.0840],
        [-2.9602, -2.8454, 10.0540],
        [-2.9602, -2.8267, 10.0540],
        ...,
        [-2.1114, -1.1363,  7.4780],
        [-1.9619, -1.1146,  7.3350],
        [-2.4230, -1.2315,  8.3080]])


printing here the length of cloud: 
 torch.Size([500, 3])



printing here the choose: 
 tensor([[ 1252,  1254,  1494,  1984,  1997,  2108,  2231,  2305,  2328,  2329,
          2346,  2354,  2423,  2428,  2466,  2548,  2554,  2567,  2582,  2583,
          2591,  2593,  2712,  2716,  2780,  2797,  2798,  2802,  2806,  2816,
          2823,  2830,  2959,  3046,  3064,  3071,  3077,  3084,  3141,  3185,
          3186,  3257,  3291,  3295,  3300,  3304,  3326,  3380,  3440,  3512,
          3514,  3520,  3528,  3541,  3559,  3618,  3631,  3644,  3658,  3759,
          3760,  3767,  3777,  3778,  3780,  3789,  3799,  3885,  3890,  3891,
          3903,  3906,  3914,  3930,  3992,  3993,  3994,  3997,  4023,  4035,
          4037,  4098,  4112,  4131,  4138,  4148,  4158,  4166,  4234,  4239,
          4257,  4278,  4282,  4337,  4338,  4345,  4354,  4385,  4391,  4403,
          4408,  4410,  4473,  4484,  4489,  4491,  4503,  4511,  4521,  4589,
          4598,  4599,  4611,  4627,  4640,  4696,  4701,  4703,  4709,  4715,
          4720,  4728,  4755,  4824,  4833,  4839,  4854,  4863,  4888,  4939,
          4954,  4958,  4975,  4978,  4984,  5063,  5074,  5075,  5078,  5087,
          5121,  5181,  5192,  5207,  5215,  5302,  5316,  5334,  5339,  5342,
          5347,  5348,  5419,  5431,  5433,  5434,  5444,  5447,  5454,  5461,
          5464,  5560,  5582,  5586,  5682,  5705,  5710,  5715,  5817,  5942,
          6050,  6069,  6074,  6075,  6166,  6174,  6176,  6177,  6191,  6195,
          6197,  6282,  6293,  6300,  6316,  6405,  6423,  6428,  6433,  6435,
          6523,  6531,  6533,  6537,  6550,  6556,  6646,  6648,  6669,  6767,
          6901,  6919,  7017,  7128,  7254,  7258,  7259,  7260,  7269,  7280,
          7494,  7520,  7743,  7748,  7750,  7844,  7984,  7989,  7992,  7996,
          8002,  8098,  8221,  8225,  8232,  8451,  8468,  8480,  8567,  8589,
          8598,  8602,  8686,  8710,  8719,  8720,  8806,  8812,  8821,  8827,
          8829,  8836,  8926,  8927,  8958,  9057,  9062,  9074,  9075,  9184,
          9298,  9303,  9402,  9418,  9435,  9530,  9647,  9648,  9651,  9658,
          9762,  9769,  9798,  9801,  9882,  9903,  9910,  9914,  9918, 10021,
         10022, 10034, 10128, 10141, 10160, 10163, 10249, 10268, 10279, 10284,
         10363, 10368, 10388, 10398, 10406, 10514, 10520, 10640, 10726, 10730,
         10745, 10754, 10850, 10869, 10872, 10875, 10965, 10986, 11005, 11009,
         11106, 11107, 11111, 11113, 11209, 11227, 11244, 11342, 11354, 11359,
         11369, 11446, 11448, 11466, 11568, 11582, 11585, 11608, 11610, 11611,
         11703, 11716, 11940, 11947, 11951, 12064, 12078, 12164, 12170, 12171,
         12183, 12187, 12189, 12191, 12212, 12322, 12331, 12415, 12424, 12444,
         12527, 12543, 12572, 12648, 12667, 12670, 12806, 12808, 12885, 12890,
         12931, 13043, 13135, 13158, 13249, 13251, 13253, 13277, 13282, 13290,
         13368, 13379, 13382, 13515, 13518, 13522, 13615, 13625, 13637, 13646,
         13727, 13728, 13735, 13743, 13746, 13753, 13766, 13870, 13871, 13877,
         13884, 13885, 13892, 13999, 14094, 14103, 14107, 14118, 14120, 14127,
         14135, 14247, 14257, 14330, 14331, 14345, 14473, 14479, 14497, 14604,
         14616, 14690, 14693, 14704, 14727, 14730, 14807, 14812, 14839, 14846,
         14860, 14929, 14949, 14958, 14971, 14973, 14978, 15049, 15054, 15063,
         15076, 15089, 15093, 15190, 15201, 15219, 15304, 15305, 15307, 15309,
         15319, 15334, 15427, 15434, 15439, 15448, 15527, 15533, 15537, 15579,
         15670, 15672, 15678, 15686, 15696, 15698, 15777, 15793, 15794, 15798,
         15810, 15817, 15925, 15940, 16007, 16039, 16041, 16154, 16162, 16179,
         16275, 16279, 16280, 16374, 16377, 16405, 16510, 16518, 16519, 16728,
         16733, 16868, 16901, 16969, 16990, 16993, 17093, 17113, 17117, 17140,
         17211, 17214, 17331, 17333, 17347, 17365, 17368, 17382, 17475, 17484,
         17601, 17692, 17834, 17851, 17955, 18077, 18082, 18187, 18203, 18657]])


printing here the length of choose: 
 torch.Size([1, 500])



printing here the img_masked: 
values of bounding box:  229 309 239 399
posemat:
 [[-0.70767038  0.70584746  0.03133684 -0.01877224]
 [ 0.65628159  0.67311131 -0.34090415 -0.0389683 ]
 [-0.26171951 -0.22068198 -0.93957563  0.97715734]
 [ 0.          0.          0.          1.        ]]
traget_r:
 [[-0.70767038  0.70584746  0.03133684]
 [ 0.65628159  0.67311131 -0.34090415]
 [-0.26171951 -0.22068198 -0.93957563]]
target_t:
 [-0.01877224 -0.0389683   0.97715734]
length of choose here:  6518
first:  NP4
second:  4
637.6103
self.cam_fx value:  1077.2459
self.cam_fy value:  1077.2495



***********************************ITERATION MID*******************************************



values of bounding box:  186 266 244 404
posemat:
 [[ 0.59996815 -0.79825208  0.05321498 -0.05631342]
 [-0.60643394 -0.49716484 -0.62053605  0.06642496]
 [ 0.52180081  0.3400305  -0.78237023  0.85245197]
 [ 0.          0.          0.          1.        ]]
traget_r:
 [[ 0.59996815 -0.79825208  0.05321498]
 [-0.60643394 -0.49716484 -0.62053605]
 [ 0.52180081  0.3400305  -0.78237023]]
target_t:
 [-0.05631342  0.06642496  0.85245197]
length of choose here:  6741
first:  NP3
second:  3
618.76531
self.cam_fx value:  1075.8584
self.cam_fy value:  1075.8538



***********************************ITERATION MID*******************************************



 tensor([[[ 818.8428,  827.5764,  831.9432,  ...,  831.9432,  827.5764,
           827.5764],
         [ 823.2096,  827.5764,  831.9432,  ...,  827.5764,  827.5764,
           823.2096],
         [ 823.2096,  827.5764,  836.3101,  ...,  827.5764,  827.5764,
           827.5764],
         ...,
         [ 805.7424,  805.7424,  805.7424,  ...,  779.5415,  779.5415,
           779.5415],
         [ 810.1091,  814.4760,  814.4760,  ...,  775.1747,  775.1747,
           779.5415],
         [ 814.4760,  814.4760,  814.4760,  ...,  775.1747,  775.1747,
           775.1747]],

        [[ 917.6071,  926.5357,  931.0000,  ...,  935.4643,  931.0000,
           931.0000],
         [ 922.0714,  926.5357,  931.0000,  ...,  931.0000,  931.0000,
           926.5357],
         [ 922.0714,  926.5357,  935.4643,  ...,  931.0000,  931.0000,
           931.0000],
         ...,
         [ 895.2857,  895.2857,  895.2857,  ...,  868.5000,  868.5000,
           868.5000],
         [ 899.7500,  904.2143,  904.2143,  ...,  864.0357,  864.0357,
           868.5000],
         [ 904.2143,  904.2143,  904.2143,  ...,  864.0357,  864.0357,
           864.0357]],

        [[1118.1956, 1127.0845, 1131.5289,  ..., 1122.6400, 1118.1956,
          1118.1956],
         [1122.6400, 1127.0845, 1131.5289,  ..., 1118.1956, 1118.1956,
          1113.7511],
         [1122.6400, 1127.0845, 1131.5289,  ..., 1118.1956, 1118.1956,
          1118.1956],
         ...,
         [1118.1956, 1118.1956, 1118.1956,  ..., 1127.0845, 1127.0845,
          1127.0845],
         [1122.6400, 1127.0845, 1127.0845,  ..., 1122.6400, 1122.6400,
          1127.0845],
         [1127.0845, 1127.0845, 1127.0845,  ..., 1122.6400, 1122.6400,
          1122.6400]]])


printing here the length of img_masked: 
 torch.Size([3, 160, 120])



printing here the target: 
 tensor([[-0.1608, -0.0519,  0.9179],
        [-0.1312, -0.0599,  0.9152],
        [-0.1427, -0.0596,  0.9063],
        ...,
        [-0.1322, -0.1019,  0.7916],
        [-0.1277, -0.0984,  0.7867],
        [-0.1325, -0.1066,  0.7894]])


printing here the length of target: 
 torch.Size([500, 3])



printing here the model_points: 
 tensor([[-0.0619,  0.0571,  0.0163],
        [-0.0391,  0.0758,  0.0251],
        [-0.0464,  0.0649,  0.0312],
        ...,
        [-0.0237,  0.0334,  0.1476],
        [-0.0170,  0.0307,  0.1496],
        [-0.0253,  0.0351,  0.1522]])


printing here the length of model_points: 
 torch.Size([500, 3])



LONGTENSOR:  345 






LONGTENSOR: tensor([345]) 







out_img.size:  torch.Size([1, 32, 160, 120])
emb:::: torch.Size([1, 32, 19200])
choose.shape before:  torch.Size([1, 1, 500])
choose:  torch.Size([1, 32, 500])
emb after gather::  torch.Size([1, 32, 500])
pointcloud shape before transpose:  torch.Size([1, 500, 3])
pointcloud after transpose:  torch.Size([1, 3, 500])
PoseNetFeat: x shape after conv layer:  torch.Size([1, 64, 500])
PoseNetFeat: emb shape after conv layer:  torch.Size([1, 64, 500])
after concatenation shape of pointnet1:  torch.Size([1, 128, 500])
after concatenation shape of pointnet2:  torch.Size([1, 256, 500])
apx shape:  torch.Size([1, 1024, 1])



***********************************ITERATION*******************************************



value of index here:

 103 


apx shape after change:  torch.Size([1, 1024, 500])
final shape after concat of pointnetfeat_1 & pointnetfeat_2:  torch.Size([1, 1408, 500])
rx shape after 1st iteration:  torch.Size([1, 640, 500])
rx shape after 2nd iteration:  torch.Size([1, 256, 500])
rx shape after 3rd iteration:  torch.Size([1, 128, 500])
rx after shape change:  torch.Size([1, 1, 4, 500])
out__rx shape before contiguous:  torch.Size([1, 4, 500])
out__rx shape after contiguous:  torch.Size([1, 500, 4])
out__cx shape after contiguous:  torch.Size([1, 500, 1])
out__tx shape after contiguous:  torch.Size([1, 500, 3])


emb at the end:  torch.Size([1, 32, 500]) 

*****************ENTERING LOSS*************************


 bs & np vlaues: 1 500
***********************PRED VALUE*************** tensor([[[-0.1825, -0.0733,  0.9234],
         [-0.1534, -0.0827,  0.9203],
         [-0.1643, -0.0799,  0.9112],
         ...,
         [-0.1504, -0.0995,  0.7909],
         [-0.1454, -0.0955,  0.7869],
         [-0.1508, -0.1037,  0.7878]],

        [[-0.1817, -0.0701,  0.9241],
         [-0.1526, -0.0794,  0.9211],
         [-0.1635, -0.0767,  0.9120],
         ...,
         [-0.1495, -0.0971,  0.7918],
         [-0.1446, -0.0932,  0.7878],
         [-0.1500, -0.1013,  0.7887]],

        [[-0.1812, -0.0688,  0.9247],
         [-0.1520, -0.0781,  0.9217],
         [-0.1629, -0.0753,  0.9125],
         ...,
         [-0.1488, -0.0952,  0.7923],
         [-0.1439, -0.0912,  0.7883],
         [-0.1493, -0.0993,  0.7892]],

        ...,

        [[-0.1622, -0.0636,  0.9276],
         [-0.1326, -0.0702,  0.9223],
         [-0.1447, -0.0700,  0.9143],
         ...,
         [-0.1409, -0.1056,  0.7970],
         [-0.1370, -0.1017,  0.7919],
         [-0.1412, -0.1102,  0.7945]],

        [[-0.1755, -0.0760,  0.9177],
         [-0.1458, -0.0834,  0.9140],
         [-0.1573, -0.0822,  0.9052],
         ...,
         [-0.1467, -0.1106,  0.7863],
         [-0.1423, -0.1066,  0.7819],
         [-0.1470, -0.1150,  0.7836]],

        [[-0.1674, -0.0415,  0.9318],
         [-0.1379, -0.0483,  0.9262],
         [-0.1500, -0.0477,  0.9182],
         ...,
         [-0.1478, -0.0804,  0.8000],
         [-0.1438, -0.0765,  0.7951],
         [-0.1482, -0.0849,  0.7975]]],
       device='cuda:0', grad_fn=<ThAddBackward>)
2019-06-04 03:23:50,464 : Test time 10h 11m 50s Test Frame No.93 dis:0.011807208880782127




out_img.size:  torch.Size([1, 32, 120, 120])
emb:::: torch.Size([1, 32, 14400])
choose.shape before:  torch.Size([1, 1, 500])
choose:  torch.Size([1, 32, 500])
emb after gather::  torch.Size([1, 32, 500])
pointcloud shape before transpose:  torch.Size([1, 500, 3])
pointcloud after transpose:  torch.Size([1, 3, 500])
PoseNetFeat: x shape after conv layer:  torch.Size([1, 64, 500])
PoseNetFeat: emb shape after conv layer:  torch.Size([1, 64, 500])
after concatenation shape of pointnet1:  torch.Size([1, 128, 500])
after concatenation shape of pointnet2:  torch.Size([1, 256, 500])
apx shape:  torch.Size([1, 1024, 1])
apx shape after change:  torch.Size([1, 1024, 500])
final shape after concat of pointnetfeat_1 & pointnetfeat_2:  torch.Size([1, 1408, 500])
rx shape after 1st iteration:  torch.Size([1, 640, 500])
rx shape after 2nd iteration:  torch.Size([1, 256, 500])
rx shape after 3rd iteration:  torch.Size([1, 128, 500])
rx after shape change:  torch.Size([1, 1, 4, 500])
out__rx shape before contiguous:  torch.Size([1, 4, 500])
out__rx shape after contiguous:  torch.Size([1, 500, 4])
out__cx shape after contiguous:  torch.Size([1, 500, 1])
out__tx shape after contiguous:  torch.Size([1, 500, 3])


emb at the end:  torch.Size([1, 32, 500]) 

*****************ENTERING LOSS*************************


 bs & np vlaues: 1 500
***********************PRED VALUE*************** tensor([[[0.0501, 0.1546, 0.6737],
         [0.1397, 0.1391, 0.8876],
         [0.0858, 0.1523, 0.6666],
         ...,
         [0.0878, 0.0259, 0.7042],
         [0.0918, 0.0279, 0.6877],
         [0.0937, 0.0226, 0.7011]],

        [[0.0480, 0.1411, 0.6667],
         [0.1325, 0.1288, 0.8829],
         [0.0839, 0.1393, 0.6605],
         ...,
         [0.0866, 0.0133, 0.6993],
         [0.0910, 0.0152, 0.6829],
         [0.0926, 0.0100, 0.6964]],

        [[0.0507, 0.1524, 0.6701],
         [0.1388, 0.1396, 0.8849],
         [0.0865, 0.1503, 0.6634],
         ...,
         [0.0890, 0.0243, 0.7022],
         [0.0931, 0.0262, 0.6857],
         [0.0950, 0.0210, 0.6992]],

        ...,

        [[0.0645, 0.1339, 0.6826],
         [0.1369, 0.1188, 0.9030],
         [0.1007, 0.1307, 0.6784],
         ...,
         [0.0969, 0.0048, 0.7172],
         [0.1022, 0.0065, 0.7010],
         [0.1030, 0.0012, 0.7146]],

        [[0.0657, 0.1336, 0.6836],
         [0.1370, 0.1178, 0.9043],
         [0.1019, 0.1304, 0.6795],
         ...,
         [0.0979, 0.0043, 0.7179],
         [0.1033, 0.0061, 0.7018],
         [0.1039, 0.0008, 0.7154]],

        [[0.0673, 0.1331, 0.6848],
         [0.1365, 0.1164, 0.9061],
         [0.1035, 0.1300, 0.6811],
         ...,
         [0.0991, 0.0037, 0.7189],
         [0.1046, 0.0056, 0.7028],
         [0.1052, 0.0002, 0.7164]]], device='cuda:0', grad_fn=<ThAddBackward>)
2019-06-04 03:23:50,509 : Test time 10h 11m 50s Test Frame No.94 dis:0.023844096809625626




out_img.size:  torch.Size([1, 32, 120, 200])
emb:::: torch.Size([1, 32, 24000])
choose.shape before:  torch.Size([1, 1, 500])
choose:  torch.Size([1, 32, 500])
emb after gather::  torch.Size([1, 32, 500])
pointcloud shape before transpose:  torch.Size([1, 500, 3])
pointcloud after transpose:  torch.Size([1, 3, 500])
PoseNetFeat: x shape after conv layer:  torch.Size([1, 64, 500])
PoseNetFeat: emb shape after conv layer:  torch.Size([1, 64, 500])
after concatenation shape of pointnet1:  torch.Size([1, 128, 500])
after concatenation shape of pointnet2:  torch.Size([1, 256, 500])
apx shape:  torch.Size([1, 1024, 1])
apx shape after change:  torch.Size([1, 1024, 500])
final shape after concat of pointnetfeat_1 & pointnetfeat_2:  torch.Size([1, 1408, 500])
rx shape after 1st iteration:  torch.Size([1, 640, 500])
rx shape after 2nd iteration:  torch.Size([1, 256, 500])
rx shape after 3rd iteration:  torch.Size([1, 128, 500])
rx after shape change:  torch.Size([1, 1, 4, 500])
out__rx shape before contiguous:  torch.Size([1, 4, 500])
out__rx shape after contiguous:  torch.Size([1, 500, 4])
out__cx shape after contiguous:  torch.Size([1, 500, 1])
out__tx shape after contiguous:  torch.Size([1, 500, 3])


emb at the end:  torch.Size([1, 32, 500]) 

*****************ENTERING LOSS*************************


 bs & np vlaues: 1 500
***********************PRED VALUE*************** tensor([[[-0.1615,  0.0191,  0.8628],
         [ 0.0442,  0.1044,  0.8181],
         [ 0.0276,  0.1009,  0.8104],
         ...,
         [-0.1182, -0.0290,  0.7443],
         [-0.1145, -0.0229,  0.7399],
         [-0.1070, -0.0339,  0.7450]],

        [[-0.1509,  0.0196,  0.8679],
         [ 0.0543,  0.1065,  0.8235],
         [ 0.0376,  0.1031,  0.8159],
         ...,
         [-0.1083, -0.0258,  0.7480],
         [-0.1046, -0.0196,  0.7437],
         [-0.0970, -0.0307,  0.7486]],

        [[-0.1687,  0.0137,  0.8572],
         [ 0.0381,  0.0967,  0.8129],
         [ 0.0215,  0.0933,  0.8052],
         ...,
         [-0.1247, -0.0365,  0.7398],
         [-0.1210, -0.0305,  0.7353],
         [-0.1136, -0.0415,  0.7406]],

        ...,

        [[-0.1454,  0.0318,  0.8655],
         [ 0.0615,  0.1143,  0.8207],
         [ 0.0448,  0.1111,  0.8131],
         ...,
         [-0.1030, -0.0165,  0.7468],
         [-0.0992, -0.0105,  0.7424],
         [-0.0919, -0.0216,  0.7475]],

        [[-0.1453,  0.0293,  0.8651],
         [ 0.0610,  0.1129,  0.8200],
         [ 0.0443,  0.1097,  0.8124],
         ...,
         [-0.1030, -0.0184,  0.7461],
         [-0.0993, -0.0123,  0.7416],
         [-0.0918, -0.0234,  0.7467]],

        [[-0.1449,  0.0332,  0.8661],
         [ 0.0622,  0.1155,  0.8216],
         [ 0.0455,  0.1123,  0.8140],
         ...,
         [-0.1024, -0.0150,  0.7473],
         [-0.0986, -0.0090,  0.7429],
         [-0.0912, -0.0201,  0.7480]]],
       device='cuda:0', grad_fn=<ThAddBackward>)
2019-06-04 03:23:50,562 : Test time 10h 11m 50s Test Frame No.95 dis:0.011546795256435871




out_img.size:  torch.Size([1, 32, 120, 200])
emb:::: torch.Size([1, 32, 24000])
choose.shape before:  torch.Size([1, 1, 500])
choose:  torch.Size([1, 32, 500])
emb after gather::  torch.Size([1, 32, 500])
pointcloud shape before transpose:  torch.Size([1, 500, 3])
pointcloud after transpose:  torch.Size([1, 3, 500])
PoseNetFeat: x shape after conv layer:  torch.Size([1, 64, 500])
PoseNetFeat: emb shape after conv layer:  torch.Size([1, 64, 500])
after concatenation shape of pointnet1:  torch.Size([1, 128, 500])
after concatenation shape of pointnet2:  torch.Size([1, 256, 500])
apx shape:  torch.Size([1, 1024, 1])
apx shape after change:  torch.Size([1, 1024, 500])
final shape after concat of pointnetfeat_1 & pointnetfeat_2:  torch.Size([1, 1408, 500])
rx shape after 1st iteration:  torch.Size([1, 640, 500])
rx shape after 2nd iteration:  torch.Size([1, 256, 500])
rx shape after 3rd iteration:  torch.Size([1, 128, 500])
rx after shape change:  torch.Size([1, 1, 4, 500])
out__rx shape before contiguous:  torch.Size([1, 4, 500])
out__rx shape after contiguous:  torch.Size([1, 500, 4])
out__cx shape after contiguous:  torch.Size([1, 500, 1])
out__tx shape after contiguous:  torch.Size([1, 500, 3])


emb at the end:  torch.Size([1, 32, 500]) 

*****************ENTERING LOSS*************************


 bs & np vlaues: 1 500
***********************PRED VALUE*************** tensor([[[-0.0619,  0.0921,  0.7597],
         [ 0.1566,  0.0858,  0.7793],
         [ 0.1493,  0.0891,  0.7744],
         ...,
         [-0.0240, -0.0142,  0.6974],
         [-0.0019, -0.0163,  0.6985],
         [-0.0134, -0.0200,  0.7012]],

        [[-0.0611,  0.0941,  0.7603],
         [ 0.1573,  0.0875,  0.7805],
         [ 0.1501,  0.0907,  0.7755],
         ...,
         [-0.0233, -0.0128,  0.6989],
         [-0.0012, -0.0150,  0.7001],
         [-0.0127, -0.0186,  0.7028]],

        [[-0.0611,  0.0939,  0.7603],
         [ 0.1573,  0.0872,  0.7804],
         [ 0.1500,  0.0905,  0.7755],
         ...,
         [-0.0233, -0.0129,  0.6987],
         [-0.0013, -0.0150,  0.6998],
         [-0.0128, -0.0187,  0.7025]],

        ...,

        [[-0.0481,  0.0947,  0.7771],
         [ 0.1697,  0.0899,  0.8034],
         [ 0.1626,  0.0933,  0.7984],
         ...,
         [-0.0070, -0.0088,  0.7121],
         [ 0.0150, -0.0107,  0.7138],
         [ 0.0035, -0.0147,  0.7159]],

        [[-0.0652,  0.1021,  0.7641],
         [ 0.1519,  0.0873,  0.7925],
         [ 0.1449,  0.0908,  0.7873],
         ...,
         [-0.0290, -0.0059,  0.7035],
         [-0.0071, -0.0088,  0.7055],
         [-0.0189, -0.0120,  0.7077]],

        [[-0.0726,  0.0922,  0.7477],
         [ 0.1436,  0.0759,  0.7820],
         [ 0.1368,  0.0792,  0.7764],
         ...,
         [-0.0369, -0.0200,  0.6949],
         [-0.0151, -0.0231,  0.6976],
         [-0.0269, -0.0260,  0.6997]]],
       device='cuda:0', grad_fn=<ThAddBackward>)
2019-06-04 03:23:50,609 : Test time 10h 11m 50s Test Frame No.96 dis:0.017650047317147255
values of bounding box:  193 353 307 387
posemat:
 [[ 0.85263227  0.52251027  0.00111109 -0.07039926]
 [ 0.52250806 -0.85261716 -0.00541338  0.01810285]
 [-0.00188121  0.00519618 -0.99998473  0.97290751]
 [ 0.          0.          0.          1.        ]]
traget_r:
 [[ 0.85263227  0.52251027  0.00111109]
 [ 0.52250806 -0.85261716 -0.00541338]
 [-0.00188121  0.00519618 -0.99998473]]
target_t:
 [-0.07039926  0.01810285  0.97290751]
length of choose here:  5790
first:  NP5
second:  5
626.34743
self.cam_fx value:  1075.5821
self.cam_fy value:  1075.5776



***********************************ITERATION MID*******************************************





here are the MODEL POINTS: 
 [[ 0.06902314 -0.1225777   0.02539159]
 [-0.03850276  0.07837324  0.02506572]
 [-0.0623255   0.05606335  0.02682905]
 ...
 [-0.02254933  0.03336316  0.1457293 ]
 [-0.01364827  0.02571977  0.147599  ]
 [-0.02195224  0.04155771  0.1493622 ]]


printing here the cloud: 
 tensor([[-1.7739, -1.7377,  7.1520],
        [-1.7673, -1.7377,  7.1520],
        [-1.7541, -1.7377,  7.1520],
        ...,
        [-0.9167, -1.0709,  6.7860],
        [-0.9086, -1.0687,  6.7720],
        [-0.8943, -1.0666,  6.7590]])


printing here the length of cloud: 
 torch.Size([500, 3])



printing here the choose: 
 tensor([[ 3249,  3250,  3252,  3645,  3647,  3851,  4054,  4248,  4449,  4451,
          5050,  8841,  8851,  9650,  9841,  9843, 10042, 10047, 10052, 10056,
         10244, 10245, 10257, 10460, 10464, 10471, 10475, 10650, 10654, 10656,
         10658, 10661, 10668, 10839, 10851, 10855, 10860, 10865, 10872, 10883,
         11033, 11035, 11048, 11050, 11234, 11245, 11432, 11437, 11448, 11455,
         11456, 11477, 11639, 11647, 11652, 11667, 11679, 11680, 11687, 11699,
         11710, 11845, 11848, 11862, 11863, 11884, 11902, 11906, 12032, 12048,
         12073, 12081, 12083, 12093, 12099, 12104, 12283, 12288, 12293, 12298,
         12312, 12455, 12465, 12473, 12492, 12506, 12510, 12511, 12517, 12521,
         12635, 12640, 12657, 12659, 12667, 12681, 12691, 12697, 12827, 12856,
         12921, 12926, 12927, 12932, 13028, 13031, 13038, 13040, 13047, 13051,
         13067, 13118, 13126, 13139, 13224, 13235, 13242, 13250, 13254, 13292,
         13297, 13303, 13310, 13325, 13424, 13436, 13451, 13465, 13472, 13481,
         13488, 13501, 13502, 13508, 13509, 13532, 13538, 13546, 13552, 13645,
         13652, 13655, 13663, 13671, 13675, 13688, 13693, 13711, 13747, 13833,
         13841, 13843, 13846, 13873, 13882, 13895, 13899, 13905, 13924, 13945,
         13952, 13974, 14029, 14040, 14050, 14055, 14060, 14081, 14102, 14103,
         14120, 14134, 14163, 14236, 14262, 14267, 14268, 14272, 14281, 14319,
         14327, 14343, 14346, 14348, 14363, 14367, 14437, 14459, 14465, 14474,
         14475, 14507, 14511, 14514, 14529, 14533, 14548, 14550, 14558, 14580,
         14584, 14590, 14645, 14649, 14650, 14655, 14657, 14659, 14674, 14691,
         14695, 14704, 14723, 14764, 14770, 14841, 14843, 14858, 14866, 14881,
         14894, 14897, 14939, 14955, 14958, 14960, 14966, 14973, 14974, 14980,
         15039, 15040, 15053, 15055, 15068, 15084, 15105, 15108, 15122, 15123,
         15129, 15130, 15173, 15179, 15188, 15247, 15248, 15267, 15280, 15288,
         15293, 15316, 15320, 15332, 15348, 15381, 15383, 15386, 15449, 15450,
         15454, 15458, 15464, 15476, 15492, 15494, 15518, 15528, 15532, 15538,
         15541, 15545, 15576, 15649, 15650, 15662, 15688, 15698, 15699, 15704,
         15708, 15718, 15742, 15768, 15782, 15787, 15877, 15909, 15915, 15922,
         15924, 15936, 15965, 15966, 15969, 15979, 15994, 16016, 16018, 16059,
         16066, 16085, 16086, 16091, 16093, 16104, 16119, 16134, 16138, 16160,
         16178, 16182, 16188, 16271, 16284, 16291, 16308, 16313, 16337, 16338,
         16363, 16366, 16464, 16466, 16469, 16489, 16494, 16509, 16518, 16529,
         16535, 16555, 16559, 16571, 16572, 16594, 16685, 16689, 16694, 16708,
         16710, 16713, 16723, 16727, 16731, 16734, 16742, 16745, 16751, 16760,
         16769, 16875, 16901, 16904, 16905, 16917, 16927, 16973, 16982, 17016,
         17076, 17090, 17095, 17097, 17107, 17109, 17155, 17165, 17173, 17175,
         17187, 17193, 17194, 17215, 17284, 17295, 17314, 17331, 17336, 17370,
         17383, 17391, 17501, 17529, 17533, 17536, 17548, 17549, 17553, 17558,
         17573, 17688, 17700, 17717, 17718, 17739, 17759, 17788, 17908, 17910,
         17911, 17918, 17924, 17934, 17953, 17965, 17967, 17991, 18146, 18162,
         18182, 18184, 18304, 18314, 18322, 18327, 18330, 18349, 18350, 18353,
         18367, 18373, 18375, 18389, 18518, 18566, 18574, 18577, 18590, 18593,
         18610, 18715, 18728, 18775, 18776, 18778, 18782, 18925, 18927, 18944,
         18946, 18973, 19007, 19008, 19136, 19157, 19168, 19184, 19209, 19334,
         19339, 19344, 19347, 19352, 19357, 19374, 19379, 19541, 19548, 19559,
         19561, 19572, 19586, 19588, 19591, 19739, 19740, 19752, 19769, 19784,
         19785, 19789, 19792, 19949, 19958, 19971, 19991, 20151, 20182, 20188,
         20380, 20556, 20557, 20584, 20769, 20775, 20957, 20961, 20967, 20968,
         20969, 20977, 21186, 21375, 21376, 21380, 21571, 21771, 21772, 21774]])


printing here the length of choose: 
 torch.Size([1, 500])



printing here the img_masked: 


here are the MODEL POINTS: 
 [[-0.05873615  0.05995234  0.02063136]
 [-0.05602338  0.06064744  0.02244382]
 [ 0.07561468 -0.1234856   0.02333406]
 ...
 [-0.00729981  0.0256304   0.1455352 ]
 [-0.02319867  0.03987264  0.1463535 ]
 [-0.03196589  0.03330274  0.1468183 ]]


printing here the cloud: 
 tensor([[-2.3058, -2.3902,  8.9100],
        [-2.3058, -2.3819,  8.9100],
        [-2.2727, -2.3736,  8.9100],
        ...,
        [-1.9718, -1.3675,  9.0500],
        [-1.9855, -1.3627,  9.0740],
        [-1.9992, -1.3579,  9.0980]])


printing here the length of cloud: 
 torch.Size([500, 3])



printing here the choose: 
 tensor([[ 1974,  2094,  2218,  2328,  2330,  2457,  2558,  2569,  2581,  2693,
          2699,  2700,  2806,  2813,  2819,  2820,  2925,  2930,  2942,  2944,
          2945,  3042,  3045,  3165,  3169,  3287,  3288,  3301,  3394,  3428,
          3517,  3521,  3532,  3537,  3544,  3546,  3649,  3743,  3752,  3758,
          3770,  3777,  3783,  3784,  3872,  3874,  3888,  3909,  3992,  4001,
          4016,  4017,  4025,  4028,  4106,  4109,  4118,  4134,  4139,  4147,
          4148,  4229,  4230,  4232,  4233,  4234,  4240,  4261,  4265,  4348,
          4350,  4361,  4369,  4482,  4503,  4607,  4612,  4620,  4696,  4712,
          4714,  4736,  4746,  4821,  4829,  4836,  4866,  4953,  4960,  4977,
          5045,  5058,  5060,  5070,  5080,  5192,  5197,  5211,  5307,  5308,
          5314,  5328,  5336,  5407,  5430,  5433,  5436,  5454,  5458,  5522,
          5533,  5544,  5555,  5557,  5561,  5569,  5577,  5648,  5649,  5651,
          5694,  5765,  5768,  5783,  5802,  5890,  5892,  5895,  5906,  6003,
          6004,  6015,  6022,  6026,  6131,  6153,  6163,  6173,  6245,  6249,
          6254,  6267,  6271,  6276,  6280,  6288,  6382,  6388,  6485,  6493,
          6503,  6507,  6514,  6526,  6534,  6542,  6624,  6627,  6636,  6660,
          6661,  6731,  6746,  6751,  6752,  6764,  6776,  6780,  6846,  6851,
          6877,  6899,  6901,  6908,  6968,  6979,  6993,  7028,  7111,  7117,
          7125,  7127,  7144,  7149,  7215,  7219,  7247,  7260,  7262,  7343,
          7364,  7378,  7380,  7465,  7471,  7472,  7482,  7492,  7500,  7602,
          7618,  7699,  7701,  7705,  7706,  7709,  7710,  7743,  7815,  7833,
          7854,  7939,  7955,  7975,  7986,  7992,  8083,  8084,  8094,  8107,
          8110,  8179,  8234,  8332,  8447,  8466,  8573,  8590,  8593,  8595,
          8701,  8712,  8832,  8936,  9054,  9058,  9071,  9073,  9161,  9189,
          9281,  9282,  9293,  9323,  9412,  9421,  9429,  9431,  9540,  9543,
          9544,  9550,  9555,  9648,  9664,  9665,  9671,  9763,  9783,  9785,
          9786,  9790,  9794,  9807,  9897,  9899,  9900,  9907,  9910,  9928,
         10015, 10024, 10035, 10040, 10042, 10125, 10142, 10259, 10264, 10285,
         10370, 10388, 10390, 10398, 10505, 10528, 10532, 10617, 10623, 10630,
         10631, 10652, 10729, 10730, 10754, 10771, 10774, 10851, 10860, 10865,
         10876, 10894, 10980, 10983, 10989, 11010, 11014, 11091, 11113, 11115,
         11120, 11215, 11220, 11236, 11332, 11364, 11452, 11453, 11457, 11468,
         11470, 11483, 11485, 11495, 11496, 11583, 11590, 11600, 11693, 11708,
         11714, 11722, 11814, 11850, 11860, 11947, 11950, 11961, 11966, 11968,
         11971, 12060, 12064, 12065, 12071, 12076, 12088, 12096, 12097, 12176,
         12184, 12191, 12193, 12197, 12205, 12304, 12306, 12308, 12316, 12324,
         12327, 12329, 12330, 12335, 12337, 12418, 12443, 12457, 12466, 12540,
         12548, 12553, 12565, 12579, 12663, 12672, 12678, 12680, 12686, 12782,
         12786, 12792, 12816, 12828, 12919, 12933, 12934, 12939, 13034, 13046,
         13058, 13142, 13154, 13175, 13188, 13260, 13262, 13264, 13276, 13288,
         13291, 13383, 13401, 13431, 13503, 13504, 13506, 13521, 13548, 13624,
         13633, 13636, 13641, 13655, 13656, 13657, 13670, 13876, 13879, 13883,
         13908, 13915, 13988, 13999, 14005, 14027, 14148, 14254, 14265, 14271,
         14274, 14349, 14364, 14368, 14391, 14589, 14617, 14625, 14633, 14708,
         14717, 14726, 14740, 14751, 14756, 14848, 14860, 14954, 14971, 14973,
         15081, 15082, 15193, 15207, 15224, 15345, 15449, 15457, 15461, 15465,
         15472, 15579, 15687, 15705, 15805, 15820, 15823, 15913, 15916, 15918,
         15950, 15952, 16038, 16049, 16059, 16063, 16166, 16184, 16299, 16396,
         16413, 16419, 16528, 16538, 16647, 16652, 16658, 16661, 16773, 16781,
         16784, 16889, 16891, 16896, 16904, 17013, 17133, 17138, 17257, 17376]])


printing here the length of choose: 
 torch.Size([1, 500])



printing here the img_masked: 
 tensor([[[ 731.5065,  740.2402,  740.2402,  ...,  945.4803,  945.4803,
           954.2140],
         [ 731.5065,  740.2402,  740.2402,  ...,  936.7467,  941.1135,
           945.4803],
         [ 731.5065,  735.8734,  735.8734,  ...,  932.3799,  936.7467,
           941.1135],
         ...,
         [ 797.0087,  810.1091,  818.8428,  ...,  840.6768,  840.6768,
           827.5764],
         [ 810.1091,  818.8428,  823.2096,  ...,  836.3101,  836.3101,
           827.5764],
         [ 823.2096,  823.2096,  827.5764,  ...,  836.3101,  827.5764,
           827.5764]],

        [[ 868.5000,  877.4286,  877.4286,  ...,  997.9643,  997.9643,
          1002.4286],
         [ 868.5000,  877.4286,  877.4286,  ...,  989.0357,  993.5000,
           993.5000],
         [ 868.5000,  872.9643,  872.9643,  ...,  984.5714,  989.0357,
           989.0357],
         ...,
         [ 944.3929,  957.7857,  953.3214,  ...,  922.0714,  922.0714,
           917.6071],
         [ 957.7857,  966.7143,  957.7857,  ...,  917.6071,  917.6071,
           917.6071],
         [ 971.1786,  971.1786,  962.2500,  ...,  917.6071,  917.6071,
           917.6071]],

        [[1109.3066, 1118.1956, 1118.1956,  ..., 1122.6400, 1118.1956,
          1113.7511],
         [1109.3066, 1118.1956, 1118.1956,  ..., 1113.7511, 1113.7511,
          1104.8622],
         [1109.3066, 1113.7511, 1113.7511,  ..., 1109.3066, 1109.3066,
          1100.4177],
         ...,
         [1091.5289, 1095.9734, 1104.8622,  ..., 1127.0845, 1131.5289,
          1131.5289],
         [1095.9734, 1104.8622, 1100.4177,  ..., 1122.6400, 1131.5289,
          1131.5289],
         [1109.3066, 1109.3066, 1104.8622,  ..., 1122.6400, 1131.5289,
          1131.5289]]])


printing here the length of img_masked: 
 torch.Size([3, 120, 200])



printing here the target: 
 tensor([[ 0.1682,  0.1187,  0.6431],
        [-0.0463,  0.1145,  0.7200],
        [-0.0490,  0.1130,  0.6874],
        ...,
        [-0.0021, -0.0052,  0.6963],
        [ 0.0096, -0.0068,  0.6966],
        [-0.0071, -0.0089,  0.7027]])


printing here the length of target: 
 torch.Size([500, 3])



printing here the model_points: 
 tensor([[ 0.0690, -0.1226,  0.0254],
        [-0.0385,  0.0784,  0.0251],
        [-0.0623,  0.0561,  0.0268],
        ...,
        [-0.0225,  0.0334,  0.1457],
        [-0.0136,  0.0257,  0.1476],
        [-0.0220,  0.0416,  0.1494]])


printing here the length of model_points: 
 torch.Size([500, 3])



LONGTENSOR:  270 






LONGTENSOR: tensor([270]) 



 tensor([[[ 871.2445,  849.4105,  858.1441,  ...,  831.9432,  831.9432,
           827.5764],
         [ 875.6113,  858.1441,  862.5109,  ...,  836.3101,  831.9432,
           831.9432],
         [ 879.9781,  871.2445,  862.5109,  ...,  840.6768,  836.3101,
           836.3101],
         ...,
         [ 814.4760,  814.4760,  814.4760,  ...,  753.3406,  753.3406,
           753.3406],
         [ 814.4760,  818.8428,  805.7424,  ...,  753.3406,  753.3406,
           753.3406],
         [ 814.4760,  818.8428,  810.1091,  ...,  753.3406,  753.3406,
           753.3406]],

        [[1002.4286,  980.1071,  989.0357,  ...,  966.7143,  966.7143,
           962.2500],
         [1006.8929,  989.0357,  993.5000,  ...,  971.1786,  966.7143,
           966.7143],
         [1011.3571, 1002.4286,  993.5000,  ...,  975.6429,  971.1786,
           971.1786],
         ...,
         [ 935.4643,  935.4643,  935.4643,  ...,  881.8929,  881.8929,
           881.8929],
         [ 935.4643,  939.9286,  926.5357,  ...,  881.8929,  881.8929,
           881.8929],
         [ 935.4643,  939.9286,  931.0000,  ...,  881.8929,  881.8929,
           881.8929]],

        [[1131.5289, 1109.3066, 1118.1956,  ..., 1109.3066, 1109.3066,
          1104.8622],
         [1131.5289, 1118.1956, 1122.6400,  ..., 1113.7511, 1109.3066,
          1109.3066],
         [1131.5289, 1131.5289, 1122.6400,  ..., 1118.1956, 1113.7511,
          1113.7511],
         ...,
         [1127.0845, 1127.0845, 1127.0845,  ..., 1127.0845, 1127.0845,
          1127.0845],
         [1127.0845, 1131.5289, 1118.1956,  ..., 1127.0845, 1127.0845,
          1127.0845],
         [1127.0845, 1131.5289, 1122.6400,  ..., 1127.0845, 1127.0845,
          1127.0845]]])


printing here the length of img_masked: 
 torch.Size([3, 160, 120])



printing here the target: 
 tensor([[-0.1073, -0.0223,  0.9527],
        [-0.1045, -0.0227,  0.9509],
        [ 0.0014,  0.1774,  0.9488],
        ...,
        [-0.0611,  0.0179,  0.8275],
        [-0.0749,  0.0016,  0.8268],
        [-0.0845,  0.0070,  0.8263]])


printing here the length of target: 
 torch.Size([500, 3])



printing here the model_points: 
 tensor([[-0.0587,  0.0600,  0.0206],
        [-0.0560,  0.0606,  0.0224],
        [ 0.0756, -0.1235,  0.0233],
        ...,
        [-0.0073,  0.0256,  0.1455],
        [-0.0232,  0.0399,  0.1464],
        [-0.0320,  0.0333,  0.1468]])


printing here the length of model_points: 
 torch.Size([500, 3])



LONGTENSOR:  321 






LONGTENSOR: tensor([321]) 







out_img.size:  torch.Size([1, 32, 120, 200])
emb:::: torch.Size([1, 32, 24000])
choose.shape before:  torch.Size([1, 1, 500])
choose:  torch.Size([1, 32, 500])
emb after gather::  torch.Size([1, 32, 500])
pointcloud shape before transpose:  torch.Size([1, 500, 3])
pointcloud after transpose:  torch.Size([1, 3, 500])
PoseNetFeat: x shape after conv layer:  torch.Size([1, 64, 500])
PoseNetFeat: emb shape after conv layer:  torch.Size([1, 64, 500])
after concatenation shape of pointnet1:  torch.Size([1, 128, 500])
after concatenation shape of pointnet2:  torch.Size([1, 256, 500])
apx shape:  torch.Size([1, 1024, 1])
apx shape after change:  torch.Size([1, 1024, 500])
final shape after concat of pointnetfeat_1 & pointnetfeat_2:  torch.Size([1, 1408, 500])
rx shape after 1st iteration:  torch.Size([1, 640, 500])
rx shape after 2nd iteration:  torch.Size([1, 256, 500])
rx shape after 3rd iteration:  torch.Size([1, 128, 500])
rx after shape change:  torch.Size([1, 1, 4, 500])
out__rx shape before contiguous:  torch.Size([1, 4, 500])
out__rx shape after contiguous:  torch.Size([1, 500, 4])
out__cx shape after contiguous:  torch.Size([1, 500, 1])



***********************************ITERATION*******************************************



value of index here:

 107 


out__tx shape after contiguous:  torch.Size([1, 500, 3])


emb at the end:  torch.Size([1, 32, 500]) 

*****************ENTERING LOSS*************************


 bs & np vlaues: 1 500
***********************PRED VALUE*************** tensor([[[ 0.1610,  0.1435,  0.6614],
         [-0.0579,  0.1214,  0.7209],
         [-0.0585,  0.1286,  0.6891],
         ...,
         [-0.0116,  0.0118,  0.6692],
         [ 0.0001,  0.0100,  0.6698],
         [-0.0170,  0.0065,  0.6741]],

        [[ 0.1609,  0.1428,  0.6611],
         [-0.0579,  0.1207,  0.7210],
         [-0.0586,  0.1278,  0.6891],
         ...,
         [-0.0116,  0.0110,  0.6693],
         [ 0.0001,  0.0092,  0.6698],
         [-0.0170,  0.0057,  0.6742]],

        [[ 0.1602,  0.1408,  0.6602],
         [-0.0583,  0.1186,  0.7210],
         [-0.0591,  0.1257,  0.6891],
         ...,
         [-0.0121,  0.0089,  0.6692],
         [-0.0004,  0.0071,  0.6697],
         [-0.0175,  0.0036,  0.6741]],

        ...,

        [[ 0.1691,  0.1558,  0.6597],
         [-0.0477,  0.1267,  0.7239],
         [-0.0492,  0.1332,  0.6919],
         ...,
         [ 0.0018,  0.0178,  0.6735],
         [ 0.0136,  0.0165,  0.6738],
         [-0.0033,  0.0125,  0.6786]],

        [[ 0.1692,  0.1563,  0.6596],
         [-0.0475,  0.1269,  0.7238],
         [-0.0490,  0.1332,  0.6917],
         ...,
         [ 0.0023,  0.0180,  0.6737],
         [ 0.0141,  0.0167,  0.6741],
         [-0.0027,  0.0126,  0.6788]],

        [[ 0.1707,  0.1574,  0.6597],
         [-0.0460,  0.1271,  0.7235],
         [-0.0474,  0.1332,  0.6915],
         ...,
         [ 0.0046,  0.0182,  0.6743],
         [ 0.0164,  0.0169,  0.6747],
         [-0.0005,  0.0128,  0.6794]]],
       device='cuda:0', grad_fn=<ThAddBackward>)
2019-06-04 03:23:50,926 : Test time 10h 11m 50s Test Frame No.97 dis:0.009779226034879684




out_img.size:  torch.Size([1, 32, 120, 160])
emb:::: torch.Size([1, 32, 19200])
choose.shape before:  torch.Size([1, 1, 500])
choose:  torch.Size([1, 32, 500])
emb after gather::  torch.Size([1, 32, 500])
pointcloud shape before transpose:  torch.Size([1, 500, 3])
pointcloud after transpose:  torch.Size([1, 3, 500])
PoseNetFeat: x shape after conv layer:  torch.Size([1, 64, 500])
PoseNetFeat: emb shape after conv layer:  torch.Size([1, 64, 500])
after concatenation shape of pointnet1:  torch.Size([1, 128, 500])
after concatenation shape of pointnet2:  torch.Size([1, 256, 500])
apx shape:  torch.Size([1, 1024, 1])
apx shape after change:  torch.Size([1, 1024, 500])
final shape after concat of pointnetfeat_1 & pointnetfeat_2:  torch.Size([1, 1408, 500])
rx shape after 1st iteration:  torch.Size([1, 640, 500])
rx shape after 2nd iteration:  torch.Size([1, 256, 500])
rx shape after 3rd iteration:  torch.Size([1, 128, 500])
rx after shape change:  torch.Size([1, 1, 4, 500])
out__rx shape before contiguous:  torch.Size([1, 4, 500])
out__rx shape after contiguous:  torch.Size([1, 500, 4])
out__cx shape after contiguous:  torch.Size([1, 500, 1])
out__tx shape after contiguous:  torch.Size([1, 500, 3])


emb at the end:  torch.Size([1, 32, 500]) 

*****************ENTERING LOSS*************************


 bs & np vlaues: 1 500
***********************PRED VALUE*************** tensor([[[-0.1659, -0.1707,  0.9501],
         [-0.1527, -0.1712,  0.9487],
         [-0.1961, -0.1265,  0.9081],
         ...,
         [-0.0168, -0.1331,  0.7877],
         [-0.0119, -0.1471,  0.7959],
         [-0.0004, -0.1395,  0.7885]],

        [[-0.1580, -0.1681,  0.9535],
         [-0.1449, -0.1686,  0.9522],
         [-0.1882, -0.1243,  0.9111],
         ...,
         [-0.0088, -0.1320,  0.7910],
         [-0.0039, -0.1459,  0.7992],
         [ 0.0076, -0.1383,  0.7918]],

        [[-0.1554, -0.1655,  0.9549],
         [-0.1423, -0.1661,  0.9536],
         [-0.1855, -0.1219,  0.9122],
         ...,
         [-0.0060, -0.1305,  0.7923],
         [-0.0011, -0.1444,  0.8007],
         [ 0.0104, -0.1369,  0.7933]],

        ...,

        [[-0.1841, -0.1340,  0.9486],
         [-0.1711, -0.1360,  0.9478],
         [-0.2081, -0.0890,  0.9036],
         ...,
         [-0.0265, -0.1198,  0.7907],
         [-0.0234, -0.1338,  0.7996],
         [-0.0109, -0.1278,  0.7923]],

        [[-0.1869, -0.1388,  0.9441],
         [-0.1738, -0.1408,  0.9431],
         [-0.2107, -0.0917,  0.9012],
         ...,
         [-0.0298, -0.1186,  0.7862],
         [-0.0267, -0.1331,  0.7945],
         [-0.0142, -0.1268,  0.7875]],

        [[-0.1904, -0.1443,  0.9410],
         [-0.1773, -0.1463,  0.9399],
         [-0.2140, -0.0963,  0.8990],
         ...,
         [-0.0330, -0.1214,  0.7837],
         [-0.0300, -0.1360,  0.7917],
         [-0.0175, -0.1296,  0.7849]]],
       device='cuda:0', grad_fn=<ThAddBackward>)
2019-06-04 03:23:50,975 : Test time 10h 11m 50s Test Frame No.98 dis:0.03113694302737713



***********************************ITERATION*******************************************



value of index here:

 119 






out_img.size:  torch.Size([1, 32, 120, 120])
emb:::: torch.Size([1, 32, 14400])
choose.shape before:  torch.Size([1, 1, 500])
choose:  torch.Size([1, 32, 500])
emb after gather::  torch.Size([1, 32, 500])
pointcloud shape before transpose:  torch.Size([1, 500, 3])
pointcloud after transpose:  torch.Size([1, 3, 500])
PoseNetFeat: x shape after conv layer:  torch.Size([1, 64, 500])
PoseNetFeat: emb shape after conv layer:  torch.Size([1, 64, 500])
after concatenation shape of pointnet1:  torch.Size([1, 128, 500])
after concatenation shape of pointnet2:  torch.Size([1, 256, 500])
apx shape:  torch.Size([1, 1024, 1])
apx shape after change:  torch.Size([1, 1024, 500])
final shape after concat of pointnetfeat_1 & pointnetfeat_2:  torch.Size([1, 1408, 500])
rx shape after 1st iteration:  torch.Size([1, 640, 500])
rx shape after 2nd iteration:  torch.Size([1, 256, 500])
rx shape after 3rd iteration:  torch.Size([1, 128, 500])
rx after shape change:  torch.Size([1, 1, 4, 500])
out__rx shape before contiguous:  torch.Size([1, 4, 500])
out__rx shape after contiguous:  torch.Size([1, 500, 4])
out__cx shape after contiguous:  torch.Size([1, 500, 1])
out__tx shape after contiguous:  torch.Size([1, 500, 3])


emb at the end:  torch.Size([1, 32, 500]) 

*****************ENTERING LOSS*************************


 bs & np vlaues: 1 500
***********************PRED VALUE*************** tensor([[[ 0.0983, -0.0001,  0.9631],
         [ 0.0348,  0.1152,  0.7742],
         [ 0.0603,  0.1118,  0.7720],
         ...,
         [ 0.0558, -0.0060,  0.7346],
         [ 0.0552, -0.0125,  0.7436],
         [ 0.0567, -0.0111,  0.7389]],

        [[ 0.0999, -0.0004,  0.9632],
         [ 0.0353,  0.1155,  0.7750],
         [ 0.0607,  0.1121,  0.7727],
         ...,
         [ 0.0564, -0.0056,  0.7349],
         [ 0.0559, -0.0121,  0.7438],
         [ 0.0573, -0.0107,  0.7391]],

        [[ 0.0956,  0.0018,  0.9635],
         [ 0.0360,  0.1148,  0.7719],
         [ 0.0614,  0.1110,  0.7701],
         ...,
         [ 0.0559, -0.0074,  0.7346],
         [ 0.0550, -0.0137,  0.7437],
         [ 0.0566, -0.0124,  0.7390]],

        ...,

        [[ 0.1012, -0.0242,  0.9624],
         [ 0.0156,  0.0864,  0.7795],
         [ 0.0409,  0.0845,  0.7752],
         ...,
         [ 0.0405, -0.0335,  0.7382],
         [ 0.0411, -0.0400,  0.7471],
         [ 0.0421, -0.0385,  0.7423]],

        [[ 0.1060, -0.0227,  0.9637],
         [ 0.0197,  0.0874,  0.7808],
         [ 0.0450,  0.0855,  0.7764],
         ...,
         [ 0.0444, -0.0326,  0.7397],
         [ 0.0450, -0.0391,  0.7487],
         [ 0.0460, -0.0376,  0.7439]],

        [[ 0.1039, -0.0245,  0.9643],
         [ 0.0278,  0.0734,  0.7702],
         [ 0.0532,  0.0706,  0.7671],
         ...,
         [ 0.0516, -0.0498,  0.7392],
         [ 0.0517, -0.0556,  0.7486],
         [ 0.0529, -0.0545,  0.7438]]],
       device='cuda:0', grad_fn=<ThAddBackward>)
2019-06-04 03:23:51,025 : Test time 10h 11m 51s Test Frame No.99 dis:0.008362095803022385




out_img.size:  torch.Size([1, 32, 80, 200])
emb:::: torch.Size([1, 32, 16000])
choose.shape before:  torch.Size([1, 1, 500])
choose:  torch.Size([1, 32, 500])
emb after gather::  torch.Size([1, 32, 500])
pointcloud shape before transpose:  torch.Size([1, 500, 3])
pointcloud after transpose:  torch.Size([1, 3, 500])
PoseNetFeat: x shape after conv layer:  torch.Size([1, 64, 500])
PoseNetFeat: emb shape after conv layer:  torch.Size([1, 64, 500])
after concatenation shape of pointnet1:  torch.Size([1, 128, 500])
after concatenation shape of pointnet2:  torch.Size([1, 256, 500])
apx shape:  torch.Size([1, 1024, 1])
apx shape after change:  torch.Size([1, 1024, 500])
final shape after concat of pointnetfeat_1 & pointnetfeat_2:  torch.Size([1, 1408, 500])
rx shape after 1st iteration:  torch.Size([1, 640, 500])
rx shape after 2nd iteration:  torch.Size([1, 256, 500])
rx shape after 3rd iteration:  torch.Size([1, 128, 500])
rx after shape change:  torch.Size([1, 1, 4, 500])
out__rx shape before contiguous:  torch.Size([1, 4, 500])
out__rx shape after contiguous:  torch.Size([1, 500, 4])
out__cx shape after contiguous:  torch.Size([1, 500, 1])
out__tx shape after contiguous:  torch.Size([1, 500, 3])


emb at the end:  torch.Size([1, 32, 500]) 

*****************ENTERING LOSS*************************


 bs & np vlaues: 1 500


here are the MODEL POINTS: 
 [[-0.06033466  0.05907616  0.02053552]
 [-0.0596999   0.0583297   0.02367012]
 [-0.046763    0.0627561   0.02375884]
 ...
 [-0.01938508  0.03213096  0.1488192 ]
 [-0.01790719  0.04013234  0.1490781 ]
 [-0.02799232  0.03521661  0.1507771 ]]


printing here the cloud: 
 tensor([[-2.0750, -2.1776,  7.9810],
        [-2.1217, -2.1579,  8.0740],
        [-2.0921, -2.1429,  8.0180],
        ...,
        [-1.8066, -1.2432,  7.9440],
        [-1.7844, -1.2358,  7.9440],
        [-1.7662, -1.2386,  7.9620]])


printing here the length of cloud: 
 torch.Size([500, 3])



printing here the choose: 
 tensor([[ 2940,  3897,  3899,  4057,  5338,  5653,  5813,  5820,  5829,  5989,
          6125,  6139,  6142,  6312,  6445,  6452,  6458,  6600,  6606,  6609,
          6613,  6624,  6636,  6758,  6784,  6786,  6798,  6913,  6923,  6924,
          6935,  6936,  6951,  7091,  7101,  7110,  7112,  7275,  7277,  7389,
          7419,  7425,  7431,  7561,  7563,  7566,  7576,  7585,  7595,  7754,
          7756,  7758,  7866,  7871,  7877,  7892,  7899,  7904,  7911,  7915,
          8039,  8051,  8054,  8061,  8064,  8072,  8079,  8193,  8200,  8207,
          8213,  8228,  8229,  8234,  8364,  8369,  8387,  8394,  8505,  8511,
          8517,  8529,  8530,  8539,  8540,  8545,  8546,  8547,  8552,  8666,
          8691,  8832,  8835,  8836,  8842,  8856,  8865,  8868,  8987,  8998,
          9031,  9039,  9043,  9152,  9157,  9160,  9191,  9329,  9340,  9343,
          9479,  9485,  9486,  9490,  9517,  9634,  9635,  9651,  9660,  9666,
          9668,  9669,  9679,  9818,  9833,  9835,  9953,  9959,  9965,  9999,
         10008, 10116, 10121, 10125, 10134, 10143, 10272, 10274, 10283, 10288,
         10299, 10303, 10311, 10322, 10435, 10444, 10445, 10459, 10475, 10484,
         10599, 10640, 10651, 10764, 10803, 10805, 10810, 10916, 10917, 10918,
         10920, 10929, 10947, 10950, 10965, 10969, 11090, 11102, 11105, 11118,
         11247, 11256, 11258, 11269, 11279, 11291, 11441, 11443, 11448, 11450,
         11460, 11590, 11591, 11601, 11602, 11606, 11745, 11748, 11758, 11771,
         11779, 11780, 11931, 12065, 12066, 12087, 12095, 12099, 12234, 12238,
         12247, 12396, 12398, 12401, 12410, 12415, 12418, 12424, 12511, 12557,
         12558, 12574, 12580, 12584, 12587, 12589, 12708, 12732, 12744, 12899,
         12900, 12908, 13036, 13053, 13071, 13197, 13201, 13231, 13369, 13377,
         13379, 13528, 13529, 13531, 13537, 13547, 13549, 13551, 13675, 13691,
         13696, 13698, 13705, 13832, 13861, 13876, 13995, 14001, 14016, 14027,
         14030, 14159, 14163, 14182, 14314, 14317, 14349, 14351, 14354, 14483,
         14487, 14497, 14505, 14515, 14520, 14645, 14648, 14673, 14802, 14805,
         14822, 14824, 14833, 14836, 14838, 14841, 14945, 14957, 14970, 14974,
         14995, 15122, 15134, 15144, 15282, 15292, 15304, 15323, 15326, 15327,
         15424, 15443, 15450, 15460, 15462, 15469, 15477, 15490, 15586, 15587,
         15621, 15626, 15629, 15637, 15644, 15764, 15774, 15797, 15907, 15912,
         15932, 15946, 15958, 15960, 15964, 16067, 16087, 16090, 16093, 16096,
         16100, 16116, 16119, 16228, 16229, 16230, 16268, 16270, 16288, 16290,
         16387, 16452, 16455, 16574, 16577, 16584, 16591, 16596, 16753, 16876,
         16894, 16897, 16900, 16919, 16920, 16925, 16927, 16929, 16940, 17031,
         17058, 17084, 17191, 17195, 17229, 17250, 17260, 17262, 17391, 17421,
         17512, 17515, 17555, 17567, 17696, 17720, 17729, 17731, 17733, 17738,
         17742, 17746, 17857, 17858, 17886, 17901, 17995, 18013, 18018, 18021,
         18201, 18211, 18227, 18229, 18338, 18345, 18350, 18354, 18357, 18369,
         18370, 18373, 18389, 18476, 18500, 18516, 18658, 18661, 18673, 18676,
         18679, 18685, 18695, 18826, 18827, 18829, 18833, 18855, 18857, 18960,
         18961, 18989, 19006, 19007, 19023, 19141, 19152, 19167, 19177, 19184,
         19188, 19280, 19282, 19298, 19305, 19319, 19324, 19349, 19461, 19472,
         19474, 19484, 19495, 19496, 19499, 19506, 19507, 19625, 19638, 19652,
         19653, 19655, 19658, 19669, 19785, 19796, 19816, 19827, 19958, 19963,
         20107, 20125, 20126, 20144, 20277, 20283, 20297, 20301, 20306, 20307,
         20308, 20458, 20467, 20468, 20565, 20574, 20598, 20599, 20601, 20726,
         20733, 20754, 20763, 20766, 20790, 20947, 21082, 21084, 21208, 21213,
         21234, 21425, 21693, 21697, 21713, 21718, 21877, 22040, 22340, 22341,
         22343, 22352, 22355, 22657, 22658, 22664, 22819, 22975, 23138, 23141]])


printing here the length of choose: 
 torch.Size([1, 500])



printing here the img_masked: 
***********************PRED VALUE*************** tensor([[[ 0.0652,  0.0771,  0.8431],
         [ 0.0727,  0.0118,  0.8780],
         [ 0.0550,  0.0080,  0.8775],
         ...,
         [-0.1041, -0.0404,  0.7557],
         [-0.0879, -0.0338,  0.7529],
         [-0.0846, -0.0346,  0.7498]],

        [[ 0.0647,  0.0807,  0.8436],
         [ 0.0721,  0.0155,  0.8788],
         [ 0.0543,  0.0117,  0.8783],
         ...,
         [-0.1045, -0.0370,  0.7562],
         [-0.0883, -0.0304,  0.7535],
         [-0.0850, -0.0312,  0.7504]],

        [[ 0.0456,  0.0705,  0.8314],
         [ 0.0532,  0.0069,  0.8695],
         [ 0.0354,  0.0030,  0.8691],
         ...,
         [-0.1227, -0.0519,  0.7488],
         [-0.1065, -0.0453,  0.7458],
         [-0.1032, -0.0463,  0.7428]],

        ...,

        [[ 0.0629,  0.0783,  0.8324],
         [ 0.0714,  0.0134,  0.8679],
         [ 0.0536,  0.0096,  0.8678],
         ...,
         [-0.1073, -0.0410,  0.7493],
         [-0.0911, -0.0344,  0.7461],
         [-0.0879, -0.0352,  0.7430]],

        [[ 0.0634,  0.0792,  0.8325],
         [ 0.0720,  0.0143,  0.8680],
         [ 0.0542,  0.0104,  0.8679],
         ...,
         [-0.1067, -0.0402,  0.7494],
         [-0.0906, -0.0335,  0.7462],
         [-0.0873, -0.0344,  0.7431]],

        [[ 0.0691,  0.0647,  0.8339],
         [ 0.0761, -0.0009,  0.8685],
         [ 0.0582, -0.0045,  0.8681],
         ...,
         [-0.1023, -0.0504,  0.7472],
         [-0.0860, -0.0440,  0.7443],
         [-0.0827, -0.0448,  0.7412]]],
       device='cuda:0', grad_fn=<ThAddBackward>)
2019-06-04 03:23:51,078 : Test time 10h 11m 51s Test Frame No.100 dis:0.008796828798949718


here are the MODEL POINTS: 
 [[ 0.06675074 -0.1186427   0.02070392]
 [-0.06267045  0.05708986  0.02108406]
 [ 0.07138167 -0.1210648   0.02265047]
 ...
 [-0.01297697  0.02771892  0.1488139 ]
 [-0.01789065  0.02934488  0.1499746 ]
 [-0.02270389  0.03715041  0.151718  ]]


printing here the cloud: 
 tensor([[-2.9958, -2.4863,  9.9960],
        [-2.6161, -2.2336,  8.9800],
        [-2.5508, -2.2276,  8.9560],
        ...,
        [-2.6454, -1.7026,  8.9100],
        [-2.6372, -1.7026,  8.9100],
        [-2.5675, -1.7114,  8.9560]])


printing here the length of cloud: 
 torch.Size([500, 3])



printing here the choose: 
 tensor([[ 1459,  1468,  1475,  1614,  1625,  1773,  1781,  1785,  1797,  1885,
          1947,  1949,  1953,  1954,  2040,  2056,  2059,  2103,  2107,  2116,
          2209,  2219,  2256,  2263,  2265,  2268,  2353,  2368,  2376,  2416,
          2422,  2431,  2516,  2523,  2528,  2542,  2543,  2569,  2582,  2651,
          2684,  2757,  2804,  2811,  2817,  2825,  2844,  2846,  2864,  2903,
          2965,  2979,  3008,  3018,  3048,  3060,  3062,  3114,  3122,  3136,
          3137,  3143,  3147,  3153,  3156,  3182,  3186,  3188,  3207,  3219,
          3227,  3229,  3233,  3263,  3275,  3282,  3308,  3324,  3325,  3330,
          3332,  3345,  3378,  3379,  3380,  3420,  3429,  3441,  3444,  3462,
          3471,  3475,  3507,  3539,  3589,  3610,  3615,  3617,  3623,  3647,
          3650,  3696,  3706,  3711,  3720,  3726,  3732,  3750,  3753,  3760,
          3773,  3774,  3778,  3788,  3812,  3814,  3877,  3880,  3882,  3889,
          3921,  3937,  3949,  3951,  3963,  3967,  3986,  4048,  4059,  4065,
          4067,  4074,  4099,  4105,  4118,  4130,  4134,  4202,  4233,  4244,
          4256,  4292,  4297,  4300,  4305,  4306,  4307,  4308,  4327,  4329,
          4332,  4364,  4375,  4383,  4419,  4429,  4434,  4460,  4462,  4496,
          4497,  4517,  4545,  4546,  4566,  4568,  4576,  4593,  4594,  4595,
          4598,  4648,  4674,  4697,  4701,  4715,  4747,  4776,  4788,  4826,
          4841,  4843,  4861,  4869,  4894,  4909,  4934,  4938,  4948,  4998,
          5013,  5014,  5019,  5039,  5045,  5053,  5060,  5062,  5088,  5091,
          5098,  5101,  5130,  5145,  5146,  5167,  5181,  5187,  5191,  5209,
          5211,  5212,  5242,  5253,  5264,  5269,  5271,  5298,  5307,  5356,
          5360,  5370,  5372,  5379,  5399,  5419,  5430,  5450,  5461,  5480,
          5497,  5511,  5514,  5517,  5523,  5537,  5550,  5562,  5564,  5590,
          5608,  5612,  5633,  5635,  5639,  5655,  5660,  5674,  5695,  5725,
          5738,  5739,  5748,  5772,  5788,  5790,  5797,  5814,  5823,  5840,
          5851,  5856,  5864,  5883,  5931,  5967,  5971,  5976,  5993,  5996,
          5997,  6002,  6024,  6025,  6039,  6045,  6047,  6051,  6102,  6104,
          6113,  6118,  6120,  6127,  6159,  6170,  6181,  6188,  6193,  6202,
          6250,  6264,  6266,  6271,  6291,  6299,  6319,  6336,  6352,  6358,
          6362,  6382,  6383,  6387,  6431,  6449,  6470,  6493,  6499,  6505,
          6506,  6507,  6523,  6525,  6536,  6543,  6612,  6628,  6633,  6635,
          6638,  6663,  6665,  6686,  6691,  6700,  6753,  6778,  6788,  6795,
          6816,  6818,  6823,  6828,  6829,  6835,  6852,  6859,  6861,  6863,
          6914,  6924,  6927,  6932,  6938,  6952,  6960,  6965,  6972,  7000,
          7004,  7009,  7059,  7064,  7081,  7095,  7129,  7156,  7158,  7186,
          7220,  7225,  7231,  7237,  7297,  7323,  7334,  7340,  7343,  7378,
          7389,  7393,  7412,  7462,  7482,  7490,  7498,  7539,  7560,  7571,
          7574,  7593,  7604,  7626,  7639,  7641,  7702,  7703,  7735,  7761,
          7801,  7849,  7863,  7867,  7870,  7903,  7948,  7968,  7983,  8010,
          8024,  8025,  8027,  8051,  8053,  8060,  8067,  8076,  8114,  8142,
          8180,  8189,  8195,  8209,  8217,  8229,  8233,  8239,  8241,  8253,
          8260,  8270,  8272,  8277,  8283,  8289,  8330,  8334,  8351,  8358,
          8368,  8370,  8385,  8395,  8403,  8411,  8426,  8449,  8501,  8502,
          8537,  8555,  8558,  8562,  8580,  8586,  8594,  8602,  8603,  8616,
          8669,  8695,  8772,  8823,  8825,  8830,  8985,  8987,  8992,  8995,
          9001,  9133,  9136,  9149,  9151,  9161,  9292,  9294,  9302,  9304,
          9309,  9312,  9773,  9780,  9785,  9787,  9794,  9940,  9943,  9950,
         10090, 10253, 10260, 10262, 10440, 10580, 10584, 10740, 10751, 10758,
         10893, 10902, 11061, 11067, 11068, 11080, 11233, 11382, 11383, 11393]])


printing here the length of choose: 
 torch.Size([1, 500])



printing here the img_masked: 
values of bounding box:  213 333 247 407
posemat:
 [[-0.25976156  0.96514768  0.03184148 -0.05494645]
 [ 0.90395915  0.25462715 -0.34354457 -0.02964384]
 [-0.33967895 -0.06045628 -0.93859642  0.97273459]
 [ 0.          0.          0.          1.        ]]
traget_r:
 [[-0.25976156  0.96514768  0.03184148]
 [ 0.90395915  0.25462715 -0.34354457]
 [-0.33967895 -0.06045628 -0.93859642]]
target_t:
 [-0.05494645 -0.02964384  0.97273459]
length of choose here:  6300
first:  NP4
second:  4
637.6103
self.cam_fx value:  1077.2459
self.cam_fy value:  1077.2495



***********************************ITERATION MID*******************************************



 tensor([[[ 875.6113,  879.9781,  879.9781,  ...,  783.9083,  783.9083,
           783.9083],
         [ 875.6113,  879.9781,  879.9781,  ...,  783.9083,  783.9083,
           783.9083],
         [ 871.2445,  871.2445,  871.2445,  ...,  788.2751,  783.9083,
           783.9083],
         ...,
         [  -2.1179,   -2.1179,   72.1179,  ...,  748.9738,  744.6070,
           744.6070],
         [  -2.1179,    2.2489,    2.2489,  ...,  748.9738,  744.6070,
           744.6070],
         [  32.8166,   59.0175,   45.9170,  ...,  748.9738,  744.6070,
           744.6070]],

        [[1006.8929, 1011.3571, 1011.3571,  ...,  922.0714,  922.0714,
           922.0714],
         [1006.8929, 1011.3571, 1011.3571,  ...,  922.0714,  922.0714,
           922.0714],
         [1002.4286, 1002.4286, 1002.4286,  ...,  926.5357,  922.0714,
           922.0714],
         ...,
         [  -2.0357,   -2.0357,   64.9286,  ...,  886.3571,  877.4286,
           877.4286],
         [  -2.0357,   -2.0357,   -2.0357,  ...,  886.3571,  877.4286,
           877.4286],
         [  29.2143,   38.1429,   24.7500,  ...,  886.3571,  877.4286,
           877.4286]],

        [[1131.5289, 1131.5289, 1131.5289,  ..., 1127.0845, 1127.0845,
          1127.0845],
         [1131.5289, 1131.5289, 1131.5289,  ..., 1127.0845, 1127.0845,
          1127.0845],
         [1131.5289, 1131.5289, 1131.5289,  ..., 1131.5289, 1127.0845,
          1127.0845],
         ...,
         [  29.3067,   38.1956,  122.6400,  ..., 1127.0845, 1127.0845,
          1127.0845],
         [   7.0844,   20.4178,   20.4178,  ..., 1127.0845, 1127.0845,
          1127.0845],
         [  20.4178,   55.9733,   42.6400,  ..., 1127.0845, 1127.0845,
          1127.0845]]])


printing here the length of img_masked: 
 torch.Size([3, 80, 160])



printing here the target: 
 tensor([[ 0.1448,  0.0919,  0.9515],
        [-0.0734,  0.0865,  0.9522],
        [ 0.1496,  0.0898,  0.9495],
        ...,
        [-0.0204,  0.0650,  0.8243],
        [-0.0247,  0.0679,  0.8231],
        [-0.0338,  0.0669,  0.8214]])


printing here the length of target: 
 torch.Size([500, 3])



printing here the model_points: 
values of bounding box:  215 335 301 501
 tensor([[ 0.0668, -0.1186,  0.0207],
        [-0.0627,  0.0571,  0.0211],
        [ 0.0714, -0.1211,  0.0227],
        ...,
        [-0.0130,  0.0277,  0.1488],
        [-0.0179,  0.0293,  0.1500],
        [-0.0227,  0.0372,  0.1517]])


printing here the length of model_points: 
 torch.Size([500, 3])



LONGTENSOR:  261 






LONGTENSOR: tensor([261]) 



posemat:
 [[ 0.44941129 -0.89315768  0.01728746  0.06073338]
 [-0.00168093 -0.02019726 -0.9997946   0.14188333]
 [ 0.89332338  0.44928993 -0.01057821  0.69191748]
 [ 0.          0.          0.          1.        ]]
traget_r:
 [[ 0.44941129 -0.89315768  0.01728746]
 [-0.00168093 -0.02019726 -0.9997946 ]
 [ 0.89332338  0.44928993 -0.01057821]]
target_t:
 [0.06073338 0.14188333 0.69191748]
length of choose here:  4991
first:  NP1
second:  1
627.93334
self.cam_fx value:  1080.2331
self.cam_fy value:  1080.2312



***********************************ITERATION MID*******************************************



 tensor([[[ 674.7380,  674.7380,  674.7380,  ...,  604.8690,  604.8690,
           600.5022],
         [ 679.1048,  679.1048,  679.1048,  ...,  604.8690,  604.8690,
           604.8690],
         [ 679.1048,  679.1048,  679.1048,  ...,  604.8690,  604.8690,
           604.8690],
         ...,
         [ 845.0436,  858.1441,  858.1441,  ...,  805.7424,  805.7424,
           797.0087],
         [ 849.4105,  858.1441,  858.1441,  ...,  801.3755,  805.7424,
           805.7424],
         [ 853.7773,  862.5109,  862.5109,  ...,  801.3755,  797.0087,
           801.3755]],

        [[ 779.2143,  779.2143,  779.2143,  ...,  712.2500,  712.2500,
           707.7857],
         [ 783.6786,  783.6786,  783.6786,  ...,  712.2500,  712.2500,
           712.2500],
         [ 783.6786,  783.6786,  783.6786,  ...,  712.2500,  712.2500,
           712.2500],
         ...,
         [ 939.9286,  953.3214,  953.3214,  ...,  895.2857,  895.2857,
           904.2143],
         [ 944.3929,  953.3214,  953.3214,  ...,  890.8214,  895.2857,
           913.1429],
         [ 948.8571,  957.7857,  957.7857,  ...,  890.8214,  886.3571,
           908.6786]],

        [[1091.5289, 1091.5289, 1091.5289,  ...,  989.3066,  989.3066,
           984.8622],
         [1095.9734, 1095.9734, 1095.9734,  ...,  998.1956,  998.1956,
           989.3066],
         [1095.9734, 1095.9734, 1095.9734,  ...,  998.1956,  998.1956,
           989.3066],
         ...,
         [1127.0845, 1131.5289, 1131.5289,  ..., 1118.1956, 1118.1956,
          1127.0845],
         [1131.5289, 1131.5289, 1131.5289,  ..., 1113.7511, 1118.1956,
          1131.5289],
         [1131.5289, 1131.5289, 1131.5289,  ..., 1113.7511, 1109.3066,
          1131.5289]]])


printing here the length of img_masked: 
 torch.Size([3, 160, 160])



printing here the target: 
 tensor([[-0.1073,  0.0302,  0.8664],
        [-0.1067,  0.0278,  0.8642],
        [-0.0932,  0.0274,  0.8660],
        ...,
        [-0.0673, -0.0663,  0.7772],
        [-0.0643, -0.0699,  0.7838],
        [-0.0750, -0.0704,  0.7803]])


printing here the length of target: 
 torch.Size([500, 3])



printing here the model_points: 
 tensor([[-0.0603,  0.0591,  0.0205],
        [-0.0597,  0.0583,  0.0237],
        [-0.0468,  0.0628,  0.0238],
        ...,
        [-0.0194,  0.0321,  0.1488],
        [-0.0179,  0.0401,  0.1491],
        [-0.0280,  0.0352,  0.1508]])


printing here the length of model_points: 
 torch.Size([500, 3])



LONGTENSOR:  324 






LONGTENSOR: tensor([324]) 






***********************************ITERATION*******************************************



value of index here:

 115 





***********************************ITERATION*******************************************



value of index here:

 114 


values of bounding box:  222 342 269 469
posemat:
 [[-0.00164472  0.99960737  0.02797143 -0.01526351]
 [ 0.00931551  0.02798557 -0.99956492  0.13881155]
 [-0.99995526 -0.00138344 -0.00935789  0.8112289 ]
 [ 0.          0.          0.          1.        ]]
traget_r:
 [[-0.00164472  0.99960737  0.02797143]
 [ 0.00931551  0.02798557 -0.99956492]
 [-0.99995526 -0.00138344 -0.00935789]]
target_t:
 [-0.01526351  0.13881155  0.8112289 ]
length of choose here:  4453
first:  NP1
second:  1
627.93334
self.cam_fx value:  1080.2331
self.cam_fy value:  1080.2312



***********************************ITERATION MID*******************************************



values of bounding box:  171 331 213 373
posemat:
 [[ 0.13444166  0.9888927   0.06337713 -0.12607012]
 [ 0.78106647 -0.06639395 -0.62090822 -0.02626325]
 [-0.60980375  0.13297768 -0.78131704  0.92051319]
 [ 0.          0.          0.          1.        ]]
traget_r:
 [[ 0.13444166  0.9888927   0.06337713]
 [ 0.78106647 -0.06639395 -0.62090822]
 [-0.60980375  0.13297768 -0.78131704]]
target_t:
 [-0.12607012 -0.02626325  0.92051319]
length of choose here:  6631
first:  NP3
second:  3
618.76531
self.cam_fx value:  1075.8584
self.cam_fy value:  1075.8538



***********************************ITERATION MID*******************************************





here are the MODEL POINTS: 
 [[-0.03267775  0.08214665  0.01957453]
 [ 0.07349435 -0.120582    0.02073814]
 [ 0.1164654  -0.06051208  0.0254942 ]
 ...
 [-0.0313275   0.04589983  0.1477744 ]
 [-0.01045796  0.02603481  0.1491824 ]
 [-0.02237905  0.02964685  0.1501878 ]]


printing here the cloud: 
 tensor([[-2.0456, -2.0373,  7.5440],
        [-2.0711, -2.0346,  7.5600],
        [-2.0899, -2.0321,  7.5770],
        ...,
        [-1.3928, -1.4200,  7.6610],
        [-1.3826, -1.4169,  7.6440],
        [-1.3653, -1.4066,  7.6270]])


printing here the length of cloud: 
 torch.Size([500, 3])



printing here the choose: 
 tensor([[ 3061,  3258,  3456,  4058,  7043,  7248,  7444,  7445,  7449,  7644,
          7841,  7845,  8253,  8264,  8445,  8447,  8474,  8633,  8641,  8644,
          8646,  8656,  8669,  8674,  8834,  8841,  8844,  8854,  8861,  9036,
          9038,  9054,  9072,  9254,  9258,  9441,  9446,  9453,  9454,  9460,
          9464,  9486,  9668,  9670,  9837,  9843,  9860,  9882, 10044, 10062,
         10082, 10091, 10243, 10252, 10256, 10267, 10272, 10290, 10298, 10307,
         10313, 10436, 10438, 10451, 10458, 10463, 10488, 10492, 10501, 10503,
         10518, 10638, 10640, 10647, 10687, 10690, 10695, 10704, 10710, 10715,
         10718, 10838, 10840, 10857, 10868, 10904, 10918, 10923, 11036, 11037,
         11038, 11039, 11041, 11063, 11065, 11073, 11080, 11085, 11096, 11102,
         11103, 11118, 11265, 11285, 11289, 11297, 11308, 11318, 11337, 11436,
         11461, 11463, 11467, 11469, 11481, 11492, 11496, 11506, 11513, 11528,
         11532, 11538, 11544, 11668, 11705, 11707, 11712, 11717, 11731, 11745,
         11833, 11837, 11840, 11859, 11866, 11885, 11902, 11920, 11928, 11932,
         11939, 11941, 12057, 12074, 12124, 12125, 12132, 12133, 12140, 12147,
         12242, 12243, 12247, 12249, 12274, 12306, 12329, 12331, 12347, 12348,
         12414, 12432, 12435, 12441, 12452, 12474, 12489, 12503, 12511, 12513,
         12524, 12532, 12540, 12565, 12567, 12570, 12643, 12645, 12655, 12678,
         12692, 12722, 12726, 12745, 12747, 12748, 12756, 12833, 12834, 12837,
         12844, 12846, 12907, 12914, 12929, 12959, 12973, 13041, 13043, 13046,
         13062, 13076, 13078, 13079, 13096, 13107, 13122, 13151, 13164, 13169,
         13240, 13257, 13285, 13294, 13311, 13341, 13355, 13374, 13379, 13432,
         13448, 13467, 13473, 13487, 13491, 13492, 13515, 13528, 13534, 13535,
         13547, 13573, 13574, 13575, 13637, 13650, 13654, 13658, 13679, 13692,
         13694, 13698, 13702, 13719, 13773, 13779, 13836, 13858, 13870, 13872,
         13904, 13916, 13923, 13928, 13959, 13964, 13967, 13973, 13980, 14032,
         14036, 14037, 14049, 14061, 14064, 14068, 14072, 14081, 14111, 14112,
         14113, 14121, 14155, 14163, 14242, 14261, 14262, 14267, 14269, 14277,
         14311, 14323, 14326, 14330, 14335, 14376, 14439, 14443, 14456, 14467,
         14504, 14516, 14520, 14524, 14525, 14545, 14547, 14551, 14569, 14634,
         14650, 14668, 14682, 14686, 14711, 14721, 14724, 14732, 14746, 14754,
         14783, 14845, 14850, 14890, 14896, 14897, 14903, 14936, 14938, 14946,
         14952, 14954, 14966, 14976, 15070, 15140, 15152, 15173, 15175, 15178,
         15181, 15221, 15267, 15270, 15290, 15306, 15308, 15315, 15333, 15348,
         15385, 15470, 15471, 15478, 15485, 15510, 15515, 15682, 15690, 15758,
         15767, 15782, 15889, 15900, 15905, 15906, 15941, 15942, 15943, 15967,
         15981, 16082, 16091, 16100, 16102, 16110, 16123, 16148, 16149, 16167,
         16300, 16312, 16325, 16337, 16338, 16348, 16351, 16381, 16382, 16485,
         16494, 16522, 16527, 16529, 16550, 16554, 16703, 16704, 16723, 16738,
         16772, 16776, 16779, 16827, 16902, 16912, 16913, 16919, 16929, 16937,
         16948, 16954, 16957, 16962, 16975, 17045, 17095, 17096, 17100, 17132,
         17135, 17136, 17150, 17162, 17176, 17240, 17313, 17329, 17363, 17372,
         17375, 17376, 17378, 17510, 17533, 17544, 17556, 17560, 17574, 17578,
         17713, 17717, 17731, 17736, 17755, 17910, 17911, 17923, 17962, 17973,
         18113, 18115, 18123, 18128, 18146, 18162, 18179, 18329, 18347, 18348,
         18350, 18363, 18520, 18535, 18724, 18726, 18734, 18922, 18949, 18954,
         18957, 18973, 19129, 19132, 19143, 19146, 19151, 19154, 19177, 19331,
         19333, 19352, 19546, 19571, 19573, 19578, 19743, 19746, 19751, 19754,
         19771, 19939, 19947, 19948, 19972, 20157, 20163, 20165, 20174, 20343,
         20359, 20364, 20373, 20545, 20551, 20568, 20764, 21357, 21358, 21560]])


printing here the length of choose: 
 torch.Size([1, 500])



printing here the img_masked: 


here are the MODEL POINTS: 
 [[-0.0677302   0.05080914  0.01830656]
 [-0.06562238  0.05475264  0.02052037]
 [-0.05683404  0.06026835  0.02346262]
 ...
 [-0.01224118  0.03139193  0.1468576 ]
 [-0.0237061   0.0352385   0.1474873 ]
 [-0.01818755  0.03461714  0.148199  ]]


printing here the cloud: 
 tensor([[-2.4316, -2.3758,  9.8250],
        [-2.4994, -2.3532,  9.7690],
        [-2.4247, -2.3600,  9.7970],
        ...,
        [-2.1121, -1.5646,  8.5340],
        [-2.1200, -1.5566,  8.5340],
        [-2.0785, -1.5298,  8.4300]])


printing here the length of cloud: 
 torch.Size([500, 3])



printing here the choose: 
 tensor([[ 1252,  1403,  1412,  1418,  1564,  1574,  1580,  1732,  1880,  1895,
          1900,  1901,  1911,  2069,  2234,  2368,  2377,  2539,  2685,  2855,
          2865,  2873,  3006,  3023,  3160,  3162,  3220,  3228,  3236,  3322,
          3340,  3410,  3428,  3432,  3495,  3536,  3537,  3607,  3618,  3630,
          3641,  3669,  3673,  3674,  3692,  3711,  3731,  3757,  3786,  3791,
          3796,  3797,  3801,  3818,  3833,  3851,  3854,  3859,  3887,  3897,
          3905,  3910,  3924,  3933,  3950,  3982,  3986,  3988,  3990,  4021,
          4025,  4054,  4065,  4078,  4080,  4100,  4110,  4113,  4123,  4139,
          4170,  4192,  4194,  4208,  4210,  4241,  4250,  4251,  4258,  4279,
          4285,  4314,  4334,  4352,  4366,  4371,  4381,  4393,  4404,  4419,
          4420,  4436,  4468,  4471,  4513,  4530,  4532,  4541,  4546,  4597,
          4601,  4607,  4614,  4626,  4670,  4675,  4700,  4724,  4728,  4730,
          4741,  4744,  4749,  4752,  4761,  4782,  4784,  4787,  4811,  4829,
          4841,  4854,  4861,  4870,  4900,  4953,  4981,  5026,  5076,  5082,
          5084,  5088,  5095,  5100,  5102,  5106,  5127,  5129,  5141,  5147,
          5173,  5258,  5260,  5273,  5287,  5302,  5325,  5327,  5328,  5338,
          5343,  5365,  5385,  5389,  5394,  5409,  5411,  5413,  5419,  5425,
          5448,  5469,  5473,  5482,  5493,  5513,  5532,  5542,  5548,  5580,
          5586,  5635,  5642,  5663,  5692,  5734,  5773,  5803,  5805,  5811,
          5812,  5816,  5828,  5876,  5907,  5911,  5913,  5945,  5949,  5996,
          6002,  6012,  6013,  6053,  6057,  6061,  6097,  6101,  6111,  6120,
          6122,  6131,  6155,  6157,  6163,  6180,  6184,  6185,  6191,  6193,
          6196,  6232,  6235,  6262,  6287,  6338,  6345,  6377,  6378,  6380,
          6404,  6417,  6422,  6444,  6455,  6460,  6463,  6512,  6530,  6534,
          6536,  6544,  6552,  6553,  6574,  6591,  6592,  6611,  6613,  6621,
          6628,  6672,  6675,  6683,  6694,  6695,  6704,  6705,  6765,  6783,
          6793,  6808,  6809,  6834,  6849,  6861,  6867,  6908,  6914,  6940,
          6961,  7002,  7005,  7011,  7025,  7026,  7030,  7035,  7056,  7070,
          7098,  7103,  7135,  7137,  7146,  7150,  7160,  7163,  7168,  7219,
          7248,  7249,  7261,  7292,  7303,  7304,  7309,  7313,  7325,  7374,
          7409,  7430,  7435,  7446,  7462,  7485,  7536,  7545,  7557,  7569,
          7583,  7584,  7587,  7596,  7602,  7605,  7620,  7625,  7659,  7670,
          7674,  7702,  7709,  7725,  7729,  7746,  7759,  7783,  7784,  7794,
          7797,  7803,  7806,  7814,  7831,  7853,  7866,  7882,  7886,  7896,
          7909,  7913,  7915,  7920,  7943,  7956,  7957,  7958,  7965,  7971,
          8016,  8026,  8040,  8044,  8061,  8066,  8069,  8079,  8082,  8137,
          8149,  8170,  8172,  8185,  8192,  8193,  8195,  8205,  8218,  8241,
          8259,  8264,  8300,  8331,  8342,  8374,  8403,  8407,  8410,  8422,
          8423,  8427,  8432,  8450,  8499,  8511,  8529,  8530,  8553,  8575,
          8604,  8654,  8656,  8658,  8665,  8671,  8682,  8701,  8713,  8715,
          8741,  8817,  8829,  8850,  8852,  8869,  8880,  8889,  8895,  8899,
          8917,  8918,  8921,  8932,  8939,  8941,  8975,  8994,  9040,  9050,
          9053,  9068,  9082,  9085,  9092,  9106,  9170,  9171,  9173,  9177,
          9202,  9205,  9241,  9243,  9267,  9306,  9307,  9327,  9350,  9361,
          9408,  9421,  9429,  9434,  9457,  9460,  9465,  9471,  9489,  9494,
          9568,  9577,  9589,  9591,  9619,  9633,  9635,  9639,  9647,  9648,
          9661,  9728,  9743,  9744,  9748,  9751,  9785,  9794,  9808,  9890,
          9904,  9956,  9962, 10076, 10117, 10118, 10226, 10272, 10364, 10382,
         10387, 10394, 10419, 10420, 10428, 10683, 10693, 10695, 10699, 10709,
         10854, 10855, 10857, 11022, 11167, 11180, 11327, 11332, 11491, 11653]])


printing here the length of choose: 
 torch.Size([1, 500])



printing here the img_masked: 
 tensor([[[ 814.4760,  818.8428,  818.8428,  ...,  198.7554,   -2.1179,
            -2.1179],
         [ 818.8428,  818.8428,  818.8428,  ...,  478.2314,  229.3231,
            45.9170],
         [ 823.2096,  818.8428,  818.8428,  ...,  556.8340,  473.8646,
           255.5240],
         ...,
         [ 805.7424,  818.8428,  818.8428,  ...,  805.7424,  801.3755,
           801.3755],
         [ 805.7424,  818.8428,  818.8428,  ...,  805.7424,  801.3755,
           801.3755],
         [ 801.3755,  814.4760,  814.4760,  ...,  805.7424,  801.3755,
           801.3755]],

        [[ 913.1429,  908.6786,  908.6786,  ...,  252.4286,   38.1429,
             6.8929],
         [ 917.6071,  908.6786,  908.6786,  ...,  547.0714,  297.0714,
           114.0357],
         [ 922.0714,  908.6786,  908.6786,  ...,  614.0357,  524.7500,
           306.0000],
         ...,
         [ 895.2857,  895.2857,  895.2857,  ...,  895.2857,  890.8214,
           890.8214],
         [ 895.2857,  895.2857,  895.2857,  ...,  895.2857,  890.8214,
           890.8214],
         [ 890.8214,  890.8214,  890.8214,  ...,  895.2857,  890.8214,
           890.8214]],

        [[1131.5289, 1122.6400, 1122.6400,  ...,  375.9734,  135.9733,
            82.6400],
         [1131.5289, 1122.6400, 1122.6400,  ...,  695.9733,  415.9734,
           215.9733],
         [1131.5289, 1122.6400, 1122.6400,  ...,  767.0844,  651.5289,
           415.9734],
         ...,
         [1122.6400, 1122.6400, 1122.6400,  ..., 1122.6400, 1118.1956,
          1118.1956],
         [1122.6400, 1122.6400, 1122.6400,  ..., 1122.6400, 1118.1956,
          1118.1956],
         [1118.1956, 1118.1956, 1118.1956,  ..., 1122.6400, 1118.1956,
          1118.1956]]])


printing here the length of img_masked: 
 torch.Size([3, 80, 160])



printing here the target: 
 tensor([[ 0.0609, -0.0596,  0.9679],
        [ 0.0625, -0.0564,  0.9644],
        [ 0.0608, -0.0478,  0.9581],
        ...,
        [ 0.0134, -0.0774,  0.8359],
        [ 0.0240, -0.0831,  0.8377],
        [ 0.0198, -0.0800,  0.8356]])


printing here the length of target: 
 torch.Size([500, 3])



printing here the model_points: 
 tensor([[-0.0677,  0.0508,  0.0183],
        [-0.0656,  0.0548,  0.0205],
        [-0.0568,  0.0603,  0.0235],
        ...,
        [-0.0122,  0.0314,  0.1469],
        [-0.0237,  0.0352,  0.1475],
        [-0.0182,  0.0346,  0.1482]])


printing here the length of model_points: 
 torch.Size([500, 3])



LONGTENSOR:  84 






LONGTENSOR: tensor([84]) 



 tensor([[[ 687.8384,  692.2053,  700.9388,  ...,  622.3362,  666.0043,
           700.9388],
         [ 683.4716,  692.2053,  700.9388,  ...,  626.7031,  666.0043,
           700.9388],
         [ 692.2053,  696.5720,  700.9388,  ...,  626.7031,  666.0043,
           705.3057],
         ...,
         [ 364.6943,  259.8908,  478.2314,  ...,  801.3755,  801.3755,
           801.3755],
         [ 399.6288,  395.2620,  373.4279,  ...,  814.4760,  814.4760,
           814.4760],
         [ 447.6638,  460.7642,  399.6288,  ...,  823.2096,  818.8428,
           818.8428]],

        [[ 792.6071,  797.0714,  806.0000,  ...,  721.1786,  756.8929,
           783.6786],
         [ 788.1429,  797.0714,  806.0000,  ...,  725.6429,  756.8929,
           783.6786],
         [ 797.0714,  801.5357,  806.0000,  ...,  725.6429,  756.8929,
           788.1429],
         ...,
         [ 439.9286,  332.7857,  560.4642,  ...,  890.8214,  890.8214,
           890.8214],
         [ 466.7143,  466.7143,  444.3929,  ...,  904.2143,  904.2143,
           904.2143],
         [ 497.9643,  524.7500,  462.2500,  ...,  913.1429,  908.6786,
           908.6786]],

        [[1104.8622, 1109.3066, 1118.1956,  ..., 1011.5289, 1060.4177,
          1087.0845],
         [1100.4177, 1109.3066, 1118.1956,  ..., 1015.9733, 1060.4177,
          1087.0845],
         [1109.3066, 1113.7511, 1118.1956,  ..., 1015.9733, 1060.4177,
          1091.5289],
         ...,
         [ 584.8622,  478.1956,  704.8622,  ..., 1104.8622, 1113.7511,
          1113.7511],
         [ 620.4178,  620.4178,  598.1956,  ..., 1118.1956, 1127.0845,
          1127.0845],
         [ 669.3066,  691.5289,  629.3066,  ..., 1127.0845, 1131.5289,
          1131.5289]]])


printing here the length of img_masked: 
 torch.Size([3, 120, 200])



printing here the target: 
 tensor([[-0.0833,  0.0591,  0.8160],
        [ 0.1275,  0.1063,  0.7402],
        [ 0.1226,  0.0676,  0.8031],
        ...,
        [-0.0546, -0.0408,  0.7328],
        [-0.0258, -0.0402,  0.7308],
        [-0.0373, -0.0392,  0.7259]])


printing here the length of target: 
 torch.Size([500, 3])



printing here the model_points: 
 tensor([[-0.0327,  0.0821,  0.0196],
        [ 0.0735, -0.1206,  0.0207],
        [ 0.1165, -0.0605,  0.0255],
        ...,
        [-0.0313,  0.0459,  0.1478],
        [-0.0105,  0.0260,  0.1492],
        [-0.0224,  0.0296,  0.1502]])


printing here the length of model_points: 
 torch.Size([500, 3])



LONGTENSOR:  273 






LONGTENSOR: tensor([273]) 






***********************************ITERATION*******************************************



value of index here:

 112 





***********************************ITERATION*******************************************



value of index here:

 116 




here are the MODEL POINTS: 
 [[ 0.07461212 -0.1206924   0.0182516 ]
 [ 0.06377465 -0.1174764   0.02309399]
 [-0.04238787  0.07148254  0.02325758]
 ...
 [-0.00816682  0.03517992  0.146289  ]
 [-0.02626357  0.03261655  0.1475563 ]
 [-0.01684509  0.03600094  0.14965   ]]


printing here the cloud: 
 tensor([[-2.9876, -2.3429,  9.1460],
        [-2.9628, -2.3368,  9.1220],
        [-3.0299, -2.3408,  9.1710],
        ...,
        [-2.2186, -1.5991,  9.0270],
        [-2.0929, -1.5865,  8.9560],
        [-2.1708, -1.5864,  9.0030]])


printing here the length of cloud: 
 torch.Size([500, 3])



printing here the choose: 
 tensor([[ 2589,  2591,  2745,  2751,  2906,  2908,  2914,  3077,  3235,  3237,
          3395,  3404,  3546,  3565,  3717,  3719,  3721,  3723,  3862,  3880,
          4013,  4024,  4035,  4037,  4172,  4181,  4192,  4215,  4216,  4331,
          4340,  4355,  4372,  4374,  4500,  4511,  4516,  4525,  4526,  4670,
          4675,  4679,  4690,  4696,  4833,  4840,  4862,  4993,  4999,  5003,
          5009,  5138,  5144,  5145,  5159,  5161,  5170,  5177,  5305,  5316,
          5321,  5323,  5332,  5345,  5462,  5466,  5467,  5470,  5497,  5501,
          5506,  5616,  5631,  5674,  5768,  5781,  5816,  5824,  5941,  5969,
          5977,  6105,  6111,  6132,  6147,  6258,  6267,  6291,  6309,  6323,
          6324,  6415,  6417,  6425,  6453,  6457,  6462,  6470,  6477,  6478,
          6525,  6529,  6535,  6578,  6581,  6585,  6596,  6611,  6627,  6641,
          6647,  6648,  6735,  6781,  6786,  6801,  6809,  6848,  6849,  6851,
          6852,  6854,  6891,  6906,  6908,  6917,  6931,  6936,  6948,  6949,
          6956,  6957,  6974,  7079,  7089,  7116,  7120,  7128,  7135,  7165,
          7178,  7221,  7227,  7245,  7253,  7255,  7259,  7262,  7270,  7280,
          7293,  7298,  7330,  7340,  7384,  7388,  7396,  7405,  7450,  7530,
          7535,  7541,  7545,  7548,  7566,  7585,  7591,  7595,  7598,  7613,
          7618,  7645,  7696,  7715,  7736,  7744,  7748,  7760,  7762,  7767,
          7770,  7804,  7822,  7865,  7878,  7929,  7931,  7936,  7939,  7944,
          7948,  7973,  7990,  8064,  8079,  8085,  8090,  8125,  8128,  8136,
          8183,  8185,  8188,  8205,  8207,  8217,  8227,  8242,  8257,  8288,
          8292,  8293,  8312,  8339,  8340,  8348,  8373,  8374,  8377,  8385,
          8387,  8402,  8405,  8453,  8460,  8499,  8533,  8547,  8566,  8568,
          8571,  8590,  8608,  8610,  8611,  8630,  8668,  8683,  8714,  8728,
          8733,  8755,  8773,  8774,  8826,  8835,  8853,  8884,  8900,  8923,
          8928,  8931,  8949,  8997,  9003,  9016,  9017,  9021,  9023,  9036,
          9048,  9061,  9067,  9068,  9081,  9107,  9108,  9109,  9151,  9165,
          9166,  9169,  9173,  9197,  9211,  9213,  9217,  9221,  9239,  9268,
          9322,  9326,  9328,  9337,  9361,  9373,  9376,  9410,  9422,  9429,
          9466,  9490,  9499,  9504,  9507,  9513,  9520,  9524,  9529,  9530,
          9543,  9558,  9561,  9565,  9569,  9579,  9585,  9650,  9651,  9652,
          9661,  9696,  9705,  9740,  9805,  9806,  9811,  9813,  9824,  9861,
          9873,  9876,  9880,  9885,  9973,  9988,  9994, 10003, 10014, 10052,
         10064, 10068, 10122, 10123, 10146, 10149, 10154, 10173, 10186, 10192,
         10208, 10220, 10224, 10289, 10293, 10310, 10319, 10330, 10333, 10341,
         10357, 10365, 10388, 10450, 10454, 10471, 10477, 10510, 10516, 10517,
         10523, 10612, 10625, 10627, 10629, 10641, 10664, 10697, 10784, 10786,
         10789, 10794, 10800, 10803, 10837, 10948, 10957, 10958, 10962, 10970,
         10978, 10996, 11001, 11158, 11166, 11313, 11322, 11338, 11438, 11449,
         11454, 11456, 11491, 11492, 11493, 11604, 11618, 11629, 11638, 11647,
         11657, 11665, 11767, 11794, 11795, 11821, 11951, 11963, 11985, 11986,
         12095, 12096, 12106, 12110, 12247, 12248, 12255, 12264, 12302, 12411,
         12413, 12435, 12439, 12602, 12603, 12624, 12751, 12901, 12905, 12908,
         12915, 12934, 13062, 13063, 13069, 13081, 13089, 13100, 13226, 13227,
         13230, 13235, 13248, 13250, 13390, 13395, 13397, 13401, 13560, 13563,
         13564, 13580, 13715, 13730, 13732, 13868, 13886, 14027, 14061, 14192,
         14202, 14203, 14205, 14349, 14504, 14523, 14535, 14539, 14682, 14686,
         14826, 14830, 14851, 14856, 14858, 14993, 15004, 15163, 15164, 15176,
         15470, 15482, 15483, 15495, 15497, 15632, 15637, 15640, 15656, 15801,
         15802, 15947, 15967, 16117, 16118, 16120, 16133, 16276, 16289, 16441]])


printing here the length of choose: 
 torch.Size([1, 500])



printing here the img_masked: 
values of bounding box:  217 337 290 490
posemat:
 [[ 0.15787052 -0.98730744  0.0173471   0.08042467]
 [-0.00937977 -0.01906596 -0.99977423  0.14221442]
 [ 0.98741527  0.15767216 -0.01227067  0.70237691]
 [ 0.          0.          0.          1.        ]]
traget_r:
 [[ 0.15787052 -0.98730744  0.0173471 ]
 [-0.00937977 -0.01906596 -0.99977423]
 [ 0.98741527  0.15767216 -0.01227067]]
target_t:
 [0.08042467 0.14221442 0.70237691]
length of choose here:  4134
first:  NP1
second:  1
627.93334
self.cam_fx value:  1080.2331
self.cam_fy value:  1080.2312



***********************************ITERATION MID*******************************************





here are the MODEL POINTS: 
 [[-0.06181491  0.05870554  0.01992442]
 [-0.06284216  0.0567683   0.02167104]
 [-0.05574731  0.05986973  0.02839357]
 ...
 [-0.02513363  0.04922273  0.1442048 ]
 [-0.03200237  0.03331141  0.1456686 ]
 [-0.01817014  0.0258304   0.147688  ]]


printing here the cloud: 
 tensor([[-2.4178, -2.3442,  9.7690],
        [-2.3883, -2.3509,  9.7970],
        [-2.4540, -2.3351,  9.7690],
        ...,
        [-2.0238, -1.5298,  8.4300],
        [-2.4018, -1.7011,  9.4220],
        [-2.3669, -1.6924,  9.4220]])


printing here the length of cloud: 
 torch.Size([500, 3])



printing here the choose: 
 tensor([[ 1412,  1416,  1568,  1727,  1729,  1738,  1740,  1888,  2046,  2056,
          2059,  2065,  2209,  2362,  2393,  2428,  2520,  2526,  2544,  2596,
          2601,  2702,  2747,  2755,  2762,  2767,  2873,  2874,  2922,  2936,
          2942,  3010,  3023,  3026,  3028,  3029,  3068,  3069,  3092,  3114,
          3163,  3165,  3167,  3188,  3213,  3219,  3242,  3258,  3262,  3263,
          3267,  3269,  3278,  3291,  3293,  3320,  3337,  3344,  3370,  3376,
          3383,  3396,  3404,  3417,  3418,  3421,  3423,  3431,  3439,  3494,
          3503,  3584,  3599,  3604,  3608,  3609,  3611,  3619,  3632,  3637,
          3644,  3694,  3721,  3726,  3729,  3734,  3801,  3802,  3804,  3805,
          3808,  3827,  3828,  3831,  3832,  3862,  3875,  3888,  3900,  3911,
          3915,  3918,  3940,  3958,  3965,  3967,  3977,  3981,  4020,  4025,
          4044,  4060,  4083,  4089,  4090,  4110,  4140,  4141,  4148,  4196,
          4208,  4213,  4239,  4256,  4311,  4351,  4371,  4373,  4388,  4404,
          4409,  4438,  4444,  4451,  4466,  4468,  4506,  4508,  4515,  4539,
          4540,  4541,  4544,  4563,  4566,  4567,  4591,  4592,  4604,  4633,
          4649,  4655,  4677,  4682,  4688,  4692,  4716,  4719,  4742,  4743,
          4744,  4751,  4753,  4804,  4809,  4831,  4855,  4875,  4889,  4903,
          4908,  4909,  4937,  4942,  4954,  4984,  4994,  4999,  5035,  5036,
          5037,  5048,  5060,  5084,  5102,  5180,  5186,  5194,  5208,  5218,
          5220,  5243,  5256,  5262,  5267,  5307,  5314,  5319,  5325,  5329,
          5331,  5332,  5342,  5349,  5351,  5354,  5358,  5365,  5390,  5391,
          5398,  5431,  5453,  5481,  5494,  5499,  5500,  5534,  5542,  5548,
          5553,  5620,  5624,  5634,  5643,  5670,  5681,  5685,  5688,  5689,
          5710,  5743,  5754,  5780,  5796,  5800,  5817,  5827,  5829,  5834,
          5847,  5855,  5878,  5895,  5946,  5988,  5994,  5996,  6013,  6041,
          6112,  6123,  6141,  6143,  6145,  6149,  6162,  6165,  6181,  6199,
          6205,  6220,  6231,  6263,  6271,  6275,  6331,  6343,  6357,  6364,
          6378,  6387,  6394,  6411,  6414,  6463,  6485,  6493,  6540,  6544,
          6555,  6581,  6590,  6658,  6674,  6697,  6714,  6746,  6755,  6770,
          6786,  6816,  6819,  6820,  6826,  6828,  6850,  6899,  6901,  6913,
          6920,  6942,  6974,  6987,  7004,  7016,  7019,  7031,  7066,  7067,
          7073,  7086,  7105,  7106,  7126,  7159,  7166,  7177,  7187,  7188,
          7212,  7215,  7243,  7244,  7251,  7258,  7284,  7288,  7290,  7310,
          7314,  7351,  7385,  7399,  7430,  7434,  7437,  7443,  7460,  7469,
          7470,  7476,  7486,  7494,  7504,  7510,  7513,  7533,  7545,  7560,
          7565,  7566,  7570,  7595,  7598,  7599,  7611,  7622,  7636,  7647,
          7695,  7726,  7735,  7738,  7740,  7754,  7773,  7784,  7794,  7798,
          7811,  7833,  7862,  7867,  7886,  7913,  7914,  7926,  7962,  7973,
          7984,  7985,  7992,  8013,  8030,  8044,  8058,  8072,  8089,  8091,
          8103,  8123,  8138,  8201,  8203,  8210,  8278,  8283,  8286,  8301,
          8312,  8343,  8346,  8350,  8353,  8375,  8382,  8384,  8400,  8442,
          8465,  8472,  8501,  8504,  8510,  8525,  8543,  8544,  8564,  8588,
          8602,  8608,  8627,  8655,  8659,  8664,  8680,  8739,  8740,  8754,
          8768,  8823,  8828,  8837,  8846,  8848,  8854,  8868,  8894,  8899,
          8900,  8906,  8908,  8916,  8928,  8981,  8994,  9005,  9042,  9097,
          9101,  9108,  9109,  9114,  9137,  9156,  9163,  9180,  9186,  9248,
          9252,  9269,  9304,  9312,  9326,  9328,  9414,  9417,  9429,  9474,
          9583,  9722,  9724,  9751,  9902,  9905, 10199, 10218, 10221, 10372,
         10382, 10521, 10524, 10541, 10551, 10552, 10685, 10705, 10859, 10866,
         11005, 11027, 11029, 11162, 11182, 11329, 11487, 11500, 11644, 11808]])


printing here the length of choose: 
 torch.Size([1, 500])



printing here the img_masked: 
 tensor([[[ 827.5764,  827.5764,  827.5764,  ...,  460.7642,  517.5327,
           500.0655],
         [ 827.5764,  823.2096,  831.9432,  ...,  504.4323,  478.2314,
           482.5982],
         [ 827.5764,  823.2096,  831.9432,  ...,  521.8995,  548.1004,
           556.8340],
         ...,
         [ 797.0087,  797.0087,  792.6419,  ...,  792.6419,  792.6419,
           792.6419],
         [ 801.3755,  801.3755,  801.3755,  ...,  788.2751,  788.2751,
           788.2751],
         [ 801.3755,  801.3755,  805.7424,  ...,  788.2751,  788.2751,
           788.2751]],

        [[ 948.8571,  948.8571,  953.3214,  ...,  529.2142,  573.8572,
           547.0714],
         [ 948.8571,  944.3929,  957.7857,  ...,  569.3928,  529.2142,
           524.7500],
         [ 948.8571,  944.3929,  957.7857,  ...,  578.3214,  587.2500,
           596.1786],
         ...,
         [ 913.1429,  913.1429,  908.6786,  ...,  917.6071,  917.6071,
           917.6071],
         [ 917.6071,  917.6071,  917.6071,  ...,  913.1429,  913.1429,
           913.1429],
         [ 917.6071,  917.6071,  922.0714,  ...,  913.1429,  913.1429,
           913.1429]],

        [[1127.0845, 1127.0845, 1118.1956,  ...,  762.6400,  798.1956,
           753.7511],
         [1127.0845, 1122.6400, 1122.6400,  ...,  824.8622,  780.4178,
           753.7511],
         [1127.0845, 1122.6400, 1122.6400,  ...,  847.0844,  842.6400,
           824.8622],
         ...,
         [1118.1956, 1118.1956, 1113.7511,  ..., 1127.0845, 1127.0845,
          1127.0845],
         [1122.6400, 1122.6400, 1122.6400,  ..., 1122.6400, 1122.6400,
          1122.6400],
         [1122.6400, 1122.6400, 1127.0845,  ..., 1122.6400, 1122.6400,
          1122.6400]]])


printing here the length of img_masked: 
 torch.Size([3, 120, 160])



printing here the target: 
 tensor([[-0.1023, -0.1413,  0.9539],
        [-0.0912, -0.1435,  0.9491],
        [ 0.0912, -0.0265,  0.9501],
        ...,
        [ 0.0445, -0.0421,  0.8268],
        [ 0.0593, -0.0528,  0.8256],
        [ 0.0525, -0.0454,  0.8235]])


printing here the length of target: 
 torch.Size([500, 3])



printing here the model_points: 
 tensor([[ 0.0746, -0.1207,  0.0183],
        [ 0.0638, -0.1175,  0.0231],
        [-0.0424,  0.0715,  0.0233],
        ...,
        [-0.0082,  0.0352,  0.1463],
        [-0.0263,  0.0326,  0.1476],
        [-0.0168,  0.0360,  0.1496]])


printing here the length of model_points: 
 torch.Size([500, 3])



LONGTENSOR:  105 






LONGTENSOR: tensor([105]) 



 tensor([[[ 814.4760,  823.2096,  818.8428,  ...,  425.8297,  159.4541,
            -2.1179],
         [ 805.7424,  823.2096,  818.8428,  ...,  556.8340,  364.6943,
           150.7205],
         [ 805.7424,  823.2096,  818.8428,  ...,  504.4323,  526.2664,
           517.5327],
         ...,
         [ 801.3755,  818.8428,  818.8428,  ...,  810.1091,  810.1091,
           810.1091],
         [ 801.3755,  814.4760,  814.4760,  ...,  805.7424,  805.7424,
           805.7424],
         [ 801.3755,  814.4760,  814.4760,  ...,  805.7424,  805.7424,
           805.7424]],

        [[ 913.1429,  922.0714,  917.6071,  ...,  422.0714,  149.7500,
            -2.0357],
         [ 904.2143,  922.0714,  917.6071,  ...,  564.9285,  364.0357,
           149.7500],
         [ 904.2143,  922.0714,  917.6071,  ...,  529.2142,  551.5357,
           538.1428],
         ...,
         [ 886.3571,  895.2857,  895.2857,  ...,  899.7500,  899.7500,
           899.7500],
         [ 886.3571,  890.8214,  890.8214,  ...,  895.2857,  895.2857,
           895.2857],
         [ 886.3571,  890.8214,  890.8214,  ...,  895.2857,  895.2857,
           895.2857]],

        [[1131.5289, 1122.6400, 1118.1956,  ...,  540.4178,  224.8622,
            29.3067],
         [1122.6400, 1122.6400, 1118.1956,  ...,  713.7511,  469.3067,
           211.5289],
         [1122.6400, 1122.6400, 1118.1956,  ...,  709.3066,  687.0844,
           629.3066],
         ...,
         [1127.0845, 1122.6400, 1122.6400,  ..., 1127.0845, 1127.0845,
          1127.0845],
         [1127.0845, 1118.1956, 1118.1956,  ..., 1122.6400, 1122.6400,
          1122.6400],
         [1127.0845, 1118.1956, 1118.1956,  ..., 1122.6400, 1122.6400,
          1122.6400]]])


printing here the length of img_masked: 
 torch.Size([3, 80, 160])



printing here the target: 
 tensor([[ 0.0670, -0.0468,  0.9617],
        [ 0.0664, -0.0494,  0.9607],
        [ 0.0638, -0.0449,  0.9519],
        ...,
        [ 0.0383, -0.0715,  0.8374],
        [ 0.0320, -0.0872,  0.8413],
        [ 0.0169, -0.0839,  0.8374]])


printing here the length of target: 
 torch.Size([500, 3])



printing here the model_points: 
 tensor([[-0.0618,  0.0587,  0.0199],
        [-0.0628,  0.0568,  0.0217],
        [-0.0557,  0.0599,  0.0284],
        ...,
        [-0.0251,  0.0492,  0.1442],
        [-0.0320,  0.0333,  0.1457],
        [-0.0182,  0.0258,  0.1477]])


printing here the length of model_points: 
 torch.Size([500, 3])



LONGTENSOR:  87 






LONGTENSOR: tensor([87]) 






***********************************ITERATION*******************************************



value of index here:

 118 


values of bounding box:  195 315 269 429
posemat:
 [[ 0.10370494 -0.9943869   0.02097579  0.02900589]
 [-0.93387647 -0.10460752 -0.34195322  0.08209482]
 [ 0.34222803  0.01587344 -0.93948284  0.93425009]
 [ 0.          0.          0.          1.        ]]
traget_r:
 [[ 0.10370494 -0.9943869   0.02097579]
 [-0.93387647 -0.10460752 -0.34195322]
 [ 0.34222803  0.01587344 -0.93948284]]
target_t:
 [0.02900589 0.08209482 0.93425009]
length of choose here:  5646
first:  NP4
second:  4
637.6103
self.cam_fx value:  1077.2459
self.cam_fy value:  1077.2495



***********************************ITERATION MID*******************************************







out_img.size:  torch.Size([1, 32, 80, 160])
emb:::: torch.Size([1, 32, 12800])
choose.shape before:  torch.Size([1, 1, 500])
choose:  torch.Size([1, 32, 500])
emb after gather::  torch.Size([1, 32, 500])
pointcloud shape before transpose:  torch.Size([1, 500, 3])
pointcloud after transpose:  torch.Size([1, 3, 500])
PoseNetFeat: x shape after conv layer:  torch.Size([1, 64, 500])
PoseNetFeat: emb shape after conv layer:  torch.Size([1, 64, 500])
after concatenation shape of pointnet1:  torch.Size([1, 128, 500])
after concatenation shape of pointnet2:  torch.Size([1, 256, 500])
apx shape:  torch.Size([1, 1024, 1])



***********************************ITERATION*******************************************



value of index here:

 111 


apx shape after change:  torch.Size([1, 1024, 500])
final shape after concat of pointnetfeat_1 & pointnetfeat_2:  torch.Size([1, 1408, 500])
rx shape after 1st iteration:  torch.Size([1, 640, 500])
rx shape after 2nd iteration:  torch.Size([1, 256, 500])
rx shape after 3rd iteration:  torch.Size([1, 128, 500])
rx after shape change:  torch.Size([1, 1, 4, 500])
out__rx shape before contiguous:  torch.Size([1, 4, 500])
out__rx shape after contiguous:  torch.Size([1, 500, 4])
out__cx shape after contiguous:  torch.Size([1, 500, 1])
out__tx shape after contiguous:  torch.Size([1, 500, 3])


emb at the end:  torch.Size([1, 32, 500]) 

*****************ENTERING LOSS*************************


 bs & np vlaues: 1 500
***********************PRED VALUE*************** tensor([[[ 0.0456, -0.0103,  0.9597],
         [ 0.0451, -0.0129,  0.9589],
         [ 0.0421, -0.0091,  0.9498],
         ...,
         [ 0.0161, -0.0427,  0.8373],
         [ 0.0107, -0.0585,  0.8422],
         [-0.0045, -0.0561,  0.8384]],

        [[ 0.0471, -0.0216,  0.9594],
         [ 0.0466, -0.0242,  0.9585],
         [ 0.0436, -0.0202,  0.9496],
         ...,
         [ 0.0173, -0.0516,  0.8365],
         [ 0.0118, -0.0675,  0.8411],
         [-0.0034, -0.0650,  0.8374]],

        [[ 0.0484, -0.0053,  0.9594],
         [ 0.0480, -0.0080,  0.9586],
         [ 0.0449, -0.0043,  0.9496],
         ...,
         [ 0.0190, -0.0397,  0.8376],
         [ 0.0138, -0.0555,  0.8426],
         [-0.0015, -0.0533,  0.8389]],

        ...,

        [[ 0.0621, -0.0295,  0.9480],
         [ 0.0617, -0.0321,  0.9471],
         [ 0.0581, -0.0279,  0.9385],
         ...,
         [ 0.0287, -0.0559,  0.8253],
         [ 0.0243, -0.0723,  0.8293],
         [ 0.0088, -0.0704,  0.8264]],

        [[ 0.0700, -0.0176,  0.9525],
         [ 0.0697, -0.0202,  0.9515],
         [ 0.0659, -0.0158,  0.9430],
         ...,
         [ 0.0363, -0.0413,  0.8293],
         [ 0.0323, -0.0579,  0.8329],
         [ 0.0168, -0.0564,  0.8301]],

        [[ 0.0715, -0.0172,  0.9527],
         [ 0.0712, -0.0198,  0.9516],
         [ 0.0674, -0.0153,  0.9432],
         ...,
         [ 0.0375, -0.0391,  0.8292],
         [ 0.0336, -0.0557,  0.8326],
         [ 0.0180, -0.0542,  0.8299]]],
       device='cuda:0', grad_fn=<ThAddBackward>)
2019-06-04 03:23:52,157 : Test time 10h 11m 52s Test Frame No.101 dis:0.018221795558929443




out_img.size:  torch.Size([1, 32, 80, 160])
emb:::: torch.Size([1, 32, 12800])
choose.shape before:  torch.Size([1, 1, 500])
choose:  torch.Size([1, 32, 500])
emb after gather::  torch.Size([1, 32, 500])
pointcloud shape before transpose:  torch.Size([1, 500, 3])
pointcloud after transpose:  torch.Size([1, 3, 500])
PoseNetFeat: x shape after conv layer:  torch.Size([1, 64, 500])
PoseNetFeat: emb shape after conv layer:  torch.Size([1, 64, 500])
after concatenation shape of pointnet1:  torch.Size([1, 128, 500])
after concatenation shape of pointnet2:  torch.Size([1, 256, 500])
apx shape:  torch.Size([1, 1024, 1])
apx shape after change:  torch.Size([1, 1024, 500])
final shape after concat of pointnetfeat_1 & pointnetfeat_2:  torch.Size([1, 1408, 500])
rx shape after 1st iteration:  torch.Size([1, 640, 500])
rx shape after 2nd iteration:  torch.Size([1, 256, 500])
rx shape after 3rd iteration:  torch.Size([1, 128, 500])
rx after shape change:  torch.Size([1, 1, 4, 500])
out__rx shape before contiguous:  torch.Size([1, 4, 500])
out__rx shape after contiguous:  torch.Size([1, 500, 4])
out__cx shape after contiguous:  torch.Size([1, 500, 1])
out__tx shape after contiguous:  torch.Size([1, 500, 3])


emb at the end:  torch.Size([1, 32, 500]) 

*****************ENTERING LOSS*************************


 bs & np vlaues: 1 500
values of bounding box:  169 289 226 386
***********************PRED VALUE*************** tensor([[[ 0.0381, -0.0318,  0.9642],
         [ 0.0397, -0.0286,  0.9607],
         [ 0.0379, -0.0202,  0.9542],
         ...,
         [-0.0101, -0.0522,  0.8329],
         [ 0.0005, -0.0578,  0.8347],
         [-0.0037, -0.0547,  0.8326]],

        [[ 0.0408, -0.0196,  0.9640],
         [ 0.0423, -0.0165,  0.9603],
         [ 0.0403, -0.0083,  0.9536],
         ...,
         [-0.0072, -0.0453,  0.8335],
         [ 0.0035, -0.0507,  0.8354],
         [-0.0007, -0.0477,  0.8333]],

        [[ 0.0392, -0.0339,  0.9638],
         [ 0.0408, -0.0308,  0.9602],
         [ 0.0390, -0.0224,  0.9537],
         ...,
         [-0.0091, -0.0551,  0.8326],
         [ 0.0015, -0.0607,  0.8344],
         [-0.0027, -0.0576,  0.8323]],

        ...,

        [[ 0.0479, -0.0433,  0.9540],
         [ 0.0493, -0.0400,  0.9505],
         [ 0.0470, -0.0314,  0.9444],
         ...,
         [-0.0033, -0.0610,  0.8234],
         [ 0.0075, -0.0663,  0.8247],
         [ 0.0032, -0.0633,  0.8229]],

        [[ 0.0483, -0.0435,  0.9544],
         [ 0.0496, -0.0401,  0.9509],
         [ 0.0473, -0.0315,  0.9449],
         ...,
         [-0.0029, -0.0610,  0.8238],
         [ 0.0079, -0.0662,  0.8251],
         [ 0.0036, -0.0632,  0.8232]],

        [[ 0.0458, -0.0431,  0.9531],
         [ 0.0471, -0.0398,  0.9496],
         [ 0.0449, -0.0311,  0.9435],
         ...,
         [-0.0053, -0.0604,  0.8224],
         [ 0.0055, -0.0657,  0.8237],
         [ 0.0012, -0.0627,  0.8219]]],
       device='cuda:0', grad_fn=<ThAddBackward>)
2019-06-04 03:23:52,214 : Test time 10h 11m 52s Test Frame No.102 dis:0.021200885996222496
posemat:
 [[-0.03905805 -0.99781008  0.05338081 -0.01354825]
 [-0.78646899 -0.00225635 -0.61762564  0.04969016]
 [ 0.61639354 -0.06610561 -0.78465856  0.86887511]
 [ 0.          0.          0.          1.        ]]
traget_r:
 [[-0.03905805 -0.99781008  0.05338081]
 [-0.78646899 -0.00225635 -0.61762564]
 [ 0.61639354 -0.06610561 -0.78465856]]
target_t:
 [-0.01354825  0.04969016  0.86887511]
length of choose here:  5868
first:  NP3
second:  3
618.76531
self.cam_fx value:  1075.8584
self.cam_fy value:  1075.8538



***********************************ITERATION MID*******************************************





here are the MODEL POINTS: 
 [[ 0.1086309  -0.05209222  0.02597268]
 [ 0.04858606 -0.098057    0.02632656]
 [ 0.0474539  -0.09710649  0.02663081]
 ...
 [-0.02064496  0.03269647  0.1488188 ]
 [-0.02310877  0.03106364  0.1514572 ]
 [-0.02692893  0.03518011  0.1518892 ]]


printing here the cloud: 
 tensor([[-3.1302, -2.6527,  9.8250],
        [-3.0930, -2.6587,  9.8810],
        [-3.1485, -2.6345,  9.8250],
        ...,
        [-1.8908, -1.7227,  8.1120],
        [-2.4866, -1.6454,  7.7820],
        [-1.8014, -1.7159,  8.1510]])


printing here the length of cloud: 
 torch.Size([500, 3])



printing here the choose: 
 tensor([[ 1312,  1478,  1630,  1641,  1785,  1791,  1793,  1798,  1934,  1942,
          1944,  2094,  2258,  2404,  2419,  2422,  2439,  2441,  2586,  2589,
          2726,  2736,  2737,  2887,  2901,  2902,  2907,  3048,  3061,  3064,
          3065,  3216,  3224,  3366,  3383,  3389,  3392,  3525,  3526,  3539,
          3706,  3716,  3719,  3727,  3729,  3878,  3902,  3905,  3928,  3932,
          4016,  4026,  4032,  4040,  4047,  4057,  4065,  4084,  4098,  4123,
          4184,  4190,  4201,  4205,  4212,  4243,  4265,  4271,  4292,  4295,
          4301,  4325,  4380,  4389,  4400,  4435,  4438,  4462,  4467,  4483,
          4500,  4504,  4505,  4518,  4592,  4619,  4623,  4644,  4654,  4668,
          4671,  4684,  4704,  4705,  4709,  4722,  4733,  4740,  4741,  4830,
          4831,  4854,  4862,  4866,  4878,  4882,  4900,  4928,  5004,  5013,
          5017,  5038,  5061,  5069,  5076,  5085,  5098,  5099,  5108,  5125,
          5127,  5135,  5143,  5162,  5164,  5165,  5221,  5247,  5270,  5287,
          5288,  5289,  5321,  5325,  5327,  5379,  5389,  5422,  5469,  5475,
          5492,  5520,  5526,  5528,  5542,  5562,  5571,  5575,  5590,  5605,
          5660,  5665,  5669,  5671,  5674,  5693,  5699,  5717,  5719,  5724,
          5725,  5727,  5744,  5751,  5764,  5774,  5786,  5795,  5810,  5837,
          5849,  5851,  5855,  5863,  5871,  5875,  5909,  5915,  5935,  5943,
          5944,  5961,  5964,  5967,  5986,  6009,  6027,  6029,  6030,  6047,
          6082,  6083,  6114,  6126,  6137,  6141,  6172,  6186,  6199,  6208,
          6219,  6227,  6276,  6310,  6326,  6327,  6331,  6347,  6355,  6360,
          6365,  6405,  6416,  6425,  6427,  6449,  6453,  6460,  6469,  6474,
          6476,  6485,  6497,  6514,  6516,  6518,  6542,  6605,  6655,  6669,
          6677,  6687,  6708,  6710,  6718,  6745,  6746,  6765,  6779,  6797,
          6817,  6830,  6831,  6870,  6898,  6902,  6906,  6912,  6942,  6947,
          6948,  6951,  6962,  6963,  6977,  6981,  6991,  7011,  7022,  7023,
          7027,  7056,  7064,  7073,  7081,  7115,  7166,  7187,  7188,  7199,
          7220,  7249,  7268,  7276,  7331,  7347,  7349,  7380,  7381,  7382,
          7416,  7419,  7430,  7437,  7438,  7448,  7455,  7473,  7489,  7498,
          7519,  7549,  7561,  7573,  7599,  7602,  7603,  7650,  7665,  7667,
          7682,  7693,  7695,  7707,  7712,  7724,  7725,  7730,  7793,  7810,
          7867,  7869,  7879,  7891,  7899,  7910,  7931,  7950,  7966,  7978,
          7980,  7988,  7994,  7997,  8018,  8029,  8047,  8055,  8080,  8081,
          8101,  8148,  8158,  8179,  8185,  8193,  8202,  8209,  8219,  8227,
          8229,  8238,  8249,  8267,  8300,  8304,  8318,  8328,  8351,  8362,
          8410,  8433,  8483,  8484,  8496,  8497,  8504,  8511,  8515,  8520,
          8536,  8549,  8570,  8571,  8574,  8575,  8578,  8592,  8601,  8603,
          8611,  8627,  8634,  8656,  8660,  8685,  8686,  8697,  8706,  8762,
          8772,  8777,  8779,  8780,  8789,  8805,  8823,  8824,  8831,  8853,
          8854,  8858,  8862,  8864,  8911,  8912,  8979,  8986,  8988,  8998,
          9031,  9050,  9086,  9098,  9123,  9139,  9145,  9146,  9170,  9185,
          9201,  9204,  9210,  9212,  9218,  9227,  9231,  9244,  9261,  9276,
          9302,  9309,  9329,  9368,  9372,  9383,  9400,  9467,  9503,  9518,
          9551,  9603,  9631,  9676,  9691,  9693,  9712,  9764,  9783,  9784,
          9829,  9836,  9837,  9839,  9849,  9878,  9946,  9953,  9999, 10004,
         10052, 10071, 10169, 10172, 10175, 10201, 10202, 10209, 10212, 10230,
         10231, 10259, 10260, 10265, 10266, 10267, 10268, 10269, 10331, 10349,
         10352, 10494, 10498, 10520, 10540, 10548, 10584, 10587, 10690, 10698,
         10743, 10744, 10833, 10834, 10839, 10850, 10868, 10896, 10908, 10909,
         10991, 10997, 11058, 11167, 11172, 11173, 11225, 11324, 11391, 11657]])


printing here the length of choose: 
 torch.Size([1, 500])



printing here the img_masked: 
values of bounding box:  191 271 239 399
 tensor([[[ 823.2096,  823.2096,  823.2096,  ...,  792.6419,  792.6419,
           792.6419],
         [ 827.5764,  827.5764,  827.5764,  ...,  792.6419,  797.0087,
           797.0087],
         [ 827.5764,  827.5764,  827.5764,  ...,  797.0087,  797.0087,
           797.0087],
         ...,
         [ 823.2096,  823.2096,  818.8428,  ...,  792.6419,  792.6419,
           797.0087],
         [ 823.2096,  814.4760,  810.1091,  ...,  792.6419,  797.0087,
           801.3755],
         [ 823.2096,  823.2096,  823.2096,  ...,  792.6419,  797.0087,
           801.3755]],

        [[ 939.9286,  939.9286,  939.9286,  ...,  886.3571,  886.3571,
           886.3571],
         [ 944.3929,  944.3929,  944.3929,  ...,  886.3571,  890.8214,
           890.8214],
         [ 944.3929,  944.3929,  944.3929,  ...,  890.8214,  890.8214,
           890.8214],
         ...,
         [ 944.3929,  944.3929,  939.9286,  ...,  877.4286,  877.4286,
           881.8929],
         [ 944.3929,  935.4643,  931.0000,  ...,  877.4286,  881.8929,
           886.3571],
         [ 944.3929,  944.3929,  944.3929,  ...,  877.4286,  881.8929,
           886.3571]],

        [[1118.1956, 1118.1956, 1118.1956,  ..., 1113.7511, 1113.7511,
          1122.6400],
         [1122.6400, 1113.7511, 1122.6400,  ..., 1113.7511, 1118.1956,
          1118.1956],
         [1113.7511, 1113.7511, 1113.7511,  ..., 1118.1956, 1118.1956,
          1118.1956],
         ...,
         [1131.5289, 1131.5289, 1131.5289,  ..., 1118.1956, 1118.1956,
          1122.6400],
         [1131.5289, 1127.0845, 1122.6400,  ..., 1118.1956, 1122.6400,
          1127.0845],
         [1131.5289, 1131.5289, 1131.5289,  ..., 1118.1956, 1122.6400,
          1127.0845]]])


printing here the length of img_masked: 
 torch.Size([3, 80, 160])



printing here the target: 
 tensor([[ 0.0518,  0.0103,  0.8711],
        [ 0.0525,  0.0694,  0.8239],
        [ 0.0511,  0.0694,  0.8234],
        ...,
        [-0.0869, -0.0297,  0.7364],
        [-0.0869, -0.0290,  0.7325],
        [-0.0925, -0.0290,  0.7315]])


printing here the length of target: 
 torch.Size([500, 3])



printing here the model_points: 
posemat:
 tensor([[ 0.1086, -0.0521,  0.0260],
        [ 0.0486, -0.0981,  0.0263],
        [ 0.0475, -0.0971,  0.0266],
        ...,
        [-0.0206,  0.0327,  0.1488],
        [-0.0231,  0.0311,  0.1515],
        [-0.0269,  0.0352,  0.1519]])


printing here the length of model_points: 
 torch.Size([500, 3])



LONGTENSOR:  261 






LONGTENSOR: [[ 0.41605266 -0.90779516  0.05299172 -0.04129347]
 [-0.69919853 -0.35662091 -0.61963129  0.06377579]
 [ 0.58139625  0.22074752 -0.78310212  0.85566794]
 [ 0.          0.          0.          1.        ]] tensor([261]) 




traget_r:
 [[ 0.41605266 -0.90779516  0.05299172]
 [-0.69919853 -0.35662091 -0.61963129]
 [ 0.58139625  0.22074752 -0.78310212]]
target_t:
 [-0.04129347  0.06377579  0.85566794]
length of choose here:  6353
first:  NP3
second:  3
618.76531
self.cam_fx value:  1075.8584
self.cam_fy value:  1075.8538



***********************************ITERATION MID*******************************************





here are the MODEL POINTS: 
 [[ 0.06882181 -0.1224717   0.02638231]
 [ 0.1244508  -0.07543429  0.026757  ]
 [ 0.05300588 -0.1068158   0.02750496]
 ...
 [-0.02005036  0.03271338  0.1482131 ]
 [-0.02997303  0.04238731  0.1489464 ]
 [-0.01305903  0.02916848  0.1506552 ]]


printing here the cloud: 
 tensor([[-2.1955, -2.3714,  8.9330],
        [-2.2478, -2.3570,  8.9100],
        [-2.2147, -2.3570,  8.9100],
        ...,
        [-2.2386, -1.2784,  9.0740],
        [-2.2699, -1.2648,  9.0980],
        [-2.2301, -1.2615,  9.0740]])


printing here the length of cloud: 
 torch.Size([500, 3])



printing here the choose: 
 tensor([[ 1015,  1088,  1092,  1098,  1099,  1239,  1245,  1246,  1258,  1262,
          1312,  1316,  1319,  1332,  1399,  1401,  1407,  1411,  1416,  1424,
          1465,  1466,  1467,  1485,  1501,  1530,  1552,  1578,  1615,  1616,
          1617,  1621,  1623,  1654,  1696,  1705,  1712,  1776,  1779,  1788,
          1797,  1803,  1825,  1880,  1887,  1893,  1897,  1907,  1908,  1927,
          1929,  1932,  1941,  1956,  1973,  2023,  2030,  2031,  2034,  2048,
          2050,  2051,  2067,  2070,  2100,  2103,  2108,  2115,  2131,  2132,
          2133,  2141,  2177,  2195,  2209,  2264,  2273,  2274,  2285,  2290,
          2302,  2349,  2350,  2363,  2369,  2374,  2377,  2402,  2428,  2436,
          2447,  2453,  2482,  2483,  2484,  2486,  2505,  2511,  2537,  2544,
          2564,  2582,  2584,  2593,  2595,  2600,  2645,  2660,  2664,  2672,
          2676,  2680,  2696,  2698,  2702,  2707,  2710,  2729,  2752,  2754,
          2767,  2803,  2805,  2817,  2820,  2821,  2826,  2827,  2834,  2841,
          2848,  2852,  2853,  2856,  2862,  2885,  2887,  2908,  2916,  2921,
          2932,  2965,  2969,  2970,  2973,  3014,  3027,  3048,  3063,  3064,
          3067,  3072,  3075,  3086,  3153,  3185,  3215,  3238,  3258,  3261,
          3294,  3324,  3339,  3380,  3386,  3392,  3412,  3422,  3459,  3494,
          3527,  3528,  3530,  3544,  3548,  3563,  3571,  3575,  3621,  3634,
          3637,  3646,  3652,  3655,  3688,  3694,  3700,  3712,  3729,  3731,
          3732,  3868,  3880,  3893,  3931,  3944,  3957,  3960,  3971,  3976,
          4027,  4184,  4196,  4284,  4292,  4346,  4358,  4365,  4370,  4378,
          4522,  4528,  4533,  4587,  4597,  4608,  4668,  4669,  4680,  4690,
          4694,  4695,  4757,  4761,  4846,  4851,  4853,  4916,  4937,  5014,
          5068,  5077,  5080,  5083,  5162,  5178,  5230,  5233,  5252,  5254,
          5325,  5329,  5335,  5336,  5389,  5404,  5413,  5501,  5556,  5575,
          5649,  5652,  5658,  5659,  5708,  5709,  5793,  5815,  5817,  5822,
          5873,  5896,  5903,  5962,  5982,  6040,  6110,  6126,  6135,  6208,
          6210,  6212,  6273,  6280,  6288,  6291,  6355,  6443,  6507,  6512,
          6542,  6610,  6676,  6689,  6699,  6702,  6704,  6705,  6764,  6776,
          6862,  6934,  7021,  7025,  7086,  7087,  7088,  7101,  7177,  7186,
          7235,  7241,  7249,  7328,  7339,  7390,  7405,  7408,  7493,  7496,
          7497,  7505,  7550,  7576,  7628,  7630,  7636,  7649,  7663,  7724,
          7726,  7730,  7736,  7737,  7740,  7796,  7811,  7813,  7814,  7821,
          7824,  7889,  7890,  7895,  7907,  7963,  7968,  7970,  7979,  7981,
          8030,  8050,  8059,  8116,  8122,  8145,  8148,  8192,  8194,  8207,
          8209,  8218,  8220,  8230,  8283,  8287,  8289,  8350,  8353,  8362,
          8371,  8379,  8380,  8439,  8466,  8467,  8509,  8519,  8536,  8544,
          8547,  8594,  8606,  8608,  8612,  8629,  8690,  8752,  8777,  8782,
          8783,  8843,  8849,  8850,  8857,  8866,  8930,  8990,  9004,  9009,
          9019,  9030,  9032,  9072,  9074,  9082,  9091,  9151,  9168,  9173,
          9192,  9239,  9246,  9252,  9254,  9316,  9322,  9324,  9342,  9347,
          9351,  9352,  9391,  9415,  9479,  9485,  9504,  9505,  9511,  9551,
          9574,  9586,  9640,  9656,  9669,  9726,  9741,  9745,  9747,  9749,
          9797,  9810,  9816,  9874,  9885,  9886,  9891,  9959,  9962,  9964,
          9967,  9986, 10049, 10057, 10065, 10068, 10073, 10125, 10126, 10127,
         10144, 10205, 10294, 10297, 10301, 10367, 10374, 10381, 10389, 10391,
         10395, 10456, 10546, 10547, 10619, 10634, 10675, 10678, 10688, 10700,
         10705, 10767, 10851, 10856, 10874, 10918, 10940, 10952, 10997, 11008,
         11012, 11017, 11026, 11083, 11094, 11100, 11160, 11175, 11242, 11259,
         11260, 11261, 11347, 11349, 11485, 11502, 11573, 11734, 11891, 11895]])


printing here the length of choose: 
 torch.Size([1, 500])



printing here the img_masked: 
 tensor([[[ 277.3581,  670.3712,  971.6812,  ...,  849.4105,  849.4105,
           849.4105],
         [ 456.3974, 1019.7161,  893.0786,  ...,  845.0436,  845.0436,
           845.0436],
         [ 840.6768,  949.8472,  884.3450,  ...,  840.6768,  840.6768,
           840.6768],
         ...,
         [ 810.1091,  810.1091,  810.1091,  ...,  775.1747,  775.1747,
           775.1747],
         [ 814.4760,  814.4760,  814.4760,  ...,  775.1747,  775.1747,
           775.1747],
         [ 801.3755,  801.3755,  805.7424,  ...,  753.3406,  753.3406,
           753.3406]],

        [[ 359.5714,  761.3572, 1078.3214,  ...,  984.5714,  984.5714,
           984.5714],
         [ 542.6071, 1127.4286,  997.9643,  ...,  980.1071,  980.1071,
           980.1071],
         [ 944.3929, 1056.0000,  989.0357,  ...,  975.6429,  975.6429,
           975.6429],
         ...,
         [ 931.0000,  931.0000,  931.0000,  ...,  895.2857,  895.2857,
           895.2857],
         [ 935.4643,  935.4643,  935.4643,  ...,  895.2857,  895.2857,
           895.2857],
         [ 908.6786,  908.6786,  913.1429,  ...,  895.2857,  895.2857,
           895.2857]],

        [[ 491.5289,  891.5289, 1131.5289,  ..., 1127.0845, 1127.0845,
          1127.0845],
         [ 673.7511, 1131.5289, 1127.0845,  ..., 1122.6400, 1122.6400,
          1122.6400],
         [1073.7511, 1131.5289, 1118.1956,  ..., 1118.1956, 1118.1956,
          1118.1956],
         ...,
         [1122.6400, 1122.6400, 1122.6400,  ..., 1122.6400, 1122.6400,
          1122.6400],
         [1127.0845, 1127.0845, 1127.0845,  ..., 1122.6400, 1122.6400,
          1122.6400],
         [1127.0845, 1127.0845, 1131.5289,  ..., 1113.7511, 1113.7511,
          1113.7511]]])


printing here the length of img_masked: 
 torch.Size([3, 160, 80])



printing here the target: 
 tensor([[-0.0757,  0.1583,  0.9458],
        [-0.0037,  0.1473,  0.9455],
        [-0.0810,  0.1367,  0.9447],
        ...,
        [-0.0702, -0.0211,  0.8249],
        [-0.0736, -0.0345,  0.8242],
        [-0.0661, -0.0144,  0.8224]])


printing here the length of target: 
 torch.Size([500, 3])



printing here the model_points: 
 tensor([[ 0.0688, -0.1225,  0.0264],
        [ 0.1245, -0.0754,  0.0268],
        [ 0.0530, -0.1068,  0.0275],
        ...,
        [-0.0201,  0.0327,  0.1482],
        [-0.0300,  0.0424,  0.1489],
        [-0.0131,  0.0292,  0.1507]])


printing here the length of model_points: 
 torch.Size([500, 3])



LONGTENSOR:  345 






LONGTENSOR: tensor([345]) 






***********************************ITERATION*******************************************



value of index here:

 113 






out_img.size:  torch.Size([1, 32, 160, 80])
emb:::: torch.Size([1, 32, 12800])
choose.shape before:  torch.Size([1, 1, 500])
choose:  torch.Size([1, 32, 500])
emb after gather::  torch.Size([1, 32, 500])
pointcloud shape before transpose:  torch.Size([1, 500, 3])
pointcloud after transpose:  torch.Size([1, 3, 500])
PoseNetFeat: x shape after conv layer:  torch.Size([1, 64, 500])
PoseNetFeat: emb shape after conv layer:  torch.Size([1, 64, 500])
after concatenation shape of pointnet1:  torch.Size([1, 128, 500])
after concatenation shape of pointnet2:  torch.Size([1, 256, 500])
apx shape:  torch.Size([1, 1024, 1])
apx shape after change:  torch.Size([1, 1024, 500])
final shape after concat of pointnetfeat_1 & pointnetfeat_2:  torch.Size([1, 1408, 500])
rx shape after 1st iteration:  torch.Size([1, 640, 500])
rx shape after 2nd iteration:  torch.Size([1, 256, 500])
rx shape after 3rd iteration:  torch.Size([1, 128, 500])
rx after shape change:  torch.Size([1, 1, 4, 500])
out__rx shape before contiguous:  torch.Size([1, 4, 500])
out__rx shape after contiguous:  torch.Size([1, 500, 4])
out__cx shape after contiguous:  torch.Size([1, 500, 1])
out__tx shape after contiguous:  torch.Size([1, 500, 3])


emb at the end:  torch.Size([1, 32, 500]) 

*****************ENTERING LOSS*************************


 bs & np vlaues: 1 500
***********************PRED VALUE*************** tensor([[[-0.0839,  0.1747,  0.9205],
         [-0.0124,  0.1616,  0.9254],
         [-0.0899,  0.1534,  0.9228],
         ...,
         [-0.0804, -0.0224,  0.8312],
         [-0.0843, -0.0356,  0.8326],
         [-0.0759, -0.0163,  0.8279]],

        [[-0.0867,  0.1750,  0.9214],
         [-0.0150,  0.1626,  0.9254],
         [-0.0925,  0.1536,  0.9237],
         ...,
         [-0.0823, -0.0212,  0.8304],
         [-0.0861, -0.0345,  0.8318],
         [-0.0780, -0.0151,  0.8271]],

        [[-0.0853,  0.1748,  0.9214],
         [-0.0137,  0.1620,  0.9258],
         [-0.0912,  0.1534,  0.9236],
         ...,
         [-0.0812, -0.0216,  0.8306],
         [-0.0850, -0.0349,  0.8319],
         [-0.0768, -0.0155,  0.8273]],

        ...,

        [[-0.0853,  0.1808,  0.9573],
         [-0.0133,  0.1699,  0.9547],
         [-0.0906,  0.1592,  0.9561],
         ...,
         [-0.0833,  0.0033,  0.8336],
         [-0.0867, -0.0101,  0.8328],
         [-0.0793,  0.0100,  0.8311]],

        [[-0.0888,  0.1871,  0.9558],
         [-0.0168,  0.1764,  0.9531],
         [-0.0940,  0.1655,  0.9548],
         ...,
         [-0.0866,  0.0083,  0.8339],
         [-0.0900, -0.0052,  0.8333],
         [-0.0826,  0.0150,  0.8314]],

        [[-0.0860,  0.1869,  0.9587],
         [-0.0140,  0.1758,  0.9567],
         [-0.0913,  0.1653,  0.9574],
         ...,
         [-0.0834,  0.0095,  0.8347],
         [-0.0868, -0.0039,  0.8339],
         [-0.0793,  0.0162,  0.8323]]],
       device='cuda:0', grad_fn=<ThAddBackward>)
2019-06-04 03:23:52,572 : Test time 10h 11m 52s Test Frame No.103 dis:0.024788666516542435




out_img.size:  torch.Size([1, 32, 160, 160])
emb:::: torch.Size([1, 32, 25600])
choose.shape before:  torch.Size([1, 1, 500])
choose:  torch.Size([1, 32, 500])
emb after gather::  torch.Size([1, 32, 500])
pointcloud shape before transpose:  torch.Size([1, 500, 3])
pointcloud after transpose:  torch.Size([1, 3, 500])
PoseNetFeat: x shape after conv layer:  torch.Size([1, 64, 500])
PoseNetFeat: emb shape after conv layer:  torch.Size([1, 64, 500])
after concatenation shape of pointnet1:  torch.Size([1, 128, 500])
after concatenation shape of pointnet2:  torch.Size([1, 256, 500])
apx shape:  torch.Size([1, 1024, 1])
apx shape after change:  torch.Size([1, 1024, 500])
final shape after concat of pointnetfeat_1 & pointnetfeat_2:  torch.Size([1, 1408, 500])
rx shape after 1st iteration:  torch.Size([1, 640, 500])
rx shape after 2nd iteration:  torch.Size([1, 256, 500])
rx shape after 3rd iteration:  torch.Size([1, 128, 500])
rx after shape change:  torch.Size([1, 1, 4, 500])
out__rx shape before contiguous:  torch.Size([1, 4, 500])
out__rx shape after contiguous:  torch.Size([1, 500, 4])
out__cx shape after contiguous:  torch.Size([1, 500, 1])
out__tx shape after contiguous:  torch.Size([1, 500, 3])


emb at the end:  torch.Size([1, 32, 500]) 

*****************ENTERING LOSS*************************


 bs & np vlaues: 1 500
***********************PRED VALUE*************** tensor([[[-0.1160,  0.0337,  0.8567],
         [-0.1154,  0.0316,  0.8543],
         [-0.1021,  0.0299,  0.8571],
         ...,
         [-0.0740, -0.0518,  0.7578],
         [-0.0718, -0.0566,  0.7641],
         [-0.0823, -0.0559,  0.7596]],

        [[-0.1174,  0.0401,  0.8608],
         [-0.1167,  0.0380,  0.8583],
         [-0.1034,  0.0363,  0.8610],
         ...,
         [-0.0765, -0.0469,  0.7627],
         [-0.0742, -0.0515,  0.7690],
         [-0.0847, -0.0509,  0.7647]],

        [[-0.1166,  0.0422,  0.8608],
         [-0.1160,  0.0401,  0.8584],
         [-0.1027,  0.0385,  0.8611],
         ...,
         [-0.0757, -0.0449,  0.7628],
         [-0.0735, -0.0495,  0.7691],
         [-0.0840, -0.0489,  0.7648]],

        ...,

        [[-0.1284,  0.0259,  0.8667],
         [-0.1276,  0.0238,  0.8643],
         [-0.1143,  0.0228,  0.8670],
         ...,
         [-0.0836, -0.0598,  0.7692],
         [-0.0812, -0.0643,  0.7755],
         [-0.0917, -0.0641,  0.7712]],

        [[-0.1271,  0.0317,  0.8688],
         [-0.1264,  0.0296,  0.8663],
         [-0.1131,  0.0285,  0.8692],
         ...,
         [-0.0819, -0.0538,  0.7713],
         [-0.0795, -0.0584,  0.7776],
         [-0.0899, -0.0581,  0.7732]],

        [[-0.1262,  0.0382,  0.8705],
         [-0.1255,  0.0361,  0.8681],
         [-0.1122,  0.0350,  0.8710],
         ...,
         [-0.0804, -0.0476,  0.7736],
         [-0.0781, -0.0521,  0.7799],
         [-0.0885, -0.0518,  0.7754]]],
       device='cuda:0', grad_fn=<ThAddBackward>)
2019-06-04 03:23:52,622 : Test time 10h 11m 52s Test Frame No.104 dis:0.008225779980421066




out_img.size:  torch.Size([1, 32, 80, 160])
emb:::: torch.Size([1, 32, 12800])
choose.shape before:  torch.Size([1, 1, 500])
choose:  torch.Size([1, 32, 500])
emb after gather::  torch.Size([1, 32, 500])
pointcloud shape before transpose:  torch.Size([1, 500, 3])
pointcloud after transpose:  torch.Size([1, 3, 500])
PoseNetFeat: x shape after conv layer:  torch.Size([1, 64, 500])
PoseNetFeat: emb shape after conv layer:  torch.Size([1, 64, 500])
after concatenation shape of pointnet1:  torch.Size([1, 128, 500])
after concatenation shape of pointnet2:  torch.Size([1, 256, 500])
apx shape:  torch.Size([1, 1024, 1])
apx shape after change:  torch.Size([1, 1024, 500])
final shape after concat of pointnetfeat_1 & pointnetfeat_2:  torch.Size([1, 1408, 500])
rx shape after 1st iteration:  torch.Size([1, 640, 500])
rx shape after 2nd iteration:  torch.Size([1, 256, 500])
rx shape after 3rd iteration:  torch.Size([1, 128, 500])
rx after shape change:  torch.Size([1, 1, 4, 500])
out__rx shape before contiguous:  torch.Size([1, 4, 500])
out__rx shape after contiguous:  torch.Size([1, 500, 4])
out__cx shape after contiguous:  torch.Size([1, 500, 1])
out__tx shape after contiguous:  torch.Size([1, 500, 3])


emb at the end:  torch.Size([1, 32, 500]) 

*****************ENTERING LOSS*************************


 bs & np vlaues: 1 500
***********************PRED VALUE*************** tensor([[[ 0.1450,  0.0922,  0.9491],
         [-0.0716,  0.1066,  0.9263],
         [ 0.1496,  0.0891,  0.9485],
         ...,
         [-0.0116,  0.0379,  0.8199],
         [-0.0155,  0.0406,  0.8173],
         [-0.0245,  0.0399,  0.8150]],

        [[ 0.1471,  0.0973,  0.9432],
         [-0.0694,  0.1127,  0.9208],
         [ 0.1517,  0.0941,  0.9427],
         ...,
         [-0.0103,  0.0409,  0.8159],
         [-0.0141,  0.0435,  0.8133],
         [-0.0232,  0.0429,  0.8110]],

        [[ 0.1487,  0.0947,  0.9434],
         [-0.0677,  0.1130,  0.9219],
         [ 0.1532,  0.0915,  0.9428],
         ...,
         [-0.0098,  0.0425,  0.8155],
         [-0.0135,  0.0453,  0.8130],
         [-0.0226,  0.0447,  0.8107]],

        ...,

        [[ 0.1558,  0.1010,  0.9410],
         [-0.0586,  0.1341,  0.9172],
         [ 0.1601,  0.0975,  0.9405],
         ...,
         [-0.0048,  0.0586,  0.8121],
         [-0.0083,  0.0615,  0.8095],
         [-0.0173,  0.0616,  0.8072]],

        [[ 0.1562,  0.1010,  0.9412],
         [-0.0582,  0.1339,  0.9174],
         [ 0.1605,  0.0974,  0.9407],
         ...,
         [-0.0043,  0.0585,  0.8123],
         [-0.0079,  0.0615,  0.8097],
         [-0.0169,  0.0615,  0.8074]],

        [[ 0.1552,  0.0982,  0.9413],
         [-0.0601,  0.1260,  0.9188],
         [ 0.1595,  0.0948,  0.9408],
         ...,
         [-0.0049,  0.0527,  0.8129],
         [-0.0086,  0.0556,  0.8104],
         [-0.0176,  0.0555,  0.8081]]],
       device='cuda:0', grad_fn=<ThAddBackward>)
2019-06-04 03:23:52,653 : Test time 10h 11m 52s Test Frame No.105 dis:0.022978434339165688




out_img.size:  torch.Size([1, 32, 120, 200])
emb:::: torch.Size([1, 32, 24000])
choose.shape before:  torch.Size([1, 1, 500])
choose:  torch.Size([1, 32, 500])
emb after gather::  torch.Size([1, 32, 500])
pointcloud shape before transpose:  torch.Size([1, 500, 3])
pointcloud after transpose:  torch.Size([1, 3, 500])
PoseNetFeat: x shape after conv layer:  torch.Size([1, 64, 500])
PoseNetFeat: emb shape after conv layer:  torch.Size([1, 64, 500])
after concatenation shape of pointnet1:  torch.Size([1, 128, 500])
after concatenation shape of pointnet2:  torch.Size([1, 256, 500])
apx shape:  torch.Size([1, 1024, 1])
apx shape after change:  torch.Size([1, 1024, 500])
final shape after concat of pointnetfeat_1 & pointnetfeat_2:  torch.Size([1, 1408, 500])
rx shape after 1st iteration:  torch.Size([1, 640, 500])
rx shape after 2nd iteration:  torch.Size([1, 256, 500])
rx shape after 3rd iteration:  torch.Size([1, 128, 500])
rx after shape change:  torch.Size([1, 1, 4, 500])
out__rx shape before contiguous:  torch.Size([1, 4, 500])
out__rx shape after contiguous:  torch.Size([1, 500, 4])
out__cx shape after contiguous:  torch.Size([1, 500, 1])
out__tx shape after contiguous:  torch.Size([1, 500, 3])


emb at the end:  torch.Size([1, 32, 500]) 

*****************ENTERING LOSS*************************


 bs & np vlaues: 1 500
***********************PRED VALUE*************** tensor([[[-0.0827,  0.0643,  0.8119],
         [ 0.1277,  0.1287,  0.7491],
         [ 0.1231,  0.0788,  0.8035],
         ...,
         [-0.0512, -0.0176,  0.7116],
         [-0.0224, -0.0161,  0.7101],
         [-0.0339, -0.0144,  0.7054]],

        [[-0.0850,  0.0655,  0.8115],
         [ 0.1261,  0.1287,  0.7499],
         [ 0.1209,  0.0791,  0.8045],
         ...,
         [-0.0532, -0.0170,  0.7119],
         [-0.0244, -0.0156,  0.7106],
         [-0.0358, -0.0139,  0.7057]],

        [[-0.0855,  0.0662,  0.8111],
         [ 0.1263,  0.1282,  0.7504],
         [ 0.1205,  0.0788,  0.8053],
         ...,
         [-0.0535, -0.0169,  0.7120],
         [-0.0247, -0.0157,  0.7109],
         [-0.0360, -0.0140,  0.7060]],

        ...,

        [[-0.0824,  0.0744,  0.8227],
         [ 0.1329,  0.1346,  0.7734],
         [ 0.1239,  0.0832,  0.8260],
         ...,
         [-0.0477, -0.0054,  0.7219],
         [-0.0188, -0.0047,  0.7220],
         [-0.0299, -0.0025,  0.7167]],

        [[-0.0826,  0.0739,  0.8225],
         [ 0.1325,  0.1343,  0.7730],
         [ 0.1236,  0.0830,  0.8256],
         ...,
         [-0.0479, -0.0060,  0.7217],
         [-0.0191, -0.0052,  0.7218],
         [-0.0302, -0.0031,  0.7165]],

        [[-0.0834,  0.0737,  0.8230],
         [ 0.1315,  0.1348,  0.7732],
         [ 0.1229,  0.0834,  0.8258],
         ...,
         [-0.0485, -0.0059,  0.7220],
         [-0.0197, -0.0051,  0.7221],
         [-0.0308, -0.0030,  0.7168]]],
       device='cuda:0', grad_fn=<ThAddBackward>)
2019-06-04 03:23:52,699 : Test time 10h 11m 52s Test Frame No.106 dis:0.017223738133907318
values of bounding box:  221 341 294 454
posemat:
 [[-0.98634391 -0.16297246  0.02378375  0.09523605]
 [-0.02617967  0.01256922 -0.99957823  0.14141181]
 [ 0.16260478 -0.98655055 -0.01666414  0.80385798]
 [ 0.          0.          0.          1.        ]]
traget_r:
 [[-0.98634391 -0.16297246  0.02378375]
 [-0.02617967  0.01256922 -0.99957823]
 [ 0.16260478 -0.98655055 -0.01666414]]
target_t:
 [0.09523605 0.14141181 0.80385798]
length of choose here:  3483
first:  NP1
second:  1
627.93334
self.cam_fx value:  1080.2331
self.cam_fy value:  1080.2312



***********************************ITERATION MID*******************************************





here are the MODEL POINTS: 
 [[-0.05434047  0.05871203  0.03179659]
 [-0.05883951  0.05821729  0.03258337]
 [-0.03486333  0.07723329  0.03314228]
 ...
 [-0.02687953  0.02447884  0.1465833 ]
 [-0.01965633  0.04228972  0.1481471 ]
 [-0.02175867  0.02647508  0.1495155 ]]


printing here the cloud: 
 tensor([[-1.7431, -1.7015,  6.9500],
        [-1.7617, -1.6883,  6.9220],
        [-1.7553, -1.6754,  6.9220],
        ...,
        [-0.9957, -1.1761,  7.0790],
        [-0.9825, -1.1761,  7.0790],
        [-0.9779, -1.1653,  7.0930]])


printing here the length of cloud: 
 torch.Size([500, 3])



printing here the choose: 
 tensor([[ 3056,  3252,  3653,  3654,  4056,  4063,  4459,  4463,  4654,  4658,
          4661,  4662,  4860,  5461,  9247,  9250,  9253,  9257,  9454,  9461,
          9643,  9658,  9661, 10046, 10057, 10058, 10245, 10452, 10463, 10465,
         10468, 10479, 10482, 10652, 10658, 10659, 10660, 10664, 10676, 10681,
         10685, 10686, 10843, 10844, 10848, 10854, 10861, 11047, 11049, 11051,
         11058, 11070, 11071, 11072, 11073, 11075, 11087, 11279, 11289, 11414,
         11420, 11446, 11476, 11477, 11483, 11486, 11610, 11613, 11618, 11643,
         11655, 11656, 11657, 11676, 11685, 11698, 11811, 11841, 11875, 11877,
         11887, 11893, 11896, 11911, 11916, 12049, 12054, 12058, 12075, 12088,
         12095, 12100, 12115, 12249, 12257, 12265, 12266, 12267, 12276, 12300,
         12448, 12455, 12464, 12474, 12485, 12486, 12489, 12491, 12493, 12495,
         12497, 12511, 12527, 12668, 12678, 12697, 12709, 12723, 12868, 12871,
         12874, 12877, 12880, 12881, 12899, 12903, 12909, 12910, 12913, 13086,
         13105, 13108, 13119, 13129, 13142, 13177, 13253, 13297, 13305, 13327,
         13347, 13358, 13365, 13370, 13376, 13380, 13447, 13452, 13466, 13475,
         13497, 13500, 13506, 13509, 13532, 13535, 13538, 13546, 13552, 13555,
         13566, 13568, 13577, 13647, 13651, 13659, 13678, 13682, 13684, 13687,
         13701, 13709, 13710, 13729, 13739, 13746, 13757, 13758, 13776, 13849,
         13854, 13905, 13906, 13910, 13912, 13916, 13928, 13938, 13948, 13949,
         13951, 13952, 13956, 13971, 13980, 14052, 14053, 14055, 14069, 14071,
         14079, 14084, 14105, 14106, 14118, 14119, 14131, 14136, 14145, 14154,
         14155, 14166, 14253, 14257, 14287, 14294, 14303, 14342, 14349, 14359,
         14361, 14368, 14374, 14384, 14460, 14463, 14466, 14467, 14475, 14483,
         14495, 14506, 14510, 14515, 14527, 14531, 14536, 14547, 14552, 14586,
         14649, 14668, 14687, 14698, 14712, 14726, 14728, 14732, 14769, 14849,
         14850, 14857, 14859, 14866, 14891, 14937, 14938, 14942, 14946, 14961,
         14962, 14979, 15088, 15089, 15103, 15110, 15115, 15146, 15152, 15161,
         15245, 15247, 15250, 15269, 15271, 15284, 15297, 15313, 15316, 15330,
         15370, 15374, 15375, 15451, 15454, 15455, 15460, 15463, 15480, 15493,
         15494, 15497, 15499, 15507, 15509, 15524, 15527, 15590, 15655, 15673,
         15692, 15712, 15731, 15735, 15754, 15756, 15763, 15775, 15782, 15783,
         15859, 15867, 15870, 15871, 15880, 15888, 15893, 15910, 15932, 15937,
         15967, 15983, 15988, 16045, 16083, 16092, 16104, 16105, 16127, 16140,
         16152, 16174, 16181, 16190, 16278, 16282, 16298, 16314, 16329, 16336,
         16339, 16360, 16373, 16385, 16445, 16469, 16471, 16478, 16479, 16483,
         16485, 16499, 16513, 16514, 16516, 16529, 16535, 16536, 16550, 16567,
         16578, 16579, 16580, 16674, 16695, 16696, 16699, 16703, 16705, 16732,
         16749, 16751, 16755, 16760, 16778, 16786, 16896, 16918, 16922, 16927,
         16929, 16940, 16951, 16966, 16976, 16985, 16990, 17086, 17122, 17137,
         17146, 17150, 17151, 17154, 17178, 17179, 17189, 17224, 17225, 17286,
         17291, 17297, 17304, 17308, 17315, 17316, 17317, 17331, 17350, 17353,
         17357, 17361, 17371, 17378, 17424, 17425, 17504, 17505, 17506, 17515,
         17541, 17548, 17553, 17560, 17621, 17692, 17729, 17733, 17734, 17763,
         17767, 17782, 17908, 17911, 17913, 17924, 17925, 17938, 17955, 17962,
         17963, 17968, 17981, 17985, 17987, 18018, 18124, 18137, 18150, 18157,
         18158, 18170, 18171, 18173, 18190, 18325, 18327, 18340, 18343, 18363,
         18420, 18523, 18544, 18546, 18549, 18553, 18555, 18561, 18564, 18738,
         18767, 18769, 18777, 18782, 18817, 18818, 18847, 18946, 18954, 18976,
         18981, 18988, 19050, 19351, 19359, 19373, 19378, 19415, 19450, 19581,
         19616, 19762, 19784, 19960, 19967, 19969, 20174, 20175, 20177, 20578]])


printing here the length of choose: 
 torch.Size([1, 500])



printing here the img_masked: 
 tensor([[[ 727.1397,  727.1397,  727.1397,  ...,  617.9694,  635.4366,
           709.6725],
         [ 727.1397,  727.1397,  727.1397,  ...,  604.8690,  631.0699,
           740.2402],
         [ 727.1397,  727.1397,  727.1397,  ...,  617.9694,  644.1703,
           748.9738],
         ...,
         [ 801.3755,  801.3755,  805.7424,  ...,  801.3755,  818.8428,
           827.5764],
         [ 797.0087,  805.7424,  810.1091,  ...,  805.7424,  818.8428,
           827.5764],
         [ 797.0087,  805.7424,  810.1091,  ...,  805.7424,  818.8428,
           827.5764]],

        [[ 855.1071,  855.1071,  855.1071,  ...,  725.6429,  743.5000,
           814.9286],
         [ 855.1071,  855.1071,  855.1071,  ...,  712.2500,  739.0357,
           846.1786],
         [ 855.1071,  855.1071,  855.1071,  ...,  725.6429,  752.4286,
           855.1071],
         ...,
         [ 939.9286,  939.9286,  944.3929,  ...,  922.0714,  931.0000,
           931.0000],
         [ 935.4643,  944.3929,  948.8571,  ...,  926.5357,  935.4643,
           931.0000],
         [ 935.4643,  944.3929,  948.8571,  ...,  926.5357,  935.4643,
           931.0000]],

        [[1104.8622, 1104.8622, 1104.8622,  ...,  975.9733,  984.8622,
          1047.0845],
         [1104.8622, 1104.8622, 1104.8622,  ...,  962.6400,  980.4178,
          1078.1956],
         [1104.8622, 1104.8622, 1104.8622,  ...,  975.9733,  993.7511,
          1087.0845],
         ...,
         [1127.0845, 1127.0845, 1131.5289,  ..., 1104.8622, 1118.1956,
          1118.1956],
         [1122.6400, 1131.5289, 1131.5289,  ..., 1104.8622, 1113.7511,
          1113.7511],
         [1122.6400, 1131.5289, 1131.5289,  ..., 1104.8622, 1113.7511,
          1113.7511]]])


printing here the length of img_masked: 
 torch.Size([3, 120, 200])



printing here the target: 
 tensor([[-0.0156,  0.1090,  0.6694],
        [-0.0171,  0.1082,  0.6652],
        [-0.0233,  0.1072,  0.6951],
        ...,
        [ 0.0293, -0.0051,  0.6774],
        [ 0.0167, -0.0071,  0.6918],
        [ 0.0299, -0.0081,  0.6828]])


printing here the length of target: 
 torch.Size([500, 3])



printing here the model_points: 
 tensor([[-0.0543,  0.0587,  0.0318],
        [-0.0588,  0.0582,  0.0326],
        [-0.0349,  0.0772,  0.0331],
        ...,
        [-0.0269,  0.0245,  0.1466],
        [-0.0197,  0.0423,  0.1481],
        [-0.0218,  0.0265,  0.1495]])


printing here the length of model_points: 
 torch.Size([500, 3])



LONGTENSOR:  249 






LONGTENSOR: tensor([249]) 





here are the MODEL POINTS: 
 [[-0.04241945  0.07080877  0.02205676]
 [ 0.06320886 -0.1166819   0.02506276]
 [-0.04555519  0.06494483  0.02503739]
 ...
 [-0.02512251  0.0319829   0.1469847 ]
 [-0.01680596  0.03078675  0.1483545 ]
 [-0.01799497  0.03853674  0.1496695 ]]


printing here the cloud: 
 tensor([[-2.1577, -2.2298,  8.7510],
        [-2.4934, -2.5015,  9.8530],
        [-2.1821, -2.2217,  8.7510],
        ...,
        [-2.7569, -1.3335,  8.3280],
        [-2.7811, -1.3226,  8.3080],
        [-2.7646, -1.3258,  8.3280]])


printing here the length of cloud: 
 torch.Size([500, 3])



printing here the choose: 
 tensor([[ 1405,  1558,  1562,  1566,  1712,  1718,  1882,  2198,  2201,  2366,
          2368,  2513,  2523,  2527,  2529,  2824,  2987,  3000,  3003,  3008,
          3142,  3153,  3154,  3157,  3160,  3172,  3300,  3302,  3312,  3326,
          3459,  3462,  3464,  3472,  3473,  3476,  3490,  3494,  3644,  3656,
          3803,  3812,  3815,  3952,  3977,  4106,  4113,  4130,  4283,  4284,
          4287,  4297,  4420,  4433,  4594,  4600,  4610,  4765,  4905,  4911,
          4920,  4926,  5062,  5244,  5552,  5556,  5699,  5704,  5714,  5725,
          5726,  5879,  5880,  5881,  6028,  6034,  6065,  6174,  6178,  6185,
          6336,  6354,  6356,  6491,  6493,  6510,  6517,  6548,  6651,  6652,
          6662,  6669,  6701,  6703,  6708,  6806,  6825,  6832,  6858,  6859,
          6860,  6964,  6965,  6984,  7024,  7116,  7125,  7135,  7150,  7153,
          7179,  7180,  7187,  7292,  7308,  7341,  7345,  7351,  7439,  7479,
          7505,  7592,  7612,  7615,  7620,  7648,  7665,  7673,  7748,  7759,
          7789,  7790,  7791,  7802,  7821,  7830,  7923,  7941,  7987,  7990,
          7994,  8072,  8086,  8118,  8120,  8138,  8143,  8216,  8219,  8221,
          8223,  8233,  8243,  8248,  8263,  8265,  8281,  8282,  8304,  8384,
          8387,  8390,  8394,  8395,  8400,  8401,  8428,  8431,  8435,  8439,
          8449,  8455,  8457,  8463,  8541,  8542,  8574,  8605,  8611,  8689,
          8701,  8704,  8748,  8752,  8759,  8767,  8788,  8850,  8853,  8854,
          8900,  8909,  8919,  8929,  8946,  8955,  9005,  9010,  9016,  9023,
          9042,  9054,  9081,  9161,  9166,  9168,  9183,  9206,  9250,  9258,
          9274,  9319,  9321,  9325,  9337,  9355,  9368,  9374,  9394,  9407,
          9415,  9512,  9523,  9528,  9540,  9546,  9552,  9555,  9558,  9637,
          9657,  9662,  9702,  9711,  9718,  9727,  9816,  9847,  9882,  9899,
          9977,  9980,  9981,  9987,  9989, 10005, 10044, 10046, 10055, 10061,
         10112, 10138, 10151, 10162, 10173, 10181, 10191, 10215, 10220, 10264,
         10279, 10303, 10342, 10345, 10372, 10378, 10423, 10434, 10459, 10462,
         10463, 10477, 10482, 10507, 10542, 10582, 10585, 10599, 10601, 10612,
         10638, 10642, 10698, 10702, 10740, 10753, 10757, 10765, 10776, 10797,
         10798, 10800, 10826, 10909, 10912, 10931, 10940, 10970, 10977, 11009,
         11020, 11053, 11061, 11080, 11084, 11104, 11105, 11115, 11130, 11167,
         11221, 11235, 11238, 11245, 11263, 11297, 11302, 11331, 11370, 11378,
         11435, 11439, 11441, 11450, 11456, 11461, 11536, 11548, 11558, 11591,
         11653, 11694, 11697, 11699, 11710, 11727, 11738, 11747, 11751, 11764,
         11854, 11868, 11872, 11891, 11915, 11916, 11928, 12034, 12045, 12056,
         12057, 12064, 12068, 12084, 12167, 12185, 12198, 12215, 12217, 12226,
         12242, 12327, 12370, 12372, 12378, 12521, 12526, 12529, 12544, 12566,
         12646, 12649, 12675, 12682, 12684, 12813, 12836, 12841, 12849, 12851,
         12857, 12871, 12964, 12965, 12985, 13005, 13017, 13023, 13041, 13129,
         13132, 13140, 13152, 13290, 13291, 13307, 13322, 13355, 13360, 13451,
         13460, 13462, 13468, 13482, 13503, 13508, 13509, 13514, 13515, 13605,
         13615, 13648, 13659, 13668, 13788, 13822, 13826, 13832, 13833, 13925,
         13928, 13945, 13967, 13973, 14085, 14089, 14104, 14116, 14129, 14142,
         14144, 14263, 14266, 14276, 14306, 14437, 14569, 14571, 14591, 14727,
         14780, 14898, 14901, 14934, 14942, 15058, 15061, 15075, 15091, 15092,
         15098, 15251, 15258, 15394, 15398, 15416, 15541, 15556, 15564, 15567,
         15577, 15702, 15718, 15732, 15855, 15858, 15873, 15875, 16016, 16032,
         16035, 16036, 16039, 16177, 16185, 16196, 16197, 16203, 16365, 16367,
         16497, 16502, 16503, 16506, 16658, 16660, 16820, 16826, 16833, 16844,
         16980, 16985, 17459, 17461, 17468, 17620, 17621, 17634, 17790, 17793]])


printing here the length of choose: 
 torch.Size([1, 500])



printing here the img_masked: 


here are the MODEL POINTS: 
 [[ 0.1239796  -0.08425044  0.01871774]
 [ 0.1067532  -0.04943354  0.02693229]
 [ 0.09953663 -0.04394377  0.02787626]
 ...
 [-0.03273232  0.04814281  0.1444236 ]
 [-0.02079063  0.03273392  0.1482113 ]
 [-0.0163336   0.03525317  0.1513597 ]]


printing here the cloud: 
 tensor([[-2.7122, -2.6650,  9.6060],
        [-2.6408, -2.6472,  9.6060],
        [-2.6703, -2.6234,  9.5520],
        ...,
        [-2.4339, -1.1530,  7.3190],
        [-2.4852, -1.1510,  7.3500],
        [-2.4407, -1.1462,  7.3190]])


printing here the length of cloud: 
 torch.Size([500, 3])



printing here the choose: 
 tensor([[ 2502,  2830,  2985,  3143,  3314,  3458,  3461,  3475,  3479,  3618,
          3635,  3788,  3794,  3928,  3935,  4088,  4124,  4246,  4247,  4406,
          4415,  4425,  4430,  4446,  4723,  4747,  4770,  4884,  4889,  4907,
          4909,  4912,  4913,  4914,  4924,  5091,  5222,  5225,  5230,  5235,
          5245,  5249,  5388,  5400,  5525,  5531,  5553,  5554,  5556,  5571,
          5686,  5722,  5727,  5732,  5859,  5864,  5872,  5876,  5893,  5897,
          6049,  6178,  6184,  6212,  6214,  6329,  6342,  6353,  6356,  6359,
          6491,  6545,  6548,  6660,  6668,  6670,  6708,  6820,  6836,  6867,
          6996,  7010,  7012,  7016,  7133,  7152,  7164,  7172,  7191,  7192,
          7285,  7293,  7311,  7319,  7444,  7489,  7490,  7494,  7503,  7639,
          7641,  7652,  7665,  7667,  7669,  7671,  7769,  7792,  7804,  7806,
          7819,  7922,  7952,  7954,  7957,  7958,  7962,  7982,  7984,  7987,
          8092,  8245,  8251,  8282,  8300,  8411,  8412,  8427,  8462,  8560,
          8563,  8720,  8729,  8761,  8764,  8766,  8769,  8776,  8778,  8874,
          8878,  8879,  8907,  8921,  9059,  9068,  9075,  9076,  9084,  9193,
          9206,  9224,  9236,  9239,  9247,  9266,  9350,  9360,  9396,  9543,
          9549,  9561,  9576,  9706,  9713,  9730,  9731,  9735,  9746,  9871,
          9899,  9986, 10052, 10061, 10065, 10153, 10172, 10175, 10177, 10214,
         10307, 10311, 10358, 10371, 10462, 10623, 10656, 10669, 10781, 10784,
         10785, 10791, 10792, 10839, 10841, 10860, 10941, 10968, 11000, 11104,
         11126, 11136, 11150, 11158, 11258, 11299, 11427, 11451, 11465, 11573,
         11602, 11603, 11615, 11735, 11768, 11770, 11783, 11784, 11893, 11925,
         12052, 12056, 12062, 12080, 12090, 12100, 12215, 12246, 12372, 12406,
         12529, 12536, 12558, 12562, 12569, 12586, 12687, 12713, 12714, 12724,
         12872, 12881, 12884, 12891, 13004, 13042, 13045, 13048, 13059, 13213,
         13216, 13218, 13322, 13328, 13354, 13362, 13372, 13378, 13640, 13669,
         13684, 13689, 13693, 13700, 13797, 13817, 13826, 13829, 13844, 13854,
         13961, 13972, 13998, 14112, 14116, 14158, 14176, 14177, 14276, 14279,
         14283, 14314, 14434, 14449, 14460, 14461, 14480, 14495, 14605, 14627,
         14641, 14644, 14754, 14780, 14789, 14792, 14793, 14801, 14808, 14810,
         14812, 14919, 14943, 14953, 15073, 15100, 15102, 15109, 15122, 15224,
         15270, 15272, 15277, 15545, 15572, 15579, 15599, 15606, 15608, 15754,
         15862, 15867, 15873, 15881, 15903, 15919, 15920, 16024, 16083, 16180,
         16182, 16186, 16197, 16342, 16343, 16354, 16374, 16505, 16512, 16514,
         16541, 16561, 16654, 16655, 16660, 16710, 16720, 16816, 16851, 16882,
         16974, 16980, 16981, 16985, 17014, 17035, 17040, 17149, 17165, 17178,
         17189, 17196, 17296, 17298, 17335, 17347, 17457, 17506, 17618, 17620,
         17648, 17816, 17836, 17957, 17965, 17978, 17981, 17994, 18094, 18095,
         18100, 18139, 18145, 18255, 18259, 18279, 18289, 18302, 18309, 18312,
         18410, 18419, 18451, 18455, 18457, 18470, 18472, 18583, 18604, 18607,
         18608, 18611, 18634, 18733, 18734, 18740, 18780, 18782, 18786, 18790,
         18791, 18794, 18916, 18918, 18943, 18948, 19049, 19058, 19069, 19073,
         19241, 19243, 19250, 19270, 19376, 19392, 19394, 19422, 19425, 19539,
         19546, 19562, 19708, 19710, 19711, 19718, 19729, 19870, 19882, 19886,
         19907, 20028, 20031, 20038, 20059, 20200, 20214, 20219, 20344, 20348,
         20378, 20386, 20495, 20529, 20538, 20541, 20666, 20679, 20827, 20855,
         20860, 20983, 20997, 21004, 21018, 21147, 21149, 21152, 21154, 21160,
         21168, 21170, 21305, 21324, 21467, 21473, 21479, 21498, 21638, 21645,
         21654, 21656, 21955, 21962, 21965, 21967, 22124, 22130, 22133, 22135,
         22137, 22275, 22442, 22762, 22769, 23082, 23083, 23088, 23242, 23247]])


printing here the length of choose: 
 torch.Size([1, 500])



printing here the img_masked: 
 tensor([[[ 805.7424,  810.1091,  810.1091,  ...,  744.6070,  897.4454,
           814.4760],
         [ 805.7424,  814.4760,  818.8428,  ...,  845.0436,  888.7118,
           866.8777],
         [ 805.7424,  823.2096,  823.2096,  ...,  901.8122,  814.4760,
           840.6768],
         ...,
         [ 814.4760,  810.1091,  810.1091,  ...,  797.0087,  797.0087,
           797.0087],
         [ 810.1091,  814.4760,  814.4760,  ...,  797.0087,  797.0087,
           792.6419],
         [ 810.1091,  814.4760,  814.4760,  ...,  797.0087,  792.6419,
           792.6419]],

        [[ 904.2143,  908.6786,  908.6786,  ...,  841.7143, 1006.8929,
           931.0000],
         [ 904.2143,  913.1429,  917.6071,  ...,  944.3929,  997.9643,
           984.5714],
         [ 904.2143,  922.0714,  922.0714,  ..., 1002.4286,  922.0714,
           957.7857],
         ...,
         [ 890.8214,  886.3571,  886.3571,  ...,  881.8929,  881.8929,
           881.8929],
         [ 886.3571,  890.8214,  890.8214,  ...,  881.8929,  881.8929,
           877.4286],
         [ 886.3571,  890.8214,  890.8214,  ...,  881.8929,  877.4286,
           877.4286]],

        [[1113.7511, 1118.1956, 1118.1956,  ..., 1015.9733, 1131.5289,
          1091.5289],
         [1113.7511, 1122.6400, 1127.0845,  ..., 1118.1956, 1131.5289,
          1131.5289],
         [1113.7511, 1131.5289, 1131.5289,  ..., 1131.5289, 1082.6400,
          1118.1956],
         ...,
         [1122.6400, 1118.1956, 1118.1956,  ..., 1122.6400, 1122.6400,
          1122.6400],
         [1118.1956, 1122.6400, 1122.6400,  ..., 1122.6400, 1122.6400,
          1118.1956],
         [1118.1956, 1122.6400, 1122.6400,  ..., 1122.6400, 1118.1956,
          1118.1956]]])


printing here the length of img_masked: 
 torch.Size([3, 120, 160])



printing here the target: 
 tensor([[ 0.0251, -0.0575,  0.9622],
        [-0.1832, -0.0108,  0.9348],
        [ 0.0204, -0.0629,  0.9608],
        ...,
        [-0.0129, -0.0947,  0.8414],
        [-0.0161, -0.0880,  0.8373],
        [-0.0083, -0.0875,  0.8360]])


printing here the length of target: 
 torch.Size([500, 3])



printing here the model_points: 
 tensor([[-0.0424,  0.0708,  0.0221],
        [ 0.0632, -0.1167,  0.0251],
        [-0.0456,  0.0649,  0.0250],
        ...,
        [-0.0251,  0.0320,  0.1470],
        [-0.0168,  0.0308,  0.1484],
        [-0.0180,  0.0385,  0.1497]])


printing here the length of model_points: 
 torch.Size([500, 3])



LONGTENSOR:  57 






LONGTENSOR: tensor([57]) 



 tensor([[[ 783.9083,  788.2751,  788.2751,  ...,  818.8428,  805.7424,
           805.7424],
         [ 788.2751,  788.2751,  788.2751,  ...,  836.3101,  831.9432,
           827.5764],
         [ 788.2751,  788.2751,  792.6419,  ...,  831.9432,  836.3101,
           831.9432],
         ...,
         [ 797.0087,  805.7424,  810.1091,  ...,  783.9083,  779.5415,
           779.5415],
         [ 801.3755,  805.7424,  805.7424,  ...,  783.9083,  779.5415,
           779.5415],
         [ 801.3755,  805.7424,  805.7424,  ...,  783.9083,  779.5415,
           779.5415]],

        [[ 904.2143,  908.6786,  913.1429,  ...,  917.6071,  904.2143,
           904.2143],
         [ 908.6786,  908.6786,  913.1429,  ...,  935.4643,  931.0000,
           926.5357],
         [ 908.6786,  908.6786,  917.6071,  ...,  931.0000,  935.4643,
           931.0000],
         ...,
         [ 886.3571,  895.2857,  899.7500,  ...,  872.9643,  868.5000,
           868.5000],
         [ 890.8214,  895.2857,  895.2857,  ...,  872.9643,  868.5000,
           868.5000],
         [ 890.8214,  895.2857,  895.2857,  ...,  872.9643,  868.5000,
           868.5000]],

        [[1122.6400, 1127.0845, 1122.6400,  ..., 1118.1956, 1104.8622,
          1104.8622],
         [1127.0845, 1127.0845, 1122.6400,  ..., 1131.5289, 1131.5289,
          1127.0845],
         [1127.0845, 1127.0845, 1127.0845,  ..., 1131.5289, 1131.5289,
          1131.5289],
         ...,
         [1109.3066, 1118.1956, 1122.6400,  ..., 1131.5289, 1127.0845,
          1127.0845],
         [1113.7511, 1118.1956, 1118.1956,  ..., 1131.5289, 1127.0845,
          1127.0845],
         [1113.7511, 1118.1956, 1118.1956,  ..., 1131.5289, 1127.0845,
          1127.0845]]])


printing here the length of img_masked: 
 torch.Size([3, 160, 160])



printing here the target: 
 tensor([[-0.1915,  0.0645,  0.8191],
        [-0.1589,  0.0437,  0.8278],
        [-0.1544,  0.0371,  0.8322],
        ...,
        [-0.0737, -0.1447,  0.8340],
        [-0.0871, -0.1367,  0.8217],
        [-0.0838, -0.1353,  0.8169]])


printing here the length of target: 
 torch.Size([500, 3])



printing here the model_points: 
 tensor([[ 0.1240, -0.0843,  0.0187],
        [ 0.1068, -0.0494,  0.0269],
        [ 0.0995, -0.0439,  0.0279],
        ...,
        [-0.0327,  0.0481,  0.1444],
        [-0.0208,  0.0327,  0.1482],
        [-0.0163,  0.0353,  0.1514]])


printing here the length of model_points: 
 torch.Size([500, 3])



LONGTENSOR:  36 






LONGTENSOR: tensor([36]) 







out_img.size:  torch.Size([1, 32, 120, 160])
emb:::: torch.Size([1, 32, 19200])
choose.shape before:  torch.Size([1, 1, 500])
choose:  torch.Size([1, 32, 500])
emb after gather::  torch.Size([1, 32, 500])
pointcloud shape before transpose:  torch.Size([1, 500, 3])
pointcloud after transpose:  torch.Size([1, 3, 500])
PoseNetFeat: x shape after conv layer:  torch.Size([1, 64, 500])
PoseNetFeat: emb shape after conv layer:  torch.Size([1, 64, 500])
after concatenation shape of pointnet1:  torch.Size([1, 128, 500])
after concatenation shape of pointnet2:  torch.Size([1, 256, 500])



***********************************ITERATION*******************************************



value of index here:

 117 


apx shape:  torch.Size([1, 1024, 1])
apx shape after change:  torch.Size([1, 1024, 500])
final shape after concat of pointnetfeat_1 & pointnetfeat_2:  torch.Size([1, 1408, 500])
rx shape after 1st iteration:  torch.Size([1, 640, 500])
rx shape after 2nd iteration:  torch.Size([1, 256, 500])
rx shape after 3rd iteration:  torch.Size([1, 128, 500])
rx after shape change:  torch.Size([1, 1, 4, 500])
out__rx shape before contiguous:  torch.Size([1, 4, 500])
out__rx shape after contiguous:  torch.Size([1, 500, 4])
out__cx shape after contiguous:  torch.Size([1, 500, 1])
out__tx shape after contiguous:  torch.Size([1, 500, 3])


emb at the end:  torch.Size([1, 32, 500]) 

*****************ENTERING LOSS*************************


 bs & np vlaues: 1 500
***********************PRED VALUE*************** tensor([[[ 0.0080, -0.0618,  0.9624],
         [-0.1949,  0.0019,  0.9296],
         [ 0.0029, -0.0667,  0.9609],
         ...,
         [-0.0298, -0.0962,  0.8407],
         [-0.0324, -0.0892,  0.8366],
         [-0.0245, -0.0894,  0.8355]],

        [[ 0.0091, -0.0612,  0.9674],
         [-0.1961, -0.0022,  0.9403],
         [ 0.0041, -0.0662,  0.9656],
         ...,
         [-0.0284, -0.0877,  0.8437],
         [-0.0312, -0.0805,  0.8401],
         [-0.0234, -0.0804,  0.8390]],

        [[ 0.0059, -0.0588,  0.9628],
         [-0.1970,  0.0049,  0.9295],
         [ 0.0007, -0.0638,  0.9613],
         ...,
         [-0.0319, -0.0936,  0.8412],
         [-0.0345, -0.0867,  0.8370],
         [-0.0266, -0.0869,  0.8360]],

        ...,

        [[-0.0176, -0.0798,  0.9524],
         [-0.2173, -0.0058,  0.9210],
         [-0.0230, -0.0844,  0.9510],
         ...,
         [-0.0589, -0.1139,  0.8318],
         [-0.0611, -0.1069,  0.8275],
         [-0.0533, -0.1075,  0.8263]],

        [[-0.0207, -0.0772,  0.9487],
         [-0.2208, -0.0040,  0.9186],
         [-0.0261, -0.0819,  0.9475],
         ...,
         [-0.0631, -0.1130,  0.8290],
         [-0.0654, -0.1060,  0.8247],
         [-0.0576, -0.1067,  0.8234]],

        [[-0.0193, -0.0785,  0.9512],
         [-0.2189, -0.0042,  0.9202],
         [-0.0247, -0.0832,  0.9499],
         ...,
         [-0.0610, -0.1130,  0.8308],
         [-0.0632, -0.1060,  0.8266],
         [-0.0554, -0.1067,  0.8254]]],
       device='cuda:0', grad_fn=<ThAddBackward>)
2019-06-04 03:23:53,344 : Test time 10h 11m 53s Test Frame No.107 dis:0.01557669136673212




out_img.size:  torch.Size([1, 32, 120, 160])
emb:::: torch.Size([1, 32, 19200])
choose.shape before:  torch.Size([1, 1, 500])
choose:  torch.Size([1, 32, 500])
emb after gather::  torch.Size([1, 32, 500])
pointcloud shape before transpose:  torch.Size([1, 500, 3])
pointcloud after transpose:  torch.Size([1, 3, 500])
PoseNetFeat: x shape after conv layer:  torch.Size([1, 64, 500])
PoseNetFeat: emb shape after conv layer:  torch.Size([1, 64, 500])
after concatenation shape of pointnet1:  torch.Size([1, 128, 500])
after concatenation shape of pointnet2:  torch.Size([1, 256, 500])
apx shape:  torch.Size([1, 1024, 1])
apx shape after change:  torch.Size([1, 1024, 500])
final shape after concat of pointnetfeat_1 & pointnetfeat_2:  torch.Size([1, 1408, 500])
rx shape after 1st iteration:  torch.Size([1, 640, 500])
rx shape after 2nd iteration:  torch.Size([1, 256, 500])
rx shape after 3rd iteration:  torch.Size([1, 128, 500])
rx after shape change:  torch.Size([1, 1, 4, 500])
out__rx shape before contiguous:  torch.Size([1, 4, 500])
out__rx shape after contiguous:  torch.Size([1, 500, 4])
out__cx shape after contiguous:  torch.Size([1, 500, 1])
out__tx shape after contiguous:  torch.Size([1, 500, 3])


emb at the end:  torch.Size([1, 32, 500]) 

*****************ENTERING LOSS*************************


 bs & np vlaues: 1 500
***********************PRED VALUE*************** tensor([[[-0.1010, -0.1614,  0.9487],
         [-0.0896, -0.1627,  0.9441],
         [ 0.0800, -0.0278,  0.9411],
         ...,
         [ 0.0365, -0.0536,  0.8183],
         [ 0.0523, -0.0628,  0.8177],
         [ 0.0449, -0.0562,  0.8152]],

        [[-0.1008, -0.1611,  0.9488],
         [-0.0895, -0.1624,  0.9442],
         [ 0.0804, -0.0279,  0.9415],
         ...,
         [ 0.0370, -0.0534,  0.8186],
         [ 0.0528, -0.0627,  0.8180],
         [ 0.0454, -0.0561,  0.8155]],

        [[-0.1017, -0.1623,  0.9473],
         [-0.0904, -0.1636,  0.9426],
         [ 0.0788, -0.0282,  0.9381],
         ...,
         [ 0.0348, -0.0546,  0.8157],
         [ 0.0506, -0.0638,  0.8150],
         [ 0.0432, -0.0573,  0.8125]],

        ...,

        [[-0.1069, -0.1439,  0.9533],
         [-0.0959, -0.1456,  0.9483],
         [ 0.0809, -0.0203,  0.9440],
         ...,
         [ 0.0322, -0.0393,  0.8220],
         [ 0.0474, -0.0494,  0.8205],
         [ 0.0403, -0.0423,  0.8185]],

        [[-0.1043, -0.1376,  0.9559],
         [-0.0933, -0.1393,  0.9507],
         [ 0.0842, -0.0150,  0.9482],
         ...,
         [ 0.0350, -0.0313,  0.8260],
         [ 0.0501, -0.0415,  0.8243],
         [ 0.0431, -0.0343,  0.8225]],

        [[-0.1019, -0.1407,  0.9555],
         [-0.0908, -0.1424,  0.9504],
         [ 0.0856, -0.0166,  0.9464],
         ...,
         [ 0.0367, -0.0350,  0.8244],
         [ 0.0519, -0.0450,  0.8228],
         [ 0.0448, -0.0379,  0.8209]]],
       device='cuda:0', grad_fn=<ThAddBackward>)
2019-06-04 03:23:53,366 : Test time 10h 11m 53s Test Frame No.108 dis:0.013006214052438736




out_img.size:  torch.Size([1, 32, 160, 120])
emb:::: torch.Size([1, 32, 19200])
choose.shape before:  torch.Size([1, 1, 500])
choose:  torch.Size([1, 32, 500])
emb after gather::  torch.Size([1, 32, 500])
pointcloud shape before transpose:  torch.Size([1, 500, 3])
pointcloud after transpose:  torch.Size([1, 3, 500])
PoseNetFeat: x shape after conv layer:  torch.Size([1, 64, 500])
PoseNetFeat: emb shape after conv layer:  torch.Size([1, 64, 500])
after concatenation shape of pointnet1:  torch.Size([1, 128, 500])
after concatenation shape of pointnet2:  torch.Size([1, 256, 500])
apx shape:  torch.Size([1, 1024, 1])
apx shape after change:  torch.Size([1, 1024, 500])
final shape after concat of pointnetfeat_1 & pointnetfeat_2:  torch.Size([1, 1408, 500])
rx shape after 1st iteration:  torch.Size([1, 640, 500])
rx shape after 2nd iteration:  torch.Size([1, 256, 500])
rx shape after 3rd iteration:  torch.Size([1, 128, 500])
rx after shape change:  torch.Size([1, 1, 4, 500])
out__rx shape before contiguous:  torch.Size([1, 4, 500])
out__rx shape after contiguous:  torch.Size([1, 500, 4])
out__cx shape after contiguous:  torch.Size([1, 500, 1])
out__tx shape after contiguous:  torch.Size([1, 500, 3])


emb at the end:  torch.Size([1, 32, 500]) 

*****************ENTERING LOSS*************************


 bs & np vlaues: 1 500
***********************PRED VALUE*************** tensor([[[-0.1274,  0.0008,  0.9616],
         [-0.1245,  0.0001,  0.9600],
         [-0.0164,  0.1957,  0.9242],
         ...,
         [-0.0730,  0.0149,  0.8340],
         [-0.0870, -0.0012,  0.8357],
         [-0.0964,  0.0039,  0.8336]],

        [[-0.1271,  0.0030,  0.9622],
         [-0.1242,  0.0023,  0.9606],
         [-0.0163,  0.1982,  0.9258],
         ...,
         [-0.0727,  0.0177,  0.8347],
         [-0.0867,  0.0016,  0.8363],
         [-0.0961,  0.0068,  0.8342]],

        [[-0.1248,  0.0036,  0.9624],
         [-0.1219,  0.0029,  0.9609],
         [-0.0142,  0.1991,  0.9272],
         ...,
         [-0.0700,  0.0189,  0.8352],
         [-0.0840,  0.0028,  0.8367],
         [-0.0934,  0.0079,  0.8346]],

        ...,

        [[-0.1141,  0.0028,  0.9689],
         [-0.1112,  0.0024,  0.9672],
         [-0.0052,  0.2018,  0.9529],
         ...,
         [-0.0642,  0.0334,  0.8424],
         [-0.0780,  0.0172,  0.8425],
         [-0.0876,  0.0224,  0.8414]],

        [[-0.1139,  0.0063,  0.9695],
         [-0.1111,  0.0059,  0.9678],
         [-0.0055,  0.2056,  0.9530],
         ...,
         [-0.0644,  0.0369,  0.8429],
         [-0.0782,  0.0206,  0.8431],
         [-0.0878,  0.0259,  0.8419]],

        [[-0.1138,  0.0100,  0.9702],
         [-0.1110,  0.0096,  0.9685],
         [-0.0059,  0.2094,  0.9531],
         ...,
         [-0.0648,  0.0405,  0.8434],
         [-0.0785,  0.0242,  0.8436],
         [-0.0881,  0.0294,  0.8425]]],
       device='cuda:0', grad_fn=<ThAddBackward>)
2019-06-04 03:23:53,413 : Test time 10h 11m 53s Test Frame No.109 dis:0.02350011095404625




out_img.size:  torch.Size([1, 32, 80, 160])
emb:::: torch.Size([1, 32, 12800])
choose.shape before:  torch.Size([1, 1, 500])
choose:  torch.Size([1, 32, 500])
emb after gather::  torch.Size([1, 32, 500])
pointcloud shape before transpose:  torch.Size([1, 500, 3])
pointcloud after transpose:  torch.Size([1, 3, 500])
PoseNetFeat: x shape after conv layer:  torch.Size([1, 64, 500])
PoseNetFeat: emb shape after conv layer:  torch.Size([1, 64, 500])
after concatenation shape of pointnet1:  torch.Size([1, 128, 500])
after concatenation shape of pointnet2:  torch.Size([1, 256, 500])
apx shape:  torch.Size([1, 1024, 1])
apx shape after change:  torch.Size([1, 1024, 500])
final shape after concat of pointnetfeat_1 & pointnetfeat_2:  torch.Size([1, 1408, 500])
rx shape after 1st iteration:  torch.Size([1, 640, 500])
rx shape after 2nd iteration:  torch.Size([1, 256, 500])
rx shape after 3rd iteration:  torch.Size([1, 128, 500])
rx after shape change:  torch.Size([1, 1, 4, 500])
out__rx shape before contiguous:  torch.Size([1, 4, 500])
out__rx shape after contiguous:  torch.Size([1, 500, 4])
out__cx shape after contiguous:  torch.Size([1, 500, 1])
out__tx shape after contiguous:  torch.Size([1, 500, 3])


emb at the end:  torch.Size([1, 32, 500]) 

*****************ENTERING LOSS*************************


 bs & np vlaues: 1 500
***********************PRED VALUE*************** tensor([[[ 0.0408,  0.0038,  0.8810],
         [ 0.0341,  0.0701,  0.8453],
         [ 0.0327,  0.0701,  0.8448],
         ...,
         [-0.0989, -0.0249,  0.7444],
         [-0.0991, -0.0235,  0.7406],
         [-0.1047, -0.0239,  0.7399]],

        [[ 0.0450,  0.0074,  0.8838],
         [ 0.0388,  0.0743,  0.8491],
         [ 0.0373,  0.0743,  0.8486],
         ...,
         [-0.0947, -0.0183,  0.7466],
         [-0.0950, -0.0169,  0.7429],
         [-0.1005, -0.0172,  0.7421]],

        [[ 0.0410, -0.0008,  0.8804],
         [ 0.0347,  0.0656,  0.8447],
         [ 0.0333,  0.0655,  0.8443],
         ...,
         [-0.0980, -0.0289,  0.7430],
         [-0.0982, -0.0276,  0.7393],
         [-0.1038, -0.0280,  0.7385]],

        ...,

        [[ 0.0410, -0.0080,  0.8741],
         [ 0.0357,  0.0592,  0.8398],
         [ 0.0343,  0.0592,  0.8394],
         ...,
         [-0.1003, -0.0303,  0.7379],
         [-0.1005, -0.0289,  0.7342],
         [-0.1061, -0.0291,  0.7335]],

        [[ 0.0430,  0.0042,  0.8715],
         [ 0.0455,  0.0694,  0.8333],
         [ 0.0441,  0.0695,  0.8327],
         ...,
         [-0.0905, -0.0153,  0.7273],
         [-0.0904, -0.0140,  0.7235],
         [-0.0959, -0.0139,  0.7224]],

        [[ 0.0381, -0.0066,  0.8726],
         [ 0.0305,  0.0617,  0.8409],
         [ 0.0291,  0.0617,  0.8405],
         ...,
         [-0.1045, -0.0278,  0.7377],
         [-0.1049, -0.0262,  0.7340],
         [-0.1104, -0.0266,  0.7334]]],
       device='cuda:0', grad_fn=<ThAddBackward>)
2019-06-04 03:23:53,441 : Test time 10h 11m 53s Test Frame No.110 dis:0.012077121064066887
values of bounding box:  222 342 312 512


here are the MODEL POINTS: 
 [[ 0.1088656  -0.05117922  0.02603465]
 [ 0.1134284  -0.05686425  0.02699375]
 [ 0.04351272 -0.09319612  0.0285153 ]
 ...
 [-0.01734523  0.02452103  0.1489427 ]
 [-0.02242191  0.03263036  0.1493106 ]
 [-0.02283422  0.03360734  0.1510611 ]]


printing here the cloud: 
posemat:
 tensor([[-1.3899, -1.6450,  7.1520],
        [-1.3833, -1.6450,  7.1520],
        [-1.3928, -1.6087,  7.1670],
        ...,
        [-1.7053, -0.8968,  5.9630],
        [-1.5680, -0.8678,  5.8420],
        [-1.7003, -0.8778,  5.9840]])


printing here the length of cloud: 
 torch.Size([500, 3])



printing here the choose: 
 [[ 0.9774539  -0.21021451  0.01984262 -0.00165113]
 [ 0.01802159 -0.01057499 -0.99978167  0.14038348]
 [ 0.21037845  0.97759809 -0.00654817  0.69892353]
 [ 0.          0.          0.          1.        ]]
traget_r:
 [[ 0.9774539  -0.21021451  0.01984262]
 [ 0.01802159 -0.01057499 -0.99978167]
 [ 0.21037845  0.97759809 -0.00654817]]
target_t:
 [-0.00165113  0.14038348  0.69892353]
length of choose here:  6203
 tensor([[ 4949,  4950,  6149,  6549,  7149,  7151,  7749,  7750,  8153,  8348,
          8353,  8527,  8727,  8947,  8950,  8954,  9117,  9123,  9154,  9325,
          9329,  9334,  9339,  9340,  9507,  9509,  9516,  9536,  9708,  9713,
          9735,  9737,  9760,  9919,  9957, 10109, 10120, 10129, 10141, 10150,
         10318, 10337, 10344, 10351, 10357, 10364, 10366, 10367, 10509, 10535,
         10546, 10547, 10553, 10568, 10576, 10717, 10722, 10742, 10754, 10760,
         10767, 10768, 10770, 10778, 10913, 10914, 10921, 10930, 10932, 10949,
         10950, 10952, 10972, 10979, 11137, 11139, 11150, 11152, 11154, 11157,
         11161, 11178, 11322, 11327, 11329, 11341, 11351, 11354, 11370, 11374,
         11378, 11379, 11380, 11382, 11384, 11473, 11524, 11528, 11532, 11534,
         11537, 11545, 11547, 11548, 11554, 11567, 11571, 11576, 11725, 11732,
         11739, 11753, 11761, 11764, 11778, 11779, 11782, 11784, 11923, 11935,
         12061, 12122, 12129, 12144, 12158, 12161, 12168, 12169, 12267, 12321,
         12324, 12326, 12331, 12332, 12336, 12341, 12378, 12458, 12461, 12467,
         12560, 12718, 12719, 12721, 12722, 12723, 12725, 12732, 12744, 12745,
         12748, 12750, 12765, 12779, 12918, 12919, 12930, 12931, 12942, 12947,
         12950, 12967, 13047, 13113, 13124, 13131, 13133, 13143, 13147, 13153,
         13246, 13314, 13316, 13321, 13338, 13341, 13349, 13437, 13438, 13445,
         13522, 13524, 13528, 13529, 13531, 13544, 13551, 13704, 13712, 13713,
         13720, 13724, 13727, 13752, 13754, 13755, 13821, 13829, 13833, 13838,
         13904, 13922, 13927, 13937, 13940, 13943, 14025, 14027, 14028, 14059,
         14104, 14106, 14135, 14139, 14141, 14219, 14221, 14235, 14257, 14298,
         14305, 14312, 14341, 14347, 14354, 14455, 14456, 14457, 14462, 14514,
         14516, 14523, 14547, 14548, 14549, 14550, 14554, 14653, 14691, 14694,
         14695, 14721, 14722, 14734, 14849, 14857, 14863, 14864, 14897, 14908,
         14913, 14920, 14924, 14926, 14939, 14943, 15048, 15053, 15063, 15094,
         15103, 15112, 15127, 15135, 15147, 15248, 15254, 15262, 15267, 15268,
         15296, 15302, 15310, 15315, 15320, 15324, 15325, 15328, 15351, 15352,
         15444, 15449, 15502, 15503, 15504, 15515, 15527, 15528, 15531, 15557,
         15652, 15656, 15659, 15672, 15714, 15743, 15747, 15749, 15757, 15845,
         15851, 15854, 15861, 15863, 15901, 15908, 15914, 15918, 15919, 15955,
         16040, 16046, 16052, 16056, 16059, 16060, 16061, 16070, 16088, 16090,
         16093, 16097, 16104, 16120, 16128, 16129, 16130, 16149, 16252, 16257,
         16263, 16291, 16307, 16308, 16312, 16313, 16317, 16321, 16362, 16443,
         16446, 16449, 16454, 16456, 16460, 16491, 16504, 16508, 16515, 16524,
         16530, 16641, 16652, 16656, 16659, 16660, 16679, 16681, 16700, 16713,
         16725, 16745, 16749, 16839, 16843, 16847, 16853, 16860, 16870, 16872,
         16877, 16890, 16898, 16907, 16922, 16946, 17044, 17045, 17064, 17065,
         17071, 17087, 17097, 17107, 17111, 17113, 17115, 17138, 17253, 17309,
         17314, 17332, 17366, 17368, 17440, 17442, 17449, 17456, 17471, 17474,
         17486, 17490, 17508, 17514, 17537, 17561, 17564, 17671, 17679, 17683,
         17686, 17702, 17730, 17735, 17764, 17766, 17864, 17870, 17871, 17878,
         17885, 17888, 17897, 17899, 17910, 17934, 17936, 17939, 17942, 17945,
         18093, 18162, 18257, 18308, 18366, 18469, 18481, 18490, 18498, 18504,
         18669, 18688, 18705, 18863, 18887, 19044, 19063, 19072, 19087, 19245,
         19246, 19252, 19276, 19279, 19280, 19285, 19287, 19289, 19454, 19489,
         19491, 19493, 19496, 19652, 19659, 19681, 19859, 19869, 19878, 19887,
         19889, 20045, 20058, 20080, 20081, 20250, 20267, 20284, 20293, 20462,
         20463, 20472, 20473, 20483, 20486, 20673, 20674, 20681, 20689, 20880,
         20884, 21047, 21078, 21082, 21652, 21673, 21851, 22050, 22469, 22852]])


printing here the length of choose: 
 torch.Size([1, 500])
first:  NP1
second:  1
627.93334
self.cam_fx value:  1080.2331
self.cam_fy value:  1080.2312



***********************************ITERATION MID*******************************************






printing here the img_masked: 
 tensor([[[ 692.2053,  692.2053,  692.2053,  ...,  696.5720,  696.5720,
           696.5720],
         [ 692.2053,  692.2053,  692.2053,  ...,  696.5720,  696.5720,
           696.5720],
         [ 705.3057,  705.3057,  705.3057,  ...,  700.9388,  696.5720,
           696.5720],
         ...,
         [ 792.6419,  801.3755,  805.7424,  ...,  779.5415,  775.1747,
           775.1747],
         [ 792.6419,  801.3755,  805.7424,  ...,  779.5415,  779.5415,
           775.1747],
         [ 797.0087,  797.0087,  801.3755,  ...,  783.9083,  783.9083,
           783.9083]],

        [[ 823.8571,  823.8571,  823.8571,  ...,  810.4643,  810.4643,
           810.4643],
         [ 823.8571,  823.8571,  823.8571,  ...,  810.4643,  810.4643,
           810.4643],
         [ 823.8571,  823.8571,  823.8571,  ...,  814.9286,  810.4643,
           810.4643],
         ...,
         [ 917.6071,  926.5357,  931.0000,  ...,  904.2143,  899.7500,
           899.7500],
         [ 917.6071,  926.5357,  931.0000,  ...,  904.2143,  904.2143,
           899.7500],
         [ 922.0714,  922.0714,  926.5357,  ...,  908.6786,  908.6786,
           908.6786]],

        [[1047.0845, 1047.0845, 1047.0845,  ..., 1060.4177, 1060.4177,
          1060.4177],
         [1047.0845, 1047.0845, 1047.0845,  ..., 1060.4177, 1060.4177,
          1060.4177],
         [1051.5289, 1051.5289, 1051.5289,  ..., 1064.8622, 1060.4177,
          1060.4177],
         ...,
         [1118.1956, 1127.0845, 1131.5289,  ..., 1113.7511, 1109.3066,
          1109.3066],
         [1118.1956, 1127.0845, 1131.5289,  ..., 1113.7511, 1113.7511,
          1109.3066],
         [1122.6400, 1122.6400, 1127.0845,  ..., 1118.1956, 1118.1956,
          1118.1956]]])


printing here the length of img_masked: 
 torch.Size([3, 120, 200])



printing here the target: 
 tensor([[-0.0659,  0.1124,  0.7022],
        [-0.0715,  0.1113,  0.6976],
        [-0.1077,  0.1081,  0.7676],
        ...,
        [ 0.0134, -0.0095,  0.8271],
        [ 0.0216, -0.0097,  0.8322],
        [ 0.0226, -0.0115,  0.8326]])


printing here the length of target: 
 torch.Size([500, 3])



printing here the model_points: 
 tensor([[ 0.1089, -0.0512,  0.0260],
        [ 0.1134, -0.0569,  0.0270],
        [ 0.0435, -0.0932,  0.0285],
        ...,
        [-0.0173,  0.0245,  0.1489],
        [-0.0224,  0.0326,  0.1493],
        [-0.0228,  0.0336,  0.1511]])


printing here the length of model_points: 
 torch.Size([500, 3])



LONGTENSOR:  42 






LONGTENSOR: tensor([42]) 





here are the MODEL POINTS: 
 [[ 0.05262498 -0.1037539   0.02695503]
 [-0.05229928  0.06125372  0.02697078]
 [ 0.1006806  -0.04463471  0.02914717]
 ...
 [-0.01628154  0.02721972  0.1455569 ]
 [-0.01447953  0.03824097  0.1462222 ]
 [-0.0237061   0.0352385   0.1474873 ]]


printing here the cloud: 
 tensor([[-2.5414, -2.8980, 10.1730],
        [-2.5433, -2.8800, 10.1430],
        [-2.4910, -2.8633, 10.0840],
        ...,
        [-2.6499, -1.6098,  8.1510],
        [-2.3577, -1.4964,  7.5770],
        [-2.5784, -1.5833,  8.0930]])


printing here the length of cloud: 
 torch.Size([500, 3])



printing here the choose: 
 tensor([[ 1564,  1723,  1727,  1730,  1734,  2200,  2351,  2359,  2371,  2381,
          2513,  2515,  2526,  2532,  2672,  2676,  2696,  2698,  2701,  2703,
          2847,  2852,  2991,  2993,  3021,  3166,  3182,  3315,  3323,  3325,
          3329,  3334,  3337,  3483,  3500,  3503,  3634,  3647,  3651,  3659,
          3786,  3790,  3795,  3802,  3811,  3819,  3822,  3937,  3944,  3970,
          3973,  3974,  3978,  4095,  4113,  4120,  4128,  4132,  4143,  4263,
          4278,  4299,  4306,  4433,  4436,  4456,  4461,  4466,  4568,  4575,
          4580,  4615,  4627,  4730,  4731,  4736,  4747,  4750,  4759,  4764,
          4775,  4902,  4911,  4923,  4934,  5047,  5072,  5077,  5084,  5094,
          5097,  5101,  5105,  5110,  5214,  5250,  5261,  5267,  5361,  5362,
          5384,  5390,  5401,  5410,  5415,  5532,  5556,  5560,  5562,  5581,
          5583,  5686,  5701,  5711,  5721,  5724,  5730,  5876,  5887,  6007,
          6039,  6054,  6141,  6154,  6169,  6170,  6180,  6198,  6311,  6318,
          6328,  6336,  6345,  6359,  6462,  6475,  6496,  6498,  6504,  6507,
          6508,  6611,  6633,  6636,  6641,  6665,  6670,  6672,  6691,  6769,
          6770,  6795,  6815,  6818,  6819,  6824,  6845,  6852,  6960,  6966,
          6975,  6984,  6987,  7001,  7010,  7119,  7127,  7136,  7144,  7147,
          7150,  7154,  7273,  7283,  7320,  7325,  7331,  7333,  7340,  7344,
          7408,  7428,  7435,  7440,  7446,  7460,  7463,  7470,  7490,  7492,
          7497,  7590,  7593,  7600,  7609,  7622,  7653,  7654,  7750,  7756,
          7765,  7771,  7782,  7791,  7802,  7818,  7889,  7922,  7923,  7926,
          7932,  7948,  7960,  7977,  8031,  8034,  8123,  8137,  8227,  8259,
          8266,  8276,  8288,  8295,  8342,  8349,  8355,  8360,  8410,  8416,
          8422,  8425,  8426,  8430,  8435,  8439,  8448,  8509,  8513,  8551,
          8559,  8561,  8576,  8579,  8594,  8661,  8668,  8684,  8685,  8703,
          8721,  8767,  8816,  8832,  8842,  8847,  8874,  8883,  8892,  8997,
          9022,  9027,  9033,  9036,  9074,  9082,  9140,  9169,  9170,  9204,
          9210,  9213,  9228,  9238,  9239,  9349,  9363,  9390,  9400,  9453,
          9457,  9486,  9493,  9499,  9502,  9511,  9514,  9553,  9614,  9634,
          9653,  9670,  9677,  9710,  9712,  9784,  9795,  9798,  9800,  9815,
          9828,  9829,  9936,  9954,  9958,  9961,  9990,  9992, 10020, 10116,
         10118, 10123, 10124, 10128, 10149, 10154, 10176, 10184, 10188, 10259,
         10277, 10289, 10291, 10292, 10309, 10325, 10339, 10429, 10495, 10496,
         10585, 10601, 10602, 10604, 10605, 10641, 10660, 10752, 10785, 10791,
         10934, 10939, 10977, 11082, 11105, 11107, 11122, 11123, 11225, 11229,
         11232, 11243, 11246, 11252, 11265, 11270, 11272, 11280, 11293, 11390,
         11395, 11411, 11418, 11420, 11429, 11434, 11545, 11546, 11548, 11556,
         11568, 11571, 11578, 11579, 11580, 11582, 11586, 11594, 11703, 11704,
         11737, 11758, 11865, 11866, 11872, 12025, 12029, 12055, 12063, 12070,
         12191, 12205, 12228, 12364, 12511, 12514, 12519, 12523, 12540, 12547,
         12550, 12687, 12693, 12696, 12708, 12832, 12836, 12837, 12848, 12864,
         13013, 13023, 13034, 13162, 13167, 13174, 13338, 13353, 13482, 13485,
         13491, 13514, 13638, 13645, 13666, 13668, 13675, 13677, 13802, 13817,
         13834, 13835, 13962, 13975, 13981, 14136, 14152, 14157, 14158, 14300,
         14321, 14425, 14444, 14463, 14477, 14480, 14606, 14616, 14628, 14634,
         14745, 14748, 14767, 14778, 14789, 14905, 14907, 14909, 14941, 14953,
         14957, 14959, 15068, 15091, 15223, 15261, 15262, 15267, 15273, 15275,
         15278, 15279, 15411, 15415, 15546, 15549, 15550, 15573, 15582, 15595,
         15725, 15728, 15734, 15740, 15748, 15886, 15898, 15902, 16066, 16214,
         16215, 16217, 16361, 16362, 16363, 16376, 16380, 16523, 16538, 16850]])


printing here the length of choose: 
 torch.Size([1, 500])



printing here the img_masked: 
 tensor([[[ 814.4760,  814.4760,  814.4760,  ...,  818.8428,  823.2096,
           818.8428],
         [ 814.4760,  814.4760,  814.4760,  ...,  818.8428,  823.2096,
           818.8428],
         [ 818.8428,  818.8428,  818.8428,  ...,  818.8428,  823.2096,
           818.8428],
         ...,
         [ 831.9432,  827.5764,  818.8428,  ...,  779.5415,  775.1747,
           775.1747],
         [ 831.9432,  827.5764,  818.8428,  ...,  779.5415,  775.1747,
           775.1747],
         [ 827.5764,  823.2096,  823.2096,  ...,  788.2751,  766.4410,
           766.4410]],

        [[ 913.1429,  913.1429,  913.1429,  ...,  917.6071,  922.0714,
           917.6071],
         [ 913.1429,  913.1429,  913.1429,  ...,  917.6071,  922.0714,
           917.6071],
         [ 917.6071,  917.6071,  917.6071,  ...,  917.6071,  922.0714,
           917.6071],
         ...,
         [ 931.0000,  926.5357,  917.6071,  ...,  872.9643,  886.3571,
           886.3571],
         [ 931.0000,  926.5357,  917.6071,  ...,  872.9643,  886.3571,
           886.3571],
         [ 922.0714,  917.6071,  917.6071,  ...,  877.4286,  872.9643,
           872.9643]],

        [[1122.6400, 1122.6400, 1122.6400,  ..., 1118.1956, 1131.5289,
          1131.5289],
         [1113.7511, 1113.7511, 1113.7511,  ..., 1118.1956, 1131.5289,
          1131.5289],
         [1118.1956, 1118.1956, 1118.1956,  ..., 1118.1956, 1131.5289,
          1131.5289],
         ...,
         [1131.5289, 1127.0845, 1118.1956,  ..., 1109.3066, 1131.5289,
          1131.5289],
         [1131.5289, 1127.0845, 1118.1956,  ..., 1109.3066, 1131.5289,
          1131.5289],
         [1122.6400, 1118.1956, 1118.1956,  ..., 1131.5289, 1131.5289,
          1131.5289]]])


printing here the length of img_masked: 
 torch.Size([3, 120, 160])



printing here the target: 
 tensor([[ 0.0894, -0.0081,  0.8870],
        [-0.0712,  0.0740,  0.8114],
        [ 0.0286, -0.0474,  0.9110],
        ...,
        [-0.0323, -0.0275,  0.7428],
        [-0.0433, -0.0293,  0.7427],
        [-0.0399, -0.0228,  0.7362]])


printing here the length of target: 
 torch.Size([500, 3])



printing here the model_points: 
 tensor([[ 0.0526, -0.1038,  0.0270],
        [-0.0523,  0.0613,  0.0270],
        [ 0.1007, -0.0446,  0.0291],
        ...,
        [-0.0163,  0.0272,  0.1456],
        [-0.0145,  0.0382,  0.1462],
        [-0.0237,  0.0352,  0.1475]])


printing here the length of model_points: 
 torch.Size([500, 3])



LONGTENSOR:  222 






LONGTENSOR: tensor([222]) 





here are the MODEL POINTS: 
 [[-0.04216975  0.07137486  0.02063446]
 [-0.04034298  0.07261033  0.02441177]
 [ 0.07202543 -0.1243596   0.02739106]
 ...
 [-0.0269839   0.02970977  0.1459368 ]
 [-0.01411763  0.02902432  0.1500209 ]
 [-0.02055019  0.0373919   0.1512788 ]]


printing here the cloud: 
 tensor([[-2.2857, -2.7220, 10.0250],
        [-2.2830, -2.7299, 10.0540],
        [-1.9974, -2.4216,  8.9800],
        ...,
        [-2.4245, -1.4727,  8.3280],
        [-2.4649, -1.4614,  8.3080],
        [-2.4436, -1.4502,  8.2880]])


printing here the length of cloud: 
 torch.Size([500, 3])



printing here the choose: 
 tensor([[ 1403,  1404,  1729,  2038,  2049,  2200,  2209,  2213,  2351,  2353,
          2368,  2372,  2509,  2516,  2534,  2537,  2542,  2676,  2687,  2832,
          2843,  3019,  3021,  3023,  3145,  3146,  3160,  3181,  3306,  3326,
          3330,  3344,  3345,  3485,  3486,  3489,  3500,  3636,  3641,  3665,
          3795,  3804,  3827,  3941,  3952,  4096,  4117,  4119,  4125,  4127,
          4129,  4146,  4257,  4261,  4272,  4275,  4290,  4295,  4420,  4429,
          4447,  4453,  4572,  4575,  4599,  4616,  4619,  4627,  4743,  4750,
          4753,  4775,  4782,  4787,  4887,  4892,  4894,  4899,  4908,  5056,
          5065,  5109,  5206,  5214,  5228,  5237,  5246,  5265,  5388,  5417,
          5420,  5523,  5527,  5535,  5537,  5545,  5681,  5682,  5688,  5717,
          5727,  5730,  5734,  5745,  5855,  5867,  5868,  5882,  5884,  5888,
          5902,  5907,  6020,  6024,  6025,  6030,  6032,  6043,  6049,  6159,
          6167,  6171,  6178,  6180,  6182,  6186,  6220,  6227,  6333,  6341,
          6342,  6346,  6349,  6351,  6355,  6359,  6362,  6367,  6377,  6380,
          6484,  6486,  6506,  6524,  6528,  6537,  6538,  6633,  6640,  6655,
          6656,  6684,  6685,  6699,  6791,  6828,  6851,  6859,  6860,  6976,
          6988,  7014,  7133,  7134,  7170,  7176,  7178,  7180,  7182,  7270,
          7295,  7314,  7320,  7335,  7339,  7423,  7444,  7449,  7453,  7477,
          7490,  7495,  7497,  7607,  7634,  7642,  7748,  7749,  7767,  7900,
          7907,  7916,  7932,  7936,  7942,  7948,  7953,  8033,  8061,  8067,
          8068,  8072,  8078,  8081,  8089,  8105,  8109,  8130,  8185,  8187,
          8215,  8217,  8231,  8255,  8260,  8274,  8275,  8282,  8347,  8399,
          8404,  8425,  8429,  8502,  8509,  8574,  8590,  8595,  8600,  8603,
          8693,  8712,  8735,  8736,  8758,  8763,  8766,  8837,  8855,  8900,
          8912,  8993,  9008,  9014,  9043,  9050,  9054,  9056,  9064,  9066,
          9159,  9189,  9207,  9222,  9228,  9312,  9331,  9334,  9336,  9367,
          9464,  9475,  9478,  9510,  9512,  9538,  9622,  9624,  9633,  9634,
          9638,  9667,  9685,  9694,  9705,  9772,  9787,  9789,  9790,  9806,
          9828,  9841,  9858,  9978,  9979, 10000, 10010, 10011, 10012, 10013,
         10109, 10176, 10181, 10281, 10316, 10325, 10331, 10333, 10412, 10434,
         10443, 10445, 10455, 10466, 10494, 10500, 10571, 10587, 10603, 10607,
         10609, 10616, 10631, 10632, 10650, 10660, 10730, 10745, 10758, 10764,
         10767, 10773, 10774, 10778, 10781, 10805, 10813, 10816, 10907, 10919,
         10929, 10934, 10939, 10940, 10945, 10957, 10974, 11063, 11073, 11079,
         11082, 11089, 11098, 11108, 11112, 11120, 11130, 11224, 11225, 11235,
         11240, 11269, 11279, 11281, 11375, 11379, 11381, 11382, 11387, 11393,
         11402, 11411, 11412, 11415, 11427, 11438, 11549, 11567, 11575, 11576,
         11580, 11729, 11732, 11855, 11865, 11872, 11900, 12022, 12048, 12186,
         12189, 12193, 12197, 12212, 12219, 12229, 12349, 12355, 12358, 12369,
         12378, 12386, 12387, 12397, 12514, 12549, 12663, 12672, 12683, 12688,
         12695, 12850, 12866, 12989, 12992, 12997, 13019, 13026, 13139, 13164,
         13165, 13172, 13183, 13311, 13327, 13328, 13338, 13467, 13473, 13629,
         13645, 13650, 13651, 13797, 13818, 13821, 13952, 13971, 13985, 14101,
         14128, 14138, 14273, 14278, 14289, 14292, 14304, 14437, 14447, 14461,
         14463, 14465, 14611, 14622, 14626, 14628, 14757, 14770, 14920, 14949,
         15075, 15080, 15086, 15088, 15091, 15092, 15235, 15239, 15262, 15265,
         15405, 15413, 15424, 15559, 15562, 15566, 15591, 15726, 15730, 15887,
         15901, 15904, 16037, 16038, 16039, 16045, 16048, 16056, 16060, 16201,
         16224, 16374, 16388, 16541, 16689, 16691, 16706, 16849, 16860, 17006,
         17168, 17169, 17335, 17338, 17340, 17493, 17497, 17655, 17809, 17971]])


printing here the length of choose: 
 torch.Size([1, 500])



printing here the img_masked: 
 tensor([[[ 845.0436,  840.6768,  840.6768,  ...,  818.8428,  818.8428,
           827.5764],
         [ 840.6768,  840.6768,  836.3101,  ...,  818.8428,  818.8428,
           827.5764],
         [ 836.3101,  836.3101,  831.9432,  ...,  818.8428,  818.8428,
           827.5764],
         ...,
         [ 823.2096,  831.9432,  845.0436,  ...,  792.6419,  783.9083,
           775.1747],
         [ 840.6768,  845.0436,  849.4105,  ...,  792.6419,  783.9083,
           775.1747],
         [ 849.4105,  845.0436,  840.6768,  ...,  788.2751,  783.9083,
           775.1747]],

        [[ 948.8571,  944.3929,  944.3929,  ...,  917.6071,  917.6071,
           926.5357],
         [ 944.3929,  944.3929,  939.9286,  ...,  917.6071,  917.6071,
           926.5357],
         [ 939.9286,  939.9286,  935.4643,  ...,  917.6071,  917.6071,
           926.5357],
         ...,
         [ 904.2143,  913.1429,  926.5357,  ...,  877.4286,  868.5000,
           859.5714],
         [ 922.0714,  926.5357,  931.0000,  ...,  877.4286,  868.5000,
           859.5714],
         [ 931.0000,  926.5357,  922.0714,  ...,  872.9643,  868.5000,
           859.5714]],

        [[1131.5289, 1131.5289, 1131.5289,  ..., 1127.0845, 1127.0845,
          1131.5289],
         [1131.5289, 1131.5289, 1127.0845,  ..., 1127.0845, 1127.0845,
          1131.5289],
         [1127.0845, 1127.0845, 1122.6400,  ..., 1127.0845, 1127.0845,
          1131.5289],
         ...,
         [1109.3066, 1118.1956, 1131.5289,  ..., 1131.5289, 1127.0845,
          1118.1956],
         [1127.0845, 1131.5289, 1131.5289,  ..., 1131.5289, 1127.0845,
          1118.1956],
         [1131.5289, 1131.5289, 1127.0845,  ..., 1131.5289, 1127.0845,
          1118.1956]]])


printing here the length of img_masked: 
 torch.Size([3, 120, 160])



printing here the target: 
 tensor([[-0.0459,  0.1070,  0.9016],
        [-0.0469,  0.1038,  0.8987],
        [ 0.1607,  0.0185,  0.9312],
        ...,
        [-0.0003,  0.0543,  0.7884],
        [ 0.0018,  0.0409,  0.7889],
        [-0.0071,  0.0456,  0.7857]])


printing here the length of target: 
 torch.Size([500, 3])



printing here the model_points: 
 tensor([[-0.0422,  0.0714,  0.0206],
        [-0.0403,  0.0726,  0.0244],
        [ 0.0720, -0.1244,  0.0274],
        ...,
        [-0.0270,  0.0297,  0.1459],
        [-0.0141,  0.0290,  0.1500],
        [-0.0206,  0.0374,  0.1513]])


printing here the length of model_points: 
 torch.Size([500, 3])



LONGTENSOR:  228 






LONGTENSOR: tensor([228]) 





here are the MODEL POINTS: 
 [[ 0.0625761  -0.1164114   0.02540139]
 [ 0.05383837 -0.1086664   0.02707497]
 [ 0.107271   -0.05387593  0.02746354]
 ...
 [-0.01364162  0.02694078  0.1470576 ]
 [-0.02313854  0.03018806  0.1482512 ]
 [-0.03264868  0.04593057  0.1479554 ]]


printing here the cloud: 
 tensor([[-3.0663, -2.6071,  9.8250],
        [-2.2783, -2.6145,  9.8530],
        [-2.1805, -2.6071,  9.8250],
        ...,
        [-2.4340, -1.6057,  7.7300],
        [-2.4268, -1.6057,  7.7300],
        [-2.5231, -1.5841,  7.6950]])


printing here the length of cloud: 
 torch.Size([500, 3])



printing here the choose: 
 tensor([[ 1324,  1411,  1421,  1476,  1569,  1634,  1640,  1738,  1743,  1873,
          1880,  1881,  1882,  1892,  1897,  1942,  1967,  2059,  2066,  2103,
          2182,  2217,  2221,  2225,  2226,  2258,  2260,  2265,  2339,  2353,
          2369,  2387,  2388,  2421,  2426,  2428,  2444,  2446,  2490,  2496,
          2540,  2544,  2569,  2578,  2580,  2641,  2645,  2650,  2674,  2680,
          2682,  2684,  2701,  2708,  2712,  2729,  2751,  2805,  2809,  2828,
          2834,  2853,  2886,  2904,  2939,  2967,  2970,  2993,  3004,  3009,
          3013,  3018,  3020,  3025,  3034,  3116,  3125,  3173,  3176,  3184,
          3186,  3204,  3218,  3228,  3249,  3260,  3300,  3306,  3315,  3317,
          3325,  3379,  3380,  3386,  3421,  3434,  3437,  3442,  3455,  3476,
          3488,  3489,  3504,  3506,  3510,  3528,  3539,  3575,  3577,  3588,
          3598,  3622,  3630,  3634,  3641,  3643,  3645,  3649,  3686,  3699,
          3721,  3729,  3730,  3734,  3738,  3741,  3745,  3757,  3761,  3767,
          3780,  3801,  3803,  3858,  3873,  3874,  3888,  3896,  3917,  3918,
          3946,  3947,  3961,  3974,  4021,  4046,  4054,  4055,  4097,  4110,
          4142,  4187,  4224,  4237,  4239,  4241,  4243,  4250,  4272,  4291,
          4297,  4312,  4316,  4323,  4348,  4353,  4357,  4382,  4403,  4408,
          4410,  4440,  4474,  4497,  4559,  4566,  4575,  4591,  4595,  4601,
          4607,  4612,  4652,  4658,  4665,  4669,  4673,  4676,  4684,  4700,
          4704,  4725,  4732,  4734,  4745,  4748,  4762,  4784,  4789,  4811,
          4812,  4819,  4871,  4876,  4898,  4902,  4926,  4933,  4991,  5008,
          5013,  5018,  5021,  5050,  5067,  5090,  5113,  5118,  5126,  5145,
          5153,  5195,  5207,  5230,  5239,  5271,  5278,  5296,  5304,  5306,
          5364,  5382,  5403,  5431,  5461,  5464,  5466,  5468,  5480,  5493,
          5536,  5543,  5546,  5574,  5605,  5640,  5647,  5648,  5652,  5675,
          5693,  5699,  5703,  5714,  5724,  5736,  5738,  5739,  5755,  5785,
          5815,  5873,  5874,  5901,  5902,  5951,  6014,  6019,  6053,  6113,
          6119,  6121,  6138,  6155,  6164,  6166,  6177,  6191,  6222,  6228,
          6233,  6259,  6275,  6279,  6281,  6288,  6303,  6304,  6322,  6332,
          6334,  6344,  6357,  6363,  6366,  6372,  6373,  6377,  6380,  6420,
          6428,  6431,  6447,  6459,  6474,  6479,  6480,  6485,  6497,  6513,
          6526,  6542,  6545,  6552,  6589,  6597,  6607,  6625,  6626,  6636,
          6641,  6672,  6675,  6680,  6681,  6682,  6683,  6687,  6695,  6707,
          6708,  6754,  6772,  6780,  6781,  6785,  6835,  6863,  6870,  6888,
          6925,  6946,  7009,  7013,  7017,  7032,  7062,  7082,  7088,  7091,
          7102,  7111,  7114,  7115,  7125,  7141,  7172,  7182,  7191,  7229,
          7236,  7280,  7293,  7314,  7336,  7342,  7349,  7391,  7392,  7399,
          7422,  7438,  7439,  7449,  7461,  7467,  7506,  7546,  7552,  7578,
          7599,  7602,  7611,  7630,  7644,  7646,  7664,  7690,  7709,  7714,
          7728,  7740,  7760,  7775,  7777,  7779,  7801,  7812,  7816,  7818,
          7824,  7861,  7887,  7916,  7917,  7928,  7930,  7933,  7934,  7953,
          7957,  7980,  8023,  8031,  8042,  8053,  8056,  8060,  8085,  8095,
          8099,  8133,  8147,  8167,  8183,  8184,  8185,  8191,  8195,  8203,
          8207,  8222,  8245,  8269,  8283,  8352,  8354,  8369,  8382,  8393,
          8405,  8432,  8433,  8461,  8503,  8518,  8523,  8534,  8538,  8541,
          8561,  8565,  8579,  8603,  8614,  8678,  8679,  8705,  8760,  8838,
          8856,  8997,  9006,  9142,  9146,  9149,  9151,  9159,  9291,  9303,
          9304,  9308,  9311,  9315,  9316,  9322,  9466,  9489,  9625,  9795,
          9800,  9952,  9962, 10105, 10118, 10121, 10274, 10438, 10596, 10599,
         10754, 10757, 11079, 11082, 11084, 11228, 11229, 11241, 11242, 11547]])


printing here the length of choose: 
 torch.Size([1, 500])



printing here the img_masked: 


here are the MODEL POINTS: 
 [[-0.06000939  0.05923367  0.02065251]
 [ 0.06819081 -0.1214393   0.02518057]
 [ 0.05570167 -0.1101965   0.02489595]
 ...
 [-0.01997155  0.04163466  0.1471512 ]
 [-0.0231351   0.03850086  0.1475549 ]
 [-0.02195146  0.03523866  0.1482655 ]]


printing here the cloud: 
 tensor([[-1.6644, -1.6677,  6.8120],
        [-1.6612, -1.6520,  6.7990],
        [-1.6612, -1.6457,  6.7990],
        ...,
        [-1.7653, -1.1002,  6.8120],
        [-1.7367, -1.0855,  6.7990],
        [-1.7527, -1.0813,  6.8120]])


printing here the length of cloud: 
 torch.Size([500, 3])



printing here the choose: 
 tensor([[ 2674,  3074,  3274,  3474,  4272,  4474,  5074,  8863,  8865,  9070,
          9072,  9271,  9466,  9676,  9866, 10069, 10091, 10275, 10281, 10283,
         10284, 10292, 10461, 10469, 10479, 10498, 10665, 10673, 10675, 10695,
         10701, 10861, 10868, 10886, 10901, 10904, 11066, 11070, 11100, 11111,
         11218, 11221, 11223, 11261, 11270, 11271, 11277, 11278, 11285, 11308,
         11430, 11463, 11474, 11478, 11482, 11485, 11503, 11506, 11507, 11515,
         11519, 11520, 11524, 11667, 11671, 11673, 11675, 11690, 11695, 11713,
         11726, 11826, 11832, 11859, 11870, 11884, 11890, 11892, 11897, 11922,
         11931, 12025, 12026, 12029, 12030, 12038, 12060, 12062, 12067, 12078,
         12084, 12087, 12091, 12094, 12095, 12105, 12118, 12162, 12165, 12254,
         12264, 12265, 12269, 12277, 12278, 12279, 12282, 12283, 12287, 12288,
         12289, 12290, 12308, 12314, 12338, 12358, 12365, 12443, 12449, 12450,
         12453, 12465, 12467, 12476, 12484, 12487, 12489, 12490, 12496, 12503,
         12516, 12517, 12518, 12520, 12525, 12530, 12539, 12545, 12547, 12549,
         12551, 12566, 12652, 12655, 12673, 12674, 12680, 12700, 12702, 12713,
         12719, 12721, 12726, 12739, 12741, 12750, 12751, 12764, 12773, 12774,
         12864, 12875, 12892, 12912, 12914, 12931, 12938, 12955, 12960, 12964,
         12974, 13056, 13057, 13089, 13090, 13093, 13094, 13095, 13097, 13100,
         13108, 13115, 13119, 13122, 13138, 13151, 13153, 13158, 13162, 13166,
         13170, 13171, 13259, 13273, 13288, 13304, 13306, 13318, 13323, 13326,
         13366, 13372, 13460, 13489, 13494, 13498, 13499, 13505, 13508, 13517,
         13528, 13532, 13542, 13544, 13548, 13562, 13569, 13662, 13679, 13680,
         13687, 13691, 13698, 13701, 13708, 13714, 13716, 13720, 13721, 13722,
         13727, 13738, 13758, 13769, 13775, 13777, 13860, 13870, 13872, 13891,
         13898, 13901, 13904, 13921, 13931, 13933, 13939, 13940, 13946, 13950,
         13968, 14086, 14088, 14090, 14094, 14110, 14118, 14145, 14149, 14153,
         14154, 14166, 14171, 14174, 14176, 14262, 14263, 14271, 14278, 14294,
         14295, 14299, 14310, 14318, 14324, 14331, 14334, 14338, 14341, 14352,
         14369, 14370, 14372, 14377, 14378, 14467, 14485, 14496, 14501, 14505,
         14511, 14518, 14524, 14528, 14543, 14569, 14581, 14666, 14670, 14678,
         14693, 14695, 14698, 14702, 14717, 14733, 14740, 14743, 14752, 14754,
         14773, 14859, 14860, 14865, 14867, 14870, 14882, 14890, 14909, 14910,
         14911, 14923, 14929, 14939, 14950, 14958, 14959, 14961, 14969, 14975,
         14982, 15061, 15067, 15082, 15083, 15088, 15096, 15107, 15114, 15127,
         15128, 15137, 15139, 15149, 15165, 15175, 15180, 15269, 15288, 15291,
         15304, 15312, 15338, 15339, 15347, 15372, 15467, 15493, 15497, 15500,
         15503, 15504, 15505, 15513, 15521, 15533, 15545, 15547, 15551, 15554,
         15564, 15575, 15577, 15675, 15680, 15684, 15689, 15695, 15696, 15697,
         15703, 15728, 15743, 15764, 15768, 15775, 15863, 15889, 15892, 15901,
         15921, 15938, 15939, 15948, 15961, 15966, 15967, 16089, 16090, 16094,
         16114, 16118, 16133, 16139, 16148, 16153, 16155, 16159, 16169, 16174,
         16303, 16340, 16352, 16357, 16362, 16365, 16511, 16517, 16524, 16528,
         16533, 16536, 16545, 16550, 16557, 16572, 16574, 16719, 16720, 16725,
         16732, 16733, 16743, 16747, 16756, 16764, 16767, 16768, 16779, 16940,
         16952, 16969, 17113, 17152, 17157, 17159, 17165, 17166, 17173, 17174,
         17175, 17318, 17326, 17342, 17343, 17348, 17372, 17374, 17380, 17524,
         17531, 17545, 17546, 17561, 17570, 17731, 17734, 17737, 17760, 17763,
         17938, 17943, 17958, 17974, 18151, 18157, 18167, 18375, 18377, 18379,
         18571, 18575, 18579, 18765, 18770, 18773, 18957, 18976, 19066, 19270,
         19465, 19660, 19661, 19664, 19668, 20060, 20067, 20658, 21062, 21260]])


printing here the length of choose: 
 torch.Size([1, 500])



printing here the img_masked: 
 tensor([[[ 831.9432,  853.7773,  853.7773,  ...,  814.4760,  810.1091,
           805.7424],
         [ 836.3101,  827.5764,  827.5764,  ...,  805.7424,  797.0087,
           783.9083],
         [ 836.3101,  836.3101,  836.3101,  ...,  805.7424,  797.0087,
           792.6419],
         ...,
         [ 827.5764,  801.3755,  805.7424,  ...,  770.8079,  775.1747,
           775.1747],
         [ 827.5764,  801.3755,  805.7424,  ...,  770.8079,  775.1747,
           775.1747],
         [ 827.5764,  801.3755,  805.7424,  ...,  770.8079,  775.1747,
           775.1747]],

        [[ 931.0000,  931.0000,  931.0000,  ...,  904.2143,  899.7500,
           895.2857],
         [ 939.9286,  939.9286,  939.9286,  ...,  913.1429,  904.2143,
           899.7500],
         [ 939.9286,  935.4643,  935.4643,  ...,  913.1429,  904.2143,
           899.7500],
         ...,
         [ 926.5357,  948.8571,  948.8571,  ...,  859.5714,  864.0357,
           864.0357],
         [ 926.5357,  948.8571,  948.8571,  ...,  859.5714,  864.0357,
           864.0357],
         [ 926.5357,  948.8571,  948.8571,  ...,  859.5714,  864.0357,
           859.5714]],

        [[1131.5289, 1131.5289, 1131.5289,  ..., 1127.0845, 1122.6400,
          1122.6400],
         [1127.0845, 1131.5289, 1131.5289,  ..., 1131.5289, 1122.6400,
          1113.7511],
         [1127.0845, 1131.5289, 1131.5289,  ..., 1131.5289, 1122.6400,
          1118.1956],
         ...,
         [1127.0845, 1122.6400, 1122.6400,  ..., 1131.5289, 1131.5289,
          1131.5289],
         [1127.0845, 1122.6400, 1122.6400,  ..., 1131.5289, 1131.5289,
          1131.5289],
         [1127.0845, 1122.6400, 1122.6400,  ..., 1131.5289, 1131.5289,
          1131.5289]]])


printing here the length of img_masked: 
 torch.Size([3, 80, 160])



printing here the target: 
 tensor([[ 0.0918,  0.0458,  0.8465],
        [ 0.0812,  0.0481,  0.8418],
        [ 0.0537, -0.0090,  0.8846],
        ...,
        [-0.0636, -0.0274,  0.7385],
        [-0.0705, -0.0227,  0.7328],
        [-0.0887, -0.0215,  0.7310]])


printing here the length of target: 
 torch.Size([500, 3])



printing here the model_points: 
 tensor([[ 0.0626, -0.1164,  0.0254],
        [ 0.0538, -0.1087,  0.0271],
        [ 0.1073, -0.0539,  0.0275],
        ...,
        [-0.0136,  0.0269,  0.1471],
        [-0.0231,  0.0302,  0.1483],
        [-0.0326,  0.0459,  0.1480]])


printing here the length of model_points: 
 torch.Size([500, 3])



LONGTENSOR:  249 






LONGTENSOR: tensor([249]) 







out_img.size:  torch.Size([1, 32, 80, 160])
emb:::: torch.Size([1, 32, 12800])
choose.shape before:  torch.Size([1, 1, 500])
choose:  torch.Size([1, 32, 500])
emb after gather::  torch.Size([1, 32, 500])
pointcloud shape before transpose:  torch.Size([1, 500, 3])
pointcloud after transpose:  torch.Size([1, 3, 500])
PoseNetFeat: x shape after conv layer:  torch.Size([1, 64, 500])
PoseNetFeat: emb shape after conv layer:  torch.Size([1, 64, 500])
after concatenation shape of pointnet1:  torch.Size([1, 128, 500])
after concatenation shape of pointnet2:  torch.Size([1, 256, 500])
apx shape:  torch.Size([1, 1024, 1])
apx shape after change:  torch.Size([1, 1024, 500])
final shape after concat of pointnetfeat_1 & pointnetfeat_2:  torch.Size([1, 1408, 500])
rx shape after 1st iteration:  torch.Size([1, 640, 500])
rx shape after 2nd iteration:  torch.Size([1, 256, 500])
rx shape after 3rd iteration:  torch.Size([1, 128, 500])
rx after shape change:  torch.Size([1, 1, 4, 500])
out__rx shape before contiguous:  torch.Size([1, 4, 500])
out__rx shape after contiguous:  torch.Size([1, 500, 4])
out__cx shape after contiguous:  torch.Size([1, 500, 1])
out__tx shape after contiguous:  torch.Size([1, 500, 3])


emb at the end:  torch.Size([1, 32, 500]) 

*****************ENTERING LOSS*************************


 bs & np vlaues: 1 500
***********************PRED VALUE*************** tensor([[[ 0.0984,  0.0581,  0.8400],
         [ 0.0878,  0.0613,  0.8360],
         [ 0.0599, -0.0005,  0.8714],
         ...,
         [-0.0620,  0.0043,  0.7280],
         [-0.0688,  0.0100,  0.7232],
         [-0.0871,  0.0119,  0.7221]],

        [[ 0.0959,  0.0373,  0.8460],
         [ 0.0855,  0.0406,  0.8415],
         [ 0.0562, -0.0236,  0.8712],
         ...,
         [-0.0557, -0.0115,  0.7202],
         [-0.0623, -0.0056,  0.7153],
         [-0.0804, -0.0038,  0.7131]],

        [[ 0.1067,  0.0403,  0.8494],
         [ 0.0964,  0.0435,  0.8448],
         [ 0.0673, -0.0208,  0.8744],
         ...,
         [-0.0432, -0.0101,  0.7224],
         [-0.0498, -0.0043,  0.7174],
         [-0.0679, -0.0028,  0.7150]],

        ...,

        [[ 0.0916,  0.0518,  0.8225],
         [ 0.0810,  0.0547,  0.8181],
         [ 0.0515, -0.0008,  0.8619],
         ...,
         [-0.0709, -0.0122,  0.7192],
         [-0.0777, -0.0071,  0.7137],
         [-0.0959, -0.0048,  0.7124]],

        [[ 0.0916,  0.0508,  0.8227],
         [ 0.0811,  0.0537,  0.8183],
         [ 0.0515, -0.0019,  0.8618],
         ...,
         [-0.0709, -0.0128,  0.7191],
         [-0.0776, -0.0076,  0.7136],
         [-0.0958, -0.0053,  0.7123]],

        [[ 0.0923,  0.0525,  0.8154],
         [ 0.0817,  0.0551,  0.8110],
         [ 0.0531,  0.0018,  0.8579],
         ...,
         [-0.0708, -0.0180,  0.7174],
         [-0.0776, -0.0132,  0.7117],
         [-0.0958, -0.0111,  0.7105]]],
       device='cuda:0', grad_fn=<ThAddBackward>)
2019-06-04 03:23:54,027 : Test time 10h 11m 54s Test Frame No.111 dis:0.022256113588809967
 tensor([[[ 718.4061,  718.4061,  718.4061,  ...,  679.1048,  679.1048,
           679.1048],
         [ 718.4061,  718.4061,  718.4061,  ...,  683.4716,  674.7380,
           674.7380],
         [ 714.0393,  714.0393,  714.0393,  ...,  683.4716,  670.3712,
           670.3712],
         ...,
         [ 779.5415,  783.9083,  788.2751,  ...,  748.9738,  744.6070,
           740.2402],
         [ 810.1091,  814.4760,  814.4760,  ...,  735.8734,  740.2402,
           740.2402],
         [ 823.2096,  827.5764,  831.9432,  ...,  748.9738,  753.3406,
           748.9738]],

        [[ 850.6429,  850.6429,  850.6429,  ...,  792.6071,  792.6071,
           792.6071],
         [ 850.6429,  850.6429,  850.6429,  ...,  797.0714,  788.1429,
           788.1429],
         [ 846.1786,  846.1786,  846.1786,  ...,  797.0714,  783.6786,
           783.6786],
         ...,
         [ 922.0714,  926.5357,  931.0000,  ...,  868.5000,  864.0357,
           859.5714],
         [ 953.3214,  957.7857,  957.7857,  ...,  855.1071,  859.5714,
           859.5714],
         [ 944.3929,  953.3214,  957.7857,  ...,  868.5000,  872.9643,
           868.5000]],

        [[1100.4177, 1100.4177, 1100.4177,  ..., 1042.6400, 1042.6400,
          1042.6400],
         [1100.4177, 1100.4177, 1100.4177,  ..., 1047.0845, 1038.1956,
          1038.1956],
         [1095.9734, 1095.9734, 1095.9734,  ..., 1047.0845, 1033.7511,
          1033.7511],
         ...,
         [1091.5289, 1095.9734, 1100.4177,  ..., 1087.0845, 1082.6400,
          1078.1956],
         [1122.6400, 1127.0845, 1127.0845,  ..., 1073.7511, 1078.1956,
          1078.1956],
         [1122.6400, 1118.1956, 1113.7511,  ..., 1087.0845, 1091.5289,
          1087.0845]]])


printing here the length of img_masked: 
 torch.Size([3, 120, 200])



printing here the target: 
 tensor([[ 0.0128,  0.1210,  0.6522],
        [ 0.2115,  0.1187,  0.7503],
        [ 0.1984,  0.1189,  0.7397],
        ...,
        [ 0.0387, -0.0055,  0.6874],
        [ 0.0413, -0.0058,  0.6838],
        [ 0.0447, -0.0065,  0.6844]])


printing here the length of target: 
 torch.Size([500, 3])



printing here the model_points: 
 tensor([[-0.0600,  0.0592,  0.0207],
        [ 0.0682, -0.1214,  0.0252],
        [ 0.0557, -0.1102,  0.0249],
        ...,
        [-0.0200,  0.0416,  0.1472],
        [-0.0231,  0.0385,  0.1476],
        [-0.0220,  0.0352,  0.1483]])


printing here the length of model_points: 
 torch.Size([500, 3])



LONGTENSOR:  231 






LONGTENSOR: tensor([231]) 







out_img.size:  torch.Size([1, 32, 120, 200])
emb:::: torch.Size([1, 32, 24000])
choose.shape before:  torch.Size([1, 1, 500])
choose:  torch.Size([1, 32, 500])
emb after gather::  torch.Size([1, 32, 500])
pointcloud shape before transpose:  torch.Size([1, 500, 3])
pointcloud after transpose:  torch.Size([1, 3, 500])
PoseNetFeat: x shape after conv layer:  torch.Size([1, 64, 500])
PoseNetFeat: emb shape after conv layer:  torch.Size([1, 64, 500])
after concatenation shape of pointnet1:  torch.Size([1, 128, 500])
after concatenation shape of pointnet2:  torch.Size([1, 256, 500])
apx shape:  torch.Size([1, 1024, 1])
apx shape after change:  torch.Size([1, 1024, 500])
final shape after concat of pointnetfeat_1 & pointnetfeat_2:  torch.Size([1, 1408, 500])
rx shape after 1st iteration:  torch.Size([1, 640, 500])
rx shape after 2nd iteration:  torch.Size([1, 256, 500])
rx shape after 3rd iteration:  torch.Size([1, 128, 500])
rx after shape change:  torch.Size([1, 1, 4, 500])
out__rx shape before contiguous:  torch.Size([1, 4, 500])
out__rx shape after contiguous:  torch.Size([1, 500, 4])
out__cx shape after contiguous:  torch.Size([1, 500, 1])
out__tx shape after contiguous:  torch.Size([1, 500, 3])


emb at the end:  torch.Size([1, 32, 500]) 

*****************ENTERING LOSS*************************


 bs & np vlaues: 1 500
***********************PRED VALUE*************** tensor([[[-0.0026,  0.1331,  0.6348],
         [ 0.1854,  0.1124,  0.7502],
         [ 0.1735,  0.1144,  0.7386],
         ...,
         [ 0.0203,  0.0022,  0.6509],
         [ 0.0233,  0.0025,  0.6476],
         [ 0.0266,  0.0017,  0.6484]],

        [[ 0.0026,  0.1374,  0.6363],
         [ 0.1904,  0.1165,  0.7520],
         [ 0.1784,  0.1186,  0.7404],
         ...,
         [ 0.0252,  0.0065,  0.6528],
         [ 0.0281,  0.0067,  0.6495],
         [ 0.0315,  0.0059,  0.6503]],

        [[ 0.0051,  0.1396,  0.6371],
         [ 0.1929,  0.1187,  0.7529],
         [ 0.1809,  0.1208,  0.7412],
         ...,
         [ 0.0275,  0.0087,  0.6538],
         [ 0.0305,  0.0089,  0.6505],
         [ 0.0338,  0.0081,  0.6514]],

        ...,

        [[ 0.0075,  0.1263,  0.6302],
         [ 0.2035,  0.1180,  0.7332],
         [ 0.1907,  0.1189,  0.7224],
         ...,
         [ 0.0339, -0.0024,  0.6557],
         [ 0.0366, -0.0024,  0.6521],
         [ 0.0400, -0.0031,  0.6528]],

        [[ 0.0113,  0.1261,  0.6312],
         [ 0.2065,  0.1172,  0.7356],
         [ 0.1938,  0.1182,  0.7247],
         ...,
         [ 0.0378, -0.0028,  0.6558],
         [ 0.0405, -0.0027,  0.6523],
         [ 0.0439, -0.0034,  0.6530]],

        [[ 0.0105,  0.1276,  0.6314],
         [ 0.2054,  0.1184,  0.7364],
         [ 0.1927,  0.1195,  0.7254],
         ...,
         [ 0.0370, -0.0014,  0.6556],
         [ 0.0397, -0.0013,  0.6521],
         [ 0.0431, -0.0020,  0.6528]]],
       device='cuda:0', grad_fn=<ThAddBackward>)
2019-06-04 03:23:54,092 : Test time 10h 11m 54s Test Frame No.112 dis:0.024904852733016014


here are the MODEL POINTS: 
 [[ 0.07144231 -0.1218895   0.02226176]
 [-0.04482237  0.06307429  0.02814937]
 [-0.04601813  0.06591316  0.02888852]
 ...
 [-0.02587608  0.03703788  0.1507949 ]
 [-0.02297371  0.02986051  0.1511316 ]
 [-0.01923784  0.03493239  0.1519435 ]]


printing here the cloud: 
 tensor([[-1.3780, -1.6142,  6.7990],
        [-1.3717, -1.6016,  6.7990],
        [-1.3869, -1.5984,  6.8120],
        ...,
        [-1.1467, -0.9577,  6.2900],
        [-1.3146, -0.9800,  6.5160],
        [-1.3110, -0.9818,  6.5280]])


printing here the length of cloud: 
 torch.Size([500, 3])



printing here the choose: 
 tensor([[ 2835,  3156,  3314,  4599,  6039,  6677,  6840,  7319,  7479,  7480,
          7481,  7482,  7635,  7754,  7758,  7764,  7765,  7783,  7800,  7804,
          7912,  7919,  7922,  7923,  7947,  8071,  8073,  8085,  8089,  8091,
          8098,  8113,  8114,  8115,  8120,  8242,  8247,  8249,  8255,  8256,
          8261,  8263,  8270,  8271,  8275,  8279,  8365,  8395,  8397,  8398,
          8417,  8430,  8443,  8444,  8523,  8551,  8556,  8560,  8563,  8569,
          8588,  8604,  8653,  8656,  8658,  8675,  8683,  8703,  8714,  8718,
          8721,  8727,  8729,  8732,  8756,  8761,  8762,  8768,  8814,  8847,
          8853,  8865,  8869,  8873,  8888,  8890,  8895,  8899,  8907,  8914,
          8919,  8922,  8924,  8927,  8970,  9003,  9005,  9015,  9016,  9020,
          9023,  9030,  9050,  9056,  9061,  9064,  9067,  9071,  9073,  9075,
          9079,  9082,  9083,  9085,  9088,  9133,  9152,  9167,  9198,  9205,
          9218,  9220,  9238,  9247,  9253,  9288,  9289,  9291,  9292,  9294,
          9322,  9330,  9340,  9341,  9358,  9366,  9371,  9374,  9393,  9407,
          9408,  9410,  9470,  9489,  9497,  9499,  9506,  9514,  9528,  9529,
          9546,  9549,  9550,  9552,  9566,  9567,  9569,  9576,  9589,  9608,
          9629,  9630,  9631,  9633,  9635,  9648,  9650,  9656,  9658,  9660,
          9662,  9673,  9678,  9682,  9685,  9699,  9705,  9712,  9716,  9721,
          9727,  9766,  9786,  9807,  9808,  9809,  9814,  9815,  9817,  9830,
          9841,  9847,  9850,  9853,  9860,  9862,  9866,  9869,  9873,  9901,
          9926,  9932,  9934,  9936,  9943,  9946,  9948,  9954,  9965,  9982,
          9996, 10038, 10039, 10043, 10044, 10045, 10049, 10054, 10056, 10075,
         10085, 10090, 10094, 10096, 10120, 10142, 10146, 10165, 10167, 10183,
         10184, 10201, 10205, 10207, 10210, 10212, 10221, 10231, 10265, 10279,
         10291, 10298, 10300, 10307, 10310, 10314, 10321, 10332, 10351, 10353,
         10366, 10384, 10386, 10387, 10423, 10429, 10437, 10438, 10442, 10448,
         10456, 10459, 10469, 10471, 10476, 10477, 10478, 10480, 10503, 10509,
         10524, 10589, 10597, 10598, 10603, 10605, 10609, 10611, 10612, 10644,
         10646, 10647, 10648, 10671, 10685, 10689, 10692, 10740, 10746, 10760,
         10762, 10765, 10766, 10768, 10770, 10779, 10782, 10786, 10787, 10789,
         10806, 10808, 10845, 10927, 10933, 10947, 10959, 11043, 11071, 11073,
         11086, 11088, 11091, 11107, 11108, 11121, 11123, 11124, 11225, 11235,
         11244, 11249, 11252, 11278, 11364, 11382, 11385, 11402, 11407, 11416,
         11417, 11432, 11442, 11444, 11540, 11556, 11565, 11576, 11580, 11594,
         11603, 11686, 11704, 11705, 11719, 11727, 11737, 11743, 11746, 11748,
         11749, 11753, 11754, 11757, 11758, 11761, 11844, 11867, 11868, 11871,
         11879, 11885, 11886, 11898, 11912, 11922, 11923, 11924, 12022, 12034,
         12035, 12038, 12042, 12059, 12072, 12074, 12078, 12082, 12123, 12195,
         12202, 12225, 12229, 12231, 12239, 12240, 12248, 12275, 12279, 12282,
         12325, 12340, 12344, 12366, 12370, 12379, 12385, 12389, 12390, 12411,
         12412, 12434, 12439, 12442, 12500, 12502, 12509, 12513, 12517, 12518,
         12519, 12530, 12540, 12543, 12545, 12546, 12556, 12586, 12591, 12644,
         12645, 12661, 12667, 12668, 12669, 12677, 12704, 12744, 12752, 12762,
         12828, 12835, 12837, 12858, 12859, 12901, 12903, 12907, 12911, 12989,
         12999, 13008, 13021, 13063, 13068, 13070, 13074, 13152, 13155, 13227,
         13240, 13303, 13384, 13395, 13403, 13554, 13705, 13708, 13719, 13723,
         13868, 13869, 13876, 14040, 14042, 14189, 14528, 14689, 14691, 14847,
         14852, 15011, 15172, 15176, 15331, 15335, 15489, 15492, 15493, 15652,
         15811, 16443, 16446, 16600, 16759, 16767, 16776, 16927, 16928, 16931,
         16935, 17090, 17094, 17099, 17238, 17398, 17414, 17577, 17876, 17877]])


printing here the length of choose: 
 torch.Size([1, 500])



printing here the img_masked: 
 tensor([[[ 709.6725,  709.6725,  714.0393,  ...,  700.9388,  700.9388,
           705.3057],
         [ 709.6725,  709.6725,  714.0393,  ...,  692.2053,  692.2053,
           700.9388],
         [ 709.6725,  709.6725,  714.0393,  ...,  687.8384,  687.8384,
           696.5720],
         ...,
         [ 805.7424,  810.1091,  827.5764,  ...,  797.0087,  797.0087,
           797.0087],
         [ 805.7424,  805.7424,  818.8428,  ...,  801.3755,  801.3755,
           801.3755],
         [ 810.1091,  810.1091,  805.7424,  ...,  797.0087,  797.0087,
           797.0087]],

        [[ 841.7143,  841.7143,  846.1786,  ...,  828.3214,  828.3214,
           832.7857],
         [ 841.7143,  841.7143,  846.1786,  ...,  819.3929,  819.3929,
           828.3214],
         [ 841.7143,  841.7143,  846.1786,  ...,  814.9286,  814.9286,
           823.8571],
         ...,
         [ 935.4643,  939.9286,  948.8571,  ...,  922.0714,  922.0714,
           922.0714],
         [ 935.4643,  935.4643,  939.9286,  ...,  926.5357,  926.5357,
           926.5357],
         [ 939.9286,  939.9286,  926.5357,  ...,  922.0714,  922.0714,
           922.0714]],

        [[1091.5289, 1091.5289, 1095.9734,  ..., 1078.1956, 1078.1956,
          1082.6400],
         [1091.5289, 1091.5289, 1095.9734,  ..., 1069.3066, 1069.3066,
          1078.1956],
         [1091.5289, 1091.5289, 1095.9734,  ..., 1064.8622, 1064.8622,
          1073.7511],
         ...,
         [1113.7511, 1118.1956, 1131.5289,  ..., 1131.5289, 1131.5289,
          1131.5289],
         [1113.7511, 1113.7511, 1122.6400,  ..., 1131.5289, 1131.5289,
          1131.5289],
         [1118.1956, 1118.1956, 1109.3066,  ..., 1131.5289, 1131.5289,
          1131.5289]]])


printing here the length of img_masked: 
 torch.Size([3, 120, 160])



printing here the target: 
 tensor([[ 0.0452,  0.1158,  0.9354],
        [ 0.1298,  0.1152,  0.7339],
        [ 0.1306,  0.1146,  0.7309],
        ...,
        [ 0.1183, -0.0082,  0.7606],
        [ 0.1166, -0.0087,  0.7681],
        [ 0.1121, -0.0095,  0.7637]])


printing here the length of target: 
 torch.Size([500, 3])



printing here the model_points: 
 tensor([[ 0.0714, -0.1219,  0.0223],
        [-0.0448,  0.0631,  0.0281],
        [-0.0460,  0.0659,  0.0289],
        ...,
        [-0.0259,  0.0370,  0.1508],
        [-0.0230,  0.0299,  0.1511],
        [-0.0192,  0.0349,  0.1519]])


printing here the length of model_points: 
 torch.Size([500, 3])



LONGTENSOR:  141 






LONGTENSOR: tensor([141]) 







out_img.size:  torch.Size([1, 32, 120, 160])
emb:::: torch.Size([1, 32, 19200])
choose.shape before:  torch.Size([1, 1, 500])
choose:  torch.Size([1, 32, 500])
emb after gather::  torch.Size([1, 32, 500])
pointcloud shape before transpose:  torch.Size([1, 500, 3])
pointcloud after transpose:  torch.Size([1, 3, 500])
PoseNetFeat: x shape after conv layer:  torch.Size([1, 64, 500])
PoseNetFeat: emb shape after conv layer:  torch.Size([1, 64, 500])
after concatenation shape of pointnet1:  torch.Size([1, 128, 500])
after concatenation shape of pointnet2:  torch.Size([1, 256, 500])
apx shape:  torch.Size([1, 1024, 1])
apx shape after change:  torch.Size([1, 1024, 500])
final shape after concat of pointnetfeat_1 & pointnetfeat_2:  torch.Size([1, 1408, 500])
rx shape after 1st iteration:  torch.Size([1, 640, 500])
rx shape after 2nd iteration:  torch.Size([1, 256, 500])
rx shape after 3rd iteration:  torch.Size([1, 128, 500])
rx after shape change:  torch.Size([1, 1, 4, 500])
out__rx shape before contiguous:  torch.Size([1, 4, 500])
out__rx shape after contiguous:  torch.Size([1, 500, 4])
out__cx shape after contiguous:  torch.Size([1, 500, 1])
out__tx shape after contiguous:  torch.Size([1, 500, 3])


emb at the end:  torch.Size([1, 32, 500]) 

*****************ENTERING LOSS*************************


 bs & np vlaues: 1 500
***********************PRED VALUE*************** tensor([[[0.0051, 0.1260, 0.9135],
         [0.1067, 0.1282, 0.7200],
         [0.1077, 0.1275, 0.7171],
         ...,
         [0.0988, 0.0045, 0.7469],
         [0.0965, 0.0040, 0.7543],
         [0.0924, 0.0029, 0.7496]],

        [[0.0125, 0.1283, 0.9159],
         [0.1125, 0.1305, 0.7217],
         [0.1135, 0.1299, 0.7187],
         ...,
         [0.1042, 0.0068, 0.7484],
         [0.1020, 0.0063, 0.7557],
         [0.0979, 0.0052, 0.7510]],

        [[0.0169, 0.1306, 0.9159],
         [0.1146, 0.1328, 0.7204],
         [0.1156, 0.1321, 0.7175],
         ...,
         [0.1066, 0.0091, 0.7473],
         [0.1045, 0.0086, 0.7547],
         [0.1003, 0.0075, 0.7501]],

        ...,

        [[0.0103, 0.1306, 0.9263],
         [0.1084, 0.1363, 0.7311],
         [0.1093, 0.1357, 0.7282],
         ...,
         [0.1007, 0.0122, 0.7559],
         [0.0985, 0.0115, 0.7633],
         [0.0944, 0.0105, 0.7586]],

        [[0.0261, 0.1259, 0.9361],
         [0.1100, 0.1317, 0.7344],
         [0.1107, 0.1311, 0.7314],
         ...,
         [0.1034, 0.0076, 0.7593],
         [0.1017, 0.0069, 0.7668],
         [0.0973, 0.0059, 0.7624]],

        [[0.0259, 0.1272, 0.9366],
         [0.1104, 0.1331, 0.7351],
         [0.1111, 0.1325, 0.7321],
         ...,
         [0.1037, 0.0089, 0.7599],
         [0.1021, 0.0082, 0.7674],
         [0.0976, 0.0073, 0.7630]]], device='cuda:0', grad_fn=<ThAddBackward>)
2019-06-04 03:23:54,219 : Test time 10h 11m 54s Test Frame No.113 dis:0.02845797687768936




out_img.size:  torch.Size([1, 32, 160, 160])
emb:::: torch.Size([1, 32, 25600])
choose.shape before:  torch.Size([1, 1, 500])
choose:  torch.Size([1, 32, 500])
emb after gather::  torch.Size([1, 32, 500])
pointcloud shape before transpose:  torch.Size([1, 500, 3])
pointcloud after transpose:  torch.Size([1, 3, 500])
PoseNetFeat: x shape after conv layer:  torch.Size([1, 64, 500])
PoseNetFeat: emb shape after conv layer:  torch.Size([1, 64, 500])
after concatenation shape of pointnet1:  torch.Size([1, 128, 500])
after concatenation shape of pointnet2:  torch.Size([1, 256, 500])
apx shape:  torch.Size([1, 1024, 1])
apx shape after change:  torch.Size([1, 1024, 500])
final shape after concat of pointnetfeat_1 & pointnetfeat_2:  torch.Size([1, 1408, 500])
rx shape after 1st iteration:  torch.Size([1, 640, 500])
rx shape after 2nd iteration:  torch.Size([1, 256, 500])
rx shape after 3rd iteration:  torch.Size([1, 128, 500])
rx after shape change:  torch.Size([1, 1, 4, 500])
out__rx shape before contiguous:  torch.Size([1, 4, 500])
out__rx shape after contiguous:  torch.Size([1, 500, 4])
out__cx shape after contiguous:  torch.Size([1, 500, 1])
out__tx shape after contiguous:  torch.Size([1, 500, 3])


emb at the end:  torch.Size([1, 32, 500]) 

*****************ENTERING LOSS*************************


 bs & np vlaues: 1 500
***********************PRED VALUE*************** tensor([[[-0.2052,  0.0683,  0.8238],
         [-0.1735,  0.0464,  0.8335],
         [-0.1693,  0.0397,  0.8380],
         ...,
         [-0.0940, -0.1444,  0.8414],
         [-0.1067, -0.1359,  0.8287],
         [-0.1032, -0.1346,  0.8240]],

        [[-0.2052,  0.0708,  0.8287],
         [-0.1733,  0.0490,  0.8377],
         [-0.1691,  0.0422,  0.8420],
         ...,
         [-0.0924, -0.1413,  0.8405],
         [-0.1052, -0.1327,  0.8281],
         [-0.1018, -0.1312,  0.8234]],

        [[-0.2048,  0.0710,  0.8260],
         [-0.1730,  0.0492,  0.8353],
         [-0.1687,  0.0424,  0.8397],
         ...,
         [-0.0925, -0.1413,  0.8404],
         [-0.1053, -0.1327,  0.8279],
         [-0.1019, -0.1314,  0.8231]],

        ...,

        [[-0.2142,  0.0775,  0.8261],
         [-0.1825,  0.0542,  0.8311],
         [-0.1781,  0.0470,  0.8347],
         ...,
         [-0.1085, -0.1384,  0.8167],
         [-0.1220, -0.1287,  0.8060],
         [-0.1189, -0.1271,  0.8011]],

        [[-0.2159,  0.0778,  0.8237],
         [-0.1841,  0.0545,  0.8284],
         [-0.1797,  0.0473,  0.8320],
         ...,
         [-0.1111, -0.1386,  0.8152],
         [-0.1248, -0.1289,  0.8046],
         [-0.1218, -0.1274,  0.7996]],

        [[-0.2158,  0.0802,  0.8256],
         [-0.1841,  0.0568,  0.8305],
         [-0.1797,  0.0497,  0.8341],
         ...,
         [-0.1104, -0.1359,  0.8159],
         [-0.1239, -0.1261,  0.8052],
         [-0.1209, -0.1245,  0.8003]]],
       device='cuda:0', grad_fn=<ThAddBackward>)
2019-06-04 03:23:54,240 : Test time 10h 11m 54s Test Frame No.114 dis:0.018291017040610313




out_img.size:  torch.Size([1, 32, 120, 200])
emb:::: torch.Size([1, 32, 24000])
choose.shape before:  torch.Size([1, 1, 500])
choose:  torch.Size([1, 32, 500])
emb after gather::  torch.Size([1, 32, 500])
pointcloud shape before transpose:  torch.Size([1, 500, 3])
pointcloud after transpose:  torch.Size([1, 3, 500])
PoseNetFeat: x shape after conv layer:  torch.Size([1, 64, 500])
PoseNetFeat: emb shape after conv layer:  torch.Size([1, 64, 500])
after concatenation shape of pointnet1:  torch.Size([1, 128, 500])
after concatenation shape of pointnet2:  torch.Size([1, 256, 500])
apx shape:  torch.Size([1, 1024, 1])
apx shape after change:  torch.Size([1, 1024, 500])
final shape after concat of pointnetfeat_1 & pointnetfeat_2:  torch.Size([1, 1408, 500])
rx shape after 1st iteration:  torch.Size([1, 640, 500])
rx shape after 2nd iteration:  torch.Size([1, 256, 500])
rx shape after 3rd iteration:  torch.Size([1, 128, 500])
rx after shape change:  torch.Size([1, 1, 4, 500])
out__rx shape before contiguous:  torch.Size([1, 4, 500])
out__rx shape after contiguous:  torch.Size([1, 500, 4])
out__cx shape after contiguous:  torch.Size([1, 500, 1])
out__tx shape after contiguous:  torch.Size([1, 500, 3])


emb at the end:  torch.Size([1, 32, 500]) 

*****************ENTERING LOSS*************************


 bs & np vlaues: 1 500
***********************PRED VALUE*************** tensor([[[-0.0570,  0.1298,  0.7063],
         [-0.0626,  0.1288,  0.7017],
         [-0.0996,  0.1286,  0.7713],
         ...,
         [ 0.0177,  0.0097,  0.8357],
         [ 0.0258,  0.0094,  0.8408],
         [ 0.0268,  0.0077,  0.8413]],

        [[-0.0558,  0.1294,  0.7065],
         [-0.0614,  0.1283,  0.7019],
         [-0.0984,  0.1281,  0.7715],
         ...,
         [ 0.0190,  0.0092,  0.8359],
         [ 0.0270,  0.0090,  0.8410],
         [ 0.0280,  0.0072,  0.8415]],

        [[-0.0655,  0.1276,  0.7096],
         [-0.0713,  0.1266,  0.7052],
         [-0.1066,  0.1261,  0.7756],
         ...,
         [ 0.0126,  0.0074,  0.8369],
         [ 0.0208,  0.0072,  0.8419],
         [ 0.0218,  0.0055,  0.8423]],

        ...,

        [[-0.0641,  0.1212,  0.7080],
         [-0.0698,  0.1201,  0.7036],
         [-0.1052,  0.1244,  0.7739],
         ...,
         [ 0.0103,  0.0055,  0.8416],
         [ 0.0185,  0.0053,  0.8466],
         [ 0.0194,  0.0035,  0.8471]],

        [[-0.0601,  0.1166,  0.7035],
         [-0.0656,  0.1155,  0.6989],
         [-0.1041,  0.1188,  0.7676],
         ...,
         [ 0.0090, -0.0003,  0.8389],
         [ 0.0170, -0.0005,  0.8443],
         [ 0.0179, -0.0023,  0.8448]],

        [[-0.0665,  0.1200,  0.7098],
         [-0.0723,  0.1189,  0.7055],
         [-0.1073,  0.1230,  0.7759],
         ...,
         [ 0.0077,  0.0029,  0.8423],
         [ 0.0159,  0.0025,  0.8472],
         [ 0.0168,  0.0008,  0.8477]]],
       device='cuda:0', grad_fn=<ThAddBackward>)
2019-06-04 03:23:54,260 : Test time 10h 11m 54s Test Frame No.115 dis:0.009892144240438938




out_img.size:  torch.Size([1, 32, 120, 160])
emb:::: torch.Size([1, 32, 19200])
choose.shape before:  torch.Size([1, 1, 500])
choose:  torch.Size([1, 32, 500])
emb after gather::  torch.Size([1, 32, 500])
pointcloud shape before transpose:  torch.Size([1, 500, 3])
pointcloud after transpose:  torch.Size([1, 3, 500])
PoseNetFeat: x shape after conv layer:  torch.Size([1, 64, 500])
PoseNetFeat: emb shape after conv layer:  torch.Size([1, 64, 500])
after concatenation shape of pointnet1:  torch.Size([1, 128, 500])
after concatenation shape of pointnet2:  torch.Size([1, 256, 500])
apx shape:  torch.Size([1, 1024, 1])
apx shape after change:  torch.Size([1, 1024, 500])
final shape after concat of pointnetfeat_1 & pointnetfeat_2:  torch.Size([1, 1408, 500])
rx shape after 1st iteration:  torch.Size([1, 640, 500])
rx shape after 2nd iteration:  torch.Size([1, 256, 500])
rx shape after 3rd iteration:  torch.Size([1, 128, 500])
rx after shape change:  torch.Size([1, 1, 4, 500])
out__rx shape before contiguous:  torch.Size([1, 4, 500])
out__rx shape after contiguous:  torch.Size([1, 500, 4])
out__cx shape after contiguous:  torch.Size([1, 500, 1])
out__tx shape after contiguous:  torch.Size([1, 500, 3])


emb at the end:  torch.Size([1, 32, 500]) 

*****************ENTERING LOSS*************************


 bs & np vlaues: 1 500
***********************PRED VALUE*************** tensor([[[-0.0437,  0.1423,  0.8992],
         [-0.0447,  0.1397,  0.8958],
         [ 0.1602,  0.0437,  0.9094],
         ...,
         [-0.0010,  0.1090,  0.7778],
         [ 0.0007,  0.0957,  0.7759],
         [-0.0082,  0.1012,  0.7737]],

        [[-0.0418,  0.1428,  0.9000],
         [-0.0429,  0.1403,  0.8966],
         [ 0.1620,  0.0440,  0.9100],
         ...,
         [ 0.0009,  0.1098,  0.7785],
         [ 0.0026,  0.0965,  0.7766],
         [-0.0063,  0.1020,  0.7744]],

        [[-0.0510,  0.1373,  0.8885],
         [-0.0520,  0.1345,  0.8852],
         [ 0.1536,  0.0420,  0.9098],
         ...,
         [-0.0052,  0.0966,  0.7705],
         [-0.0033,  0.0832,  0.7696],
         [-0.0122,  0.0884,  0.7668]],

        ...,

        [[-0.0589,  0.1140,  0.8844],
         [-0.0601,  0.1107,  0.8817],
         [ 0.1504,  0.0291,  0.9032],
         ...,
         [-0.0206,  0.0569,  0.7707],
         [-0.0183,  0.0436,  0.7717],
         [-0.0275,  0.0481,  0.7688]],

        [[-0.0609,  0.1189,  0.8818],
         [-0.0620,  0.1156,  0.8792],
         [ 0.1491,  0.0362,  0.9030],
         ...,
         [-0.0218,  0.0597,  0.7695],
         [-0.0194,  0.0464,  0.7708],
         [-0.0286,  0.0507,  0.7678]],

        [[-0.0611,  0.1192,  0.8823],
         [-0.0622,  0.1159,  0.8796],
         [ 0.1485,  0.0354,  0.9030],
         ...,
         [-0.0222,  0.0606,  0.7695],
         [-0.0198,  0.0473,  0.7707],
         [-0.0291,  0.0517,  0.7678]]],
       device='cuda:0', grad_fn=<ThAddBackward>)
2019-06-04 03:23:54,278 : Test time 10h 11m 54s Test Frame No.116 dis:0.030068358406424522


here are the MODEL POINTS: 
 [[-0.06322095  0.05611055  0.02252721]
 [-0.04608343  0.06371356  0.02377492]
 [ 0.06447621 -0.1194326   0.02575999]
 ...
 [-0.02460888  0.03776003  0.1438745 ]
 [-0.01311094  0.04155557  0.1477077 ]
 [-0.02195154  0.03953334  0.1523017 ]]


printing here the cloud: 
 tensor([[-1.7733, -1.8181,  7.3980],
        [-1.7626, -1.8073,  7.3820],
        [-1.7695, -1.7731,  7.3820],
        ...,
        [-0.8435, -0.9333,  6.2440],
        [-0.9181, -0.9448,  6.3600],
        [-0.8305, -0.9201,  6.2330]])


printing here the length of cloud: 
 torch.Size([500, 3])



printing here the choose: 
 tensor([[ 1457,  1658,  2657,  2856,  3053,  3254,  3455,  7644,  7844,  8257,
          8446,  8453,  8651,  8844,  8865,  9045,  9051,  9274,  9281,  9445,
          9454,  9463,  9478,  9618,  9643,  9654,  9657,  9669,  9683,  9818,
          9841,  9851,  9855,  9859,  9877,  9883, 10042, 10043, 10046, 10048,
         10066, 10069, 10075, 10080, 10091, 10243, 10247, 10273, 10276, 10283,
         10288, 10289, 10291, 10408, 10441, 10458, 10471, 10472, 10473, 10480,
         10493, 10642, 10665, 10666, 10675, 10679, 10680, 10688, 10699, 10700,
         10707, 10806, 10821, 10852, 10857, 10862, 10884, 10892, 10898, 10903,
         11058, 11072, 11073, 11096, 11099, 11106, 11107, 11108, 11276, 11301,
         11429, 11430, 11477, 11478, 11508, 11626, 11660, 11665, 11666, 11668,
         11669, 11674, 11690, 11703, 11719, 11832, 11835, 11853, 11870, 11877,
         11881, 11882, 11902, 11920, 11926, 12037, 12038, 12061, 12235, 12267,
         12269, 12271, 12297, 12322, 12428, 12434, 12439, 12463, 12468, 12481,
         12503, 12527, 12533, 12630, 12631, 12632, 12657, 12658, 12663, 12672,
         12677, 12685, 12696, 12705, 12720, 12732, 12881, 12894, 12905, 12911,
         12937, 13061, 13062, 13090, 13139, 13148, 13257, 13262, 13271, 13274,
         13289, 13301, 13328, 13333, 13342, 13504, 13508, 13511, 13519, 13525,
         13639, 13648, 13665, 13672, 13707, 13711, 13717, 13847, 13878, 13896,
         13913, 13916, 13917, 13940, 14066, 14088, 14109, 14130, 14137, 14138,
         14142, 14248, 14264, 14271, 14281, 14300, 14302, 14303, 14324, 14351,
         14477, 14478, 14501, 14502, 14565, 14567, 14672, 14706, 14711, 14713,
         14726, 14737, 14744, 14745, 14761, 14826, 14861, 14869, 14880, 14884,
         14886, 14891, 14903, 14904, 14919, 14925, 14927, 14935, 14949, 14951,
         14957, 14958, 14960, 14980, 15028, 15056, 15068, 15077, 15091, 15095,
         15101, 15121, 15132, 15147, 15150, 15156, 15170, 15175, 15181, 15265,
         15266, 15275, 15279, 15304, 15308, 15324, 15325, 15330, 15345, 15353,
         15354, 15355, 15375, 15378, 15381, 15421, 15467, 15478, 15484, 15519,
         15536, 15538, 15542, 15545, 15546, 15572, 15688, 15689, 15716, 15723,
         15737, 15751, 15756, 15825, 15887, 15902, 15913, 15915, 15928, 15941,
         15951, 16019, 16043, 16107, 16126, 16127, 16131, 16155, 16168, 16175,
         16182, 16186, 16190, 16278, 16281, 16283, 16294, 16303, 16319, 16322,
         16332, 16355, 16361, 16370, 16381, 16386, 16388, 16424, 16489, 16511,
         16513, 16516, 16522, 16542, 16572, 16686, 16748, 16754, 16760, 16778,
         16784, 16881, 16893, 16894, 16901, 16912, 16918, 16953, 16964, 16969,
         16992, 17096, 17099, 17108, 17127, 17139, 17141, 17166, 17175, 17191,
         17289, 17308, 17317, 17321, 17340, 17350, 17354, 17356, 17361, 17371,
         17513, 17514, 17524, 17529, 17530, 17546, 17550, 17570, 17585, 17640,
         17700, 17707, 17727, 17737, 17741, 17772, 17785, 17788, 17794, 17795,
         17796, 17897, 17901, 17908, 17910, 17941, 17963, 18115, 18117, 18131,
         18144, 18154, 18165, 18189, 18190, 18320, 18336, 18350, 18353, 18363,
         18367, 18370, 18390, 18511, 18530, 18540, 18567, 18568, 18592, 18729,
         18759, 18769, 18788, 18911, 18921, 18928, 18930, 18937, 18948, 18951,
         18952, 18956, 18959, 18963, 18970, 18982, 19120, 19163, 19167, 19184,
         19194, 19326, 19338, 19354, 19383, 19531, 19560, 19744, 19745, 19752,
         19753, 19762, 19769, 19774, 19779, 19928, 19944, 19964, 19966, 19968,
         19971, 19972, 19975, 19976, 19990, 20130, 20132, 20141, 20159, 20160,
         20167, 20171, 20189, 20326, 20345, 20353, 20355, 20368, 20377, 20530,
         20542, 20574, 20589, 20734, 20737, 20738, 20752, 20763, 20767, 20790,
         20937, 20947, 20952, 20973, 20974, 20985, 20990, 21139, 21351, 21352,
         21764, 21774, 21776, 21964, 22162, 22168, 22354, 22370, 22560, 22772]])


printing here the length of choose: 
 torch.Size([1, 500])



printing here the img_masked: 
 tensor([[[ 727.1397,  727.1397,  727.1397,  ...,  936.7467,  941.1135,
           936.7467],
         [ 727.1397,  727.1397,  727.1397,  ...,  932.3799,  936.7467,
           936.7467],
         [ 727.1397,  727.1397,  727.1397,  ...,  928.0131,  928.0131,
           923.6463],
         ...,
         [ 805.7424,  805.7424,  810.1091,  ...,  818.8428,  805.7424,
           797.0087],
         [ 814.4760,  814.4760,  818.8428,  ...,  836.3101,  823.2096,
           814.4760],
         [ 814.4760,  814.4760,  823.2096,  ...,  858.1441,  849.4105,
           845.0436]],

        [[ 859.5714,  859.5714,  859.5714,  ...,  989.0357,  984.5714,
           975.6429],
         [ 859.5714,  859.5714,  859.5714,  ...,  984.5714,  980.1071,
           975.6429],
         [ 855.1071,  855.1071,  855.1071,  ...,  989.0357,  989.0357,
           984.5714],
         ...,
         [ 957.7857,  957.7857,  962.2500,  ...,  935.4643,  922.0714,
           913.1429],
         [ 966.7143,  966.7143,  962.2500,  ...,  935.4643,  922.0714,
           913.1429],
         [ 966.7143,  966.7143,  966.7143,  ...,  948.8571,  939.9286,
           935.4643]],

        [[1109.3066, 1109.3066, 1109.3066,  ..., 1113.7511, 1122.6400,
          1127.0845],
         [1109.3066, 1109.3066, 1109.3066,  ..., 1109.3066, 1118.1956,
          1127.0845],
         [1100.4177, 1100.4177, 1100.4177,  ..., 1122.6400, 1122.6400,
          1118.1956],
         ...,
         [1113.7511, 1113.7511, 1118.1956,  ..., 1113.7511, 1091.5289,
          1082.6400],
         [1122.6400, 1122.6400, 1122.6400,  ..., 1100.4177, 1087.0845,
          1078.1956],
         [1122.6400, 1131.5289, 1127.0845,  ..., 1104.8622, 1095.9734,
          1082.6400]]])


printing here the length of img_masked: 
 torch.Size([3, 120, 200])



printing here the target: 
 tensor([[-0.0748,  0.1161,  0.7403],
        [-0.0596,  0.1151,  0.7514],
        [ 0.0870,  0.1171,  0.5956],
        ...,
        [-0.0308, -0.0043,  0.7297],
        [-0.0203, -0.0080,  0.7358],
        [-0.0284, -0.0127,  0.7320]])


printing here the length of target: 
 torch.Size([500, 3])



printing here the model_points: 
 tensor([[-0.0632,  0.0561,  0.0225],
        [-0.0461,  0.0637,  0.0238],
        [ 0.0645, -0.1194,  0.0258],
        ...,
        [-0.0246,  0.0378,  0.1439],
        [-0.0131,  0.0416,  0.1477],
        [-0.0220,  0.0395,  0.1523]])


printing here the length of model_points: 
 torch.Size([500, 3])



LONGTENSOR:  300 






LONGTENSOR: tensor([300]) 







out_img.size:  torch.Size([1, 32, 120, 200])
emb:::: torch.Size([1, 32, 24000])
choose.shape before:  torch.Size([1, 1, 500])
choose:  torch.Size([1, 32, 500])
emb after gather::  torch.Size([1, 32, 500])
pointcloud shape before transpose:  torch.Size([1, 500, 3])
pointcloud after transpose:  torch.Size([1, 3, 500])
PoseNetFeat: x shape after conv layer:  torch.Size([1, 64, 500])
PoseNetFeat: emb shape after conv layer:  torch.Size([1, 64, 500])
after concatenation shape of pointnet1:  torch.Size([1, 128, 500])
after concatenation shape of pointnet2:  torch.Size([1, 256, 500])
apx shape:  torch.Size([1, 1024, 1])
apx shape after change:  torch.Size([1, 1024, 500])
final shape after concat of pointnetfeat_1 & pointnetfeat_2:  torch.Size([1, 1408, 500])
rx shape after 1st iteration:  torch.Size([1, 640, 500])
rx shape after 2nd iteration:  torch.Size([1, 256, 500])
rx shape after 3rd iteration:  torch.Size([1, 128, 500])
rx after shape change:  torch.Size([1, 1, 4, 500])
out__rx shape before contiguous:  torch.Size([1, 4, 500])
out__rx shape after contiguous:  torch.Size([1, 500, 4])
out__cx shape after contiguous:  torch.Size([1, 500, 1])
out__tx shape after contiguous:  torch.Size([1, 500, 3])


emb at the end:  torch.Size([1, 32, 500]) 

*****************ENTERING LOSS*************************


 bs & np vlaues: 1 500
***********************PRED VALUE*************** tensor([[[-0.0884,  0.1035,  0.7368],
         [-0.0738,  0.0997,  0.7481],
         [ 0.0809,  0.1352,  0.6046],
         ...,
         [-0.0443, -0.0119,  0.7009],
         [-0.0341, -0.0171,  0.7066],
         [-0.0421, -0.0207,  0.7013]],

        [[-0.0871,  0.1057,  0.7373],
         [-0.0725,  0.1020,  0.7485],
         [ 0.0822,  0.1370,  0.6050],
         ...,
         [-0.0431, -0.0098,  0.7017],
         [-0.0330, -0.0150,  0.7073],
         [-0.0409, -0.0185,  0.7020]],

        [[-0.0809,  0.1167,  0.7406],
         [-0.0663,  0.1130,  0.7519],
         [ 0.0888,  0.1461,  0.6083],
         ...,
         [-0.0372,  0.0007,  0.7061],
         [-0.0271, -0.0045,  0.7118],
         [-0.0350, -0.0081,  0.7066]],

        ...,

        [[-0.0790,  0.1294,  0.7317],
         [-0.0647,  0.1269,  0.7436],
         [ 0.0927,  0.1422,  0.5994],
         ...,
         [-0.0358,  0.0099,  0.7115],
         [-0.0258,  0.0054,  0.7179],
         [-0.0337,  0.0013,  0.7130]],

        [[-0.0806,  0.1283,  0.7369],
         [-0.0661,  0.1255,  0.7485],
         [ 0.0893,  0.1411,  0.6023],
         ...,
         [-0.0393,  0.0086,  0.7142],
         [-0.0292,  0.0039,  0.7203],
         [-0.0372, -0.0001,  0.7155]],

        [[-0.0706,  0.1356,  0.7317],
         [-0.0562,  0.1332,  0.7435],
         [ 0.1006,  0.1479,  0.5986],
         ...,
         [-0.0274,  0.0160,  0.7119],
         [-0.0174,  0.0116,  0.7183],
         [-0.0253,  0.0074,  0.7134]]],
       device='cuda:0', grad_fn=<ThAddBackward>)
2019-06-04 03:23:54,701 : Test time 10h 11m 54s Test Frame No.117 dis:0.010102207772433758




out_img.size:  torch.Size([1, 32, 120, 160])
emb:::: torch.Size([1, 32, 19200])
choose.shape before:  torch.Size([1, 1, 500])
choose:  torch.Size([1, 32, 500])
emb after gather::  torch.Size([1, 32, 500])
pointcloud shape before transpose:  torch.Size([1, 500, 3])
pointcloud after transpose:  torch.Size([1, 3, 500])
PoseNetFeat: x shape after conv layer:  torch.Size([1, 64, 500])
PoseNetFeat: emb shape after conv layer:  torch.Size([1, 64, 500])
after concatenation shape of pointnet1:  torch.Size([1, 128, 500])
after concatenation shape of pointnet2:  torch.Size([1, 256, 500])
apx shape:  torch.Size([1, 1024, 1])
apx shape after change:  torch.Size([1, 1024, 500])
final shape after concat of pointnetfeat_1 & pointnetfeat_2:  torch.Size([1, 1408, 500])
rx shape after 1st iteration:  torch.Size([1, 640, 500])
rx shape after 2nd iteration:  torch.Size([1, 256, 500])
rx shape after 3rd iteration:  torch.Size([1, 128, 500])
rx after shape change:  torch.Size([1, 1, 4, 500])
out__rx shape before contiguous:  torch.Size([1, 4, 500])
out__rx shape after contiguous:  torch.Size([1, 500, 4])
out__cx shape after contiguous:  torch.Size([1, 500, 1])
out__tx shape after contiguous:  torch.Size([1, 500, 3])


emb at the end:  torch.Size([1, 32, 500]) 

*****************ENTERING LOSS*************************


 bs & np vlaues: 1 500
***********************PRED VALUE*************** tensor([[[ 0.1000,  0.0029,  0.8638],
         [-0.0693,  0.0903,  0.8199],
         [ 0.0435, -0.0468,  0.8757],
         ...,
         [-0.0259,  0.0181,  0.7228],
         [-0.0368,  0.0155,  0.7223],
         [-0.0341,  0.0239,  0.7181]],

        [[ 0.1002,  0.0027,  0.8639],
         [-0.0692,  0.0897,  0.8194],
         [ 0.0436, -0.0468,  0.8764],
         ...,
         [-0.0260,  0.0165,  0.7230],
         [-0.0369,  0.0138,  0.7225],
         [-0.0342,  0.0222,  0.7182]],

        [[ 0.1033,  0.0057,  0.8648],
         [-0.0664,  0.0924,  0.8209],
         [ 0.0469, -0.0441,  0.8770],
         ...,
         [-0.0229,  0.0200,  0.7240],
         [-0.0338,  0.0173,  0.7235],
         [-0.0312,  0.0257,  0.7192]],

        ...,

        [[ 0.0823,  0.0025,  0.8608],
         [-0.0915,  0.0720,  0.8041],
         [ 0.0280, -0.0444,  0.8866],
         ...,
         [-0.0488, -0.0204,  0.7256],
         [-0.0595, -0.0234,  0.7262],
         [-0.0573, -0.0162,  0.7199]],

        [[ 0.0856, -0.0019,  0.8576],
         [-0.0890,  0.0665,  0.8022],
         [ 0.0318, -0.0491,  0.8838],
         ...,
         [-0.0463, -0.0255,  0.7234],
         [-0.0570, -0.0286,  0.7241],
         [-0.0549, -0.0214,  0.7178]],

        [[ 0.0830, -0.0027,  0.8619],
         [-0.0908,  0.0685,  0.8074],
         [ 0.0287, -0.0501,  0.8867],
         ...,
         [-0.0484, -0.0219,  0.7265],
         [-0.0592, -0.0249,  0.7271],
         [-0.0570, -0.0175,  0.7210]]],
       device='cuda:0', grad_fn=<ThAddBackward>)
2019-06-04 03:23:54,720 : Test time 10h 11m 54s Test Frame No.118 dis:0.020698782056570053




out_img.size:  torch.Size([1, 32, 120, 200])
emb:::: torch.Size([1, 32, 24000])
choose.shape before:  torch.Size([1, 1, 500])
choose:  torch.Size([1, 32, 500])
emb after gather::  torch.Size([1, 32, 500])
pointcloud shape before transpose:  torch.Size([1, 500, 3])
pointcloud after transpose:  torch.Size([1, 3, 500])
PoseNetFeat: x shape after conv layer:  torch.Size([1, 64, 500])
PoseNetFeat: emb shape after conv layer:  torch.Size([1, 64, 500])
after concatenation shape of pointnet1:  torch.Size([1, 128, 500])
after concatenation shape of pointnet2:  torch.Size([1, 256, 500])
apx shape:  torch.Size([1, 1024, 1])
apx shape after change:  torch.Size([1, 1024, 500])
final shape after concat of pointnetfeat_1 & pointnetfeat_2:  torch.Size([1, 1408, 500])
rx shape after 1st iteration:  torch.Size([1, 640, 500])
rx shape after 2nd iteration:  torch.Size([1, 256, 500])
rx shape after 3rd iteration:  torch.Size([1, 128, 500])
rx after shape change:  torch.Size([1, 1, 4, 500])
out__rx shape before contiguous:  torch.Size([1, 4, 500])
out__rx shape after contiguous:  torch.Size([1, 500, 4])
out__cx shape after contiguous:  torch.Size([1, 500, 1])
out__tx shape after contiguous:  torch.Size([1, 500, 3])


emb at the end:  torch.Size([1, 32, 500]) 

*****************ENTERING LOSS*************************


 bs & np vlaues: 1 500
***********************PRED VALUE*************** tensor([[[-0.0314,  0.1329,  0.6817],
         [-0.0329,  0.1336,  0.6774],
         [-0.0396,  0.1233,  0.7054],
         ...,
         [ 0.0129,  0.0217,  0.6540],
         [-0.0000,  0.0154,  0.6669],
         [ 0.0133,  0.0171,  0.6582]],

        [[-0.0362,  0.1324,  0.6799],
         [-0.0377,  0.1330,  0.6756],
         [-0.0444,  0.1227,  0.7036],
         ...,
         [ 0.0085,  0.0213,  0.6524],
         [-0.0044,  0.0150,  0.6653],
         [ 0.0090,  0.0168,  0.6566]],

        [[-0.0307,  0.1326,  0.6807],
         [-0.0321,  0.1331,  0.6764],
         [-0.0389,  0.1231,  0.7046],
         ...,
         [ 0.0139,  0.0211,  0.6543],
         [ 0.0010,  0.0150,  0.6672],
         [ 0.0144,  0.0166,  0.6585]],

        ...,

        [[-0.0203,  0.1436,  0.6915],
         [-0.0220,  0.1445,  0.6874],
         [-0.0267,  0.1316,  0.7148],
         ...,
         [ 0.0266,  0.0371,  0.6520],
         [ 0.0148,  0.0292,  0.6650],
         [ 0.0275,  0.0322,  0.6558]],

        [[-0.0201,  0.1439,  0.6922],
         [-0.0219,  0.1448,  0.6881],
         [-0.0261,  0.1319,  0.7155],
         ...,
         [ 0.0271,  0.0378,  0.6520],
         [ 0.0155,  0.0299,  0.6651],
         [ 0.0281,  0.0330,  0.6558]],

        [[-0.0169,  0.1460,  0.6925],
         [-0.0188,  0.1469,  0.6884],
         [-0.0229,  0.1342,  0.7159],
         ...,
         [ 0.0294,  0.0395,  0.6526],
         [ 0.0179,  0.0316,  0.6659],
         [ 0.0304,  0.0346,  0.6564]]],
       device='cuda:0', grad_fn=<ThAddBackward>)
2019-06-04 03:23:54,739 : Test time 10h 11m 54s Test Frame No.119 dis:0.01331979688256979
2019-06-04 03:23:54,740 : Test time 10h 11m 54s Epoch 16 TEST FINISH Avg dis: 0.020833119889721273
Traceback (most recent call last):
  File "./tools/train_duplicate.py", line 279, in <module>
    main()
  File "./tools/train_duplicate.py", line 239, in main
    torch.save(estimator.state_dict(), '{0}/pose_model_{1}_{2}.pth'.format(opt.outf, epoch, test_dis))
  File "/home/smart/virtual_envs/dfusion/lib/python3.6/site-packages/torch/serialization.py", line 209, in save
    return _with_file_like(f, "wb", lambda f: _save(obj, f, pickle_module, pickle_protocol))
  File "/home/smart/virtual_envs/dfusion/lib/python3.6/site-packages/torch/serialization.py", line 134, in _with_file_like
    return body(f)
  File "/home/smart/virtual_envs/dfusion/lib/python3.6/site-packages/torch/serialization.py", line 209, in <lambda>
    return _with_file_like(f, "wb", lambda f: _save(obj, f, pickle_module, pickle_protocol))
  File "/home/smart/virtual_envs/dfusion/lib/python3.6/site-packages/torch/serialization.py", line 288, in _save
    serialized_storages[key]._write_file(f, _should_read_directly(f))
RuntimeError: Unknown error -1